
Video Player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b64  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018bc  08009d4c  08009d4c  0000ad4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b608  0800b608  0000d070  2**0
                  CONTENTS
  4 .ARM          00000000  0800b608  0800b608  0000d070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b608  0800b608  0000d070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b608  0800b608  0000c608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b60c  0800b60c  0000c60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800b610  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041e0  20000070  0800b680  0000d070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004250  0800b680  0000d250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ddd3  00000000  00000000  0000d099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002571  00000000  00000000  0001ae6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  0001d3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab1  00000000  00000000  0001e198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6ec  00000000  00000000  0001ec49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011fc6  00000000  00000000  00039335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099639  00000000  00000000  0004b2fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4934  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e94  00000000  00000000  000e4978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  000e880c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000070 	.word	0x20000070
 8000204:	00000000 	.word	0x00000000
 8000208:	08009d34 	.word	0x08009d34

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000074 	.word	0x20000074
 8000224:	08009d34 	.word	0x08009d34

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	@ 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2uiz>:
 80007f4:	004a      	lsls	r2, r1, #1
 80007f6:	d211      	bcs.n	800081c <__aeabi_d2uiz+0x28>
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007fc:	d211      	bcs.n	8000822 <__aeabi_d2uiz+0x2e>
 80007fe:	d50d      	bpl.n	800081c <__aeabi_d2uiz+0x28>
 8000800:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d40e      	bmi.n	8000828 <__aeabi_d2uiz+0x34>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	fa23 f002 	lsr.w	r0, r3, r2
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000826:	d102      	bne.n	800082e <__aeabi_d2uiz+0x3a>
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <Debounce_Init>:
  * @param  active_level: Indicates if the key is active-high or active-low.
  * @param  led_port: Optional LED GPIO port. Pass NULL if not used.
  * @param  led_pin: Optional LED GPIO pin. Pass 0 if not used.
  * @retval None
  */
void Debounce_Init(Key_HandleTypeDef* key, GPIO_TypeDef* port, uint16_t pin, KeyActiveLevel active_level, GPIO_TypeDef* led_port, uint16_t led_pin) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	4611      	mov	r1, r2
 8000840:	461a      	mov	r2, r3
 8000842:	460b      	mov	r3, r1
 8000844:	80fb      	strh	r3, [r7, #6]
 8000846:	4613      	mov	r3, r2
 8000848:	717b      	strb	r3, [r7, #5]
    assert_param(IS_GPIO_ALL_INSTANCE(port));
    assert_param(IS_GPIO_PIN(pin));
    assert_param(IS_KEY_ACTIVE_LEVEL(active_level));

    key->port = port;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	68ba      	ldr	r2, [r7, #8]
 800084e:	601a      	str	r2, [r3, #0]
    key->pin = pin;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	88fa      	ldrh	r2, [r7, #6]
 8000854:	809a      	strh	r2, [r3, #4]
    key->active_level = active_level;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	797a      	ldrb	r2, [r7, #5]
 800085a:	719a      	strb	r2, [r3, #6]
    key->current_state = HAL_GPIO_ReadPin(port, pin);  // Initialize current state
 800085c:	88fb      	ldrh	r3, [r7, #6]
 800085e:	4619      	mov	r1, r3
 8000860:	68b8      	ldr	r0, [r7, #8]
 8000862:	f006 ff95 	bl	8007790 <HAL_GPIO_ReadPin>
 8000866:	4603      	mov	r3, r0
 8000868:	461a      	mov	r2, r3
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	71da      	strb	r2, [r3, #7]
    key->previous_state = key->current_state;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	79da      	ldrb	r2, [r3, #7]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	721a      	strb	r2, [r3, #8]
    key->press_detected = 0;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	2200      	movs	r2, #0
 800087a:	725a      	strb	r2, [r3, #9]
    key->release_detected = 0;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	2200      	movs	r2, #0
 8000880:	729a      	strb	r2, [r3, #10]

    // LED initialization (optional)
    if (led_port != NULL && IS_GPIO_ALL_INSTANCE(led_port) && IS_GPIO_PIN(led_pin)) {
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d028      	beq.n	80008da <Debounce_Init+0xa6>
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	4a1b      	ldr	r2, [pc, #108]	@ (80008f8 <Debounce_Init+0xc4>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d017      	beq.n	80008c0 <Debounce_Init+0x8c>
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	4a1a      	ldr	r2, [pc, #104]	@ (80008fc <Debounce_Init+0xc8>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d013      	beq.n	80008c0 <Debounce_Init+0x8c>
 8000898:	69bb      	ldr	r3, [r7, #24]
 800089a:	4a19      	ldr	r2, [pc, #100]	@ (8000900 <Debounce_Init+0xcc>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d00f      	beq.n	80008c0 <Debounce_Init+0x8c>
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	4a18      	ldr	r2, [pc, #96]	@ (8000904 <Debounce_Init+0xd0>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d00b      	beq.n	80008c0 <Debounce_Init+0x8c>
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	4a17      	ldr	r2, [pc, #92]	@ (8000908 <Debounce_Init+0xd4>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d007      	beq.n	80008c0 <Debounce_Init+0x8c>
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	4a16      	ldr	r2, [pc, #88]	@ (800090c <Debounce_Init+0xd8>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d003      	beq.n	80008c0 <Debounce_Init+0x8c>
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	4a15      	ldr	r2, [pc, #84]	@ (8000910 <Debounce_Init+0xdc>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d10c      	bne.n	80008da <Debounce_Init+0xa6>
 80008c0:	8bbb      	ldrh	r3, [r7, #28]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d009      	beq.n	80008da <Debounce_Init+0xa6>
        key->led_port = led_port;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	60da      	str	r2, [r3, #12]
        key->led_pin = led_pin;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	8bba      	ldrh	r2, [r7, #28]
 80008d0:	821a      	strh	r2, [r3, #16]
        key->led_enabled = 1;  // Enable LED control
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	2201      	movs	r2, #1
 80008d6:	749a      	strb	r2, [r3, #18]
 80008d8:	e009      	b.n	80008ee <Debounce_Init+0xba>
    } else {
        key->led_port = NULL;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
        key->led_pin = 0;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	2200      	movs	r2, #0
 80008e4:	821a      	strh	r2, [r3, #16]
        key->led_enabled = 0;  // Disable LED control
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	2200      	movs	r2, #0
 80008ea:	749a      	strb	r2, [r3, #18]
    }
}
 80008ec:	bf00      	nop
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40010800 	.word	0x40010800
 80008fc:	40010c00 	.word	0x40010c00
 8000900:	40011000 	.word	0x40011000
 8000904:	40011400 	.word	0x40011400
 8000908:	40011800 	.word	0x40011800
 800090c:	40011c00 	.word	0x40011c00
 8000910:	40012000 	.word	0x40012000

08000914 <Debounce_Update>:
  *         interrupt) to update the key's current state and detect press 
  *         or release events.
  * @param  key: Pointer to the key handle structure.
  * @retval None
  */
void Debounce_Update(Key_HandleTypeDef* key) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
    assert_param(IS_GPIO_ALL_INSTANCE(key->port));
    assert_param(IS_GPIO_PIN(key->pin));
    assert_param(IS_KEY_ACTIVE_LEVEL(key->active_level));

    key->current_state = HAL_GPIO_ReadPin(key->port, key->pin);  // Read current state
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	889b      	ldrh	r3, [r3, #4]
 8000924:	4619      	mov	r1, r3
 8000926:	4610      	mov	r0, r2
 8000928:	f006 ff32 	bl	8007790 <HAL_GPIO_ReadPin>
 800092c:	4603      	mov	r3, r0
 800092e:	461a      	mov	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	71da      	strb	r2, [r3, #7]

    uint8_t rising_edge = (key->current_state == GPIO_PIN_SET && key->previous_state == GPIO_PIN_RESET);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	79db      	ldrb	r3, [r3, #7]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d105      	bne.n	8000948 <Debounce_Update+0x34>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	7a1b      	ldrb	r3, [r3, #8]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d101      	bne.n	8000948 <Debounce_Update+0x34>
 8000944:	2301      	movs	r3, #1
 8000946:	e000      	b.n	800094a <Debounce_Update+0x36>
 8000948:	2300      	movs	r3, #0
 800094a:	73fb      	strb	r3, [r7, #15]
    uint8_t falling_edge = (key->current_state == GPIO_PIN_RESET && key->previous_state == GPIO_PIN_SET);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	79db      	ldrb	r3, [r3, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d105      	bne.n	8000960 <Debounce_Update+0x4c>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	7a1b      	ldrb	r3, [r3, #8]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d101      	bne.n	8000960 <Debounce_Update+0x4c>
 800095c:	2301      	movs	r3, #1
 800095e:	e000      	b.n	8000962 <Debounce_Update+0x4e>
 8000960:	2300      	movs	r3, #0
 8000962:	73bb      	strb	r3, [r7, #14]

    if (key->active_level == KEY_ACTIVE_HIGH) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	799b      	ldrb	r3, [r3, #6]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d106      	bne.n	800097a <Debounce_Update+0x66>
        key->press_detected = rising_edge;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	7bfa      	ldrb	r2, [r7, #15]
 8000970:	725a      	strb	r2, [r3, #9]
        key->release_detected = falling_edge;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7bba      	ldrb	r2, [r7, #14]
 8000976:	729a      	strb	r2, [r3, #10]
 8000978:	e005      	b.n	8000986 <Debounce_Update+0x72>
    } else {
        key->press_detected = falling_edge;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7bba      	ldrb	r2, [r7, #14]
 800097e:	725a      	strb	r2, [r3, #9]
        key->release_detected = rising_edge;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	7bfa      	ldrb	r2, [r7, #15]
 8000984:	729a      	strb	r2, [r3, #10]
    }

    // Handle LED control if enabled
    if (key->led_enabled) {
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	7c9b      	ldrb	r3, [r3, #18]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d018      	beq.n	80009c0 <Debounce_Update+0xac>
        if (key->press_detected) {
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	7a5b      	ldrb	r3, [r3, #9]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d008      	beq.n	80009a8 <Debounce_Update+0x94>
            HAL_GPIO_WritePin(key->led_port, key->led_pin, GPIO_PIN_RESET);  // Turn LED on
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	68d8      	ldr	r0, [r3, #12]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	8a1b      	ldrh	r3, [r3, #16]
 800099e:	2200      	movs	r2, #0
 80009a0:	4619      	mov	r1, r3
 80009a2:	f006 ff0c 	bl	80077be <HAL_GPIO_WritePin>
 80009a6:	e00b      	b.n	80009c0 <Debounce_Update+0xac>
        } else if (key->release_detected) {
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	7a9b      	ldrb	r3, [r3, #10]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d007      	beq.n	80009c0 <Debounce_Update+0xac>
            HAL_GPIO_WritePin(key->led_port, key->led_pin, GPIO_PIN_SET);  // Turn LED off
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	68d8      	ldr	r0, [r3, #12]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	8a1b      	ldrh	r3, [r3, #16]
 80009b8:	2201      	movs	r2, #1
 80009ba:	4619      	mov	r1, r3
 80009bc:	f006 feff 	bl	80077be <HAL_GPIO_WritePin>
        }
    }

    // Update previous state for next comparison
    key->previous_state = key->current_state;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	79da      	ldrb	r2, [r3, #7]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	721a      	strb	r2, [r3, #8]
}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <Debounce_ReadPress>:
  * @brief  Reads the press detection flag for the key.
  *         Clears the flag after reading.
  * @param  key: Pointer to the key handle structure.
  * @retval 1 if a press is detected, 0 otherwise.
  */
uint8_t Debounce_ReadPress(Key_HandleTypeDef* key) {
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
    uint8_t press = key->press_detected;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	7a5b      	ldrb	r3, [r3, #9]
 80009dc:	73fb      	strb	r3, [r7, #15]
    key->press_detected = 0;  // Clear the flag after reading
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2200      	movs	r2, #0
 80009e2:	725a      	strb	r2, [r3, #9]
    return press;
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <Debounce_InitKeyWKUP>:

/**
  * @brief  Initializes the predefined key Key_WKUP.
  * @retval None
  */
void Debounce_InitKeyWKUP(void){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af02      	add	r7, sp, #8
    Debounce_Init(&Key_WKUP, GPIOA, GPIO_PIN_0, KEY_ACTIVE_HIGH, NULL, 0);
 80009f6:	2300      	movs	r3, #0
 80009f8:	9301      	str	r3, [sp, #4]
 80009fa:	2300      	movs	r3, #0
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	2301      	movs	r3, #1
 8000a00:	2201      	movs	r2, #1
 8000a02:	4903      	ldr	r1, [pc, #12]	@ (8000a10 <Debounce_InitKeyWKUP+0x20>)
 8000a04:	4803      	ldr	r0, [pc, #12]	@ (8000a14 <Debounce_InitKeyWKUP+0x24>)
 8000a06:	f7ff ff15 	bl	8000834 <Debounce_Init>
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40010800 	.word	0x40010800
 8000a14:	2000008c 	.word	0x2000008c

08000a18 <Debounce_InitKey0>:

/**
  * @brief  Initializes the predefined key Key0.
  * @retval None
  */
void Debounce_InitKey0(void){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af02      	add	r7, sp, #8
    Debounce_Init(&Key0, GPIOC, GPIO_PIN_5, KEY_ACTIVE_LOW, GPIOA, GPIO_PIN_8);
 8000a1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a22:	9301      	str	r3, [sp, #4]
 8000a24:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <Debounce_InitKey0+0x24>)
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2300      	movs	r3, #0
 8000a2a:	2220      	movs	r2, #32
 8000a2c:	4904      	ldr	r1, [pc, #16]	@ (8000a40 <Debounce_InitKey0+0x28>)
 8000a2e:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <Debounce_InitKey0+0x2c>)
 8000a30:	f7ff ff00 	bl	8000834 <Debounce_Init>
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40010800 	.word	0x40010800
 8000a40:	40011000 	.word	0x40011000
 8000a44:	200000a0 	.word	0x200000a0

08000a48 <Debounce_InitKey1>:

/**
  * @brief  Initializes the predefined key Key1.
  * @retval None
  */
void Debounce_InitKey1(void){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af02      	add	r7, sp, #8
    Debounce_Init(&Key1, GPIOA, GPIO_PIN_15, KEY_ACTIVE_LOW, GPIOD, GPIO_PIN_2);
 8000a4e:	2304      	movs	r3, #4
 8000a50:	9301      	str	r3, [sp, #4]
 8000a52:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <Debounce_InitKey1+0x24>)
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2300      	movs	r3, #0
 8000a58:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a5c:	4904      	ldr	r1, [pc, #16]	@ (8000a70 <Debounce_InitKey1+0x28>)
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <Debounce_InitKey1+0x2c>)
 8000a60:	f7ff fee8 	bl	8000834 <Debounce_Init>
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40011400 	.word	0x40011400
 8000a70:	40010800 	.word	0x40010800
 8000a74:	200000b4 	.word	0x200000b4

08000a78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8000b78 <MX_GPIO_Init+0x100>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a39      	ldr	r2, [pc, #228]	@ (8000b78 <MX_GPIO_Init+0x100>)
 8000a92:	f043 0320 	orr.w	r3, r3, #32
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b37      	ldr	r3, [pc, #220]	@ (8000b78 <MX_GPIO_Init+0x100>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f003 0320 	and.w	r3, r3, #32
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa4:	4b34      	ldr	r3, [pc, #208]	@ (8000b78 <MX_GPIO_Init+0x100>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a33      	ldr	r2, [pc, #204]	@ (8000b78 <MX_GPIO_Init+0x100>)
 8000aaa:	f043 0304 	orr.w	r3, r3, #4
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b31      	ldr	r3, [pc, #196]	@ (8000b78 <MX_GPIO_Init+0x100>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f003 0304 	and.w	r3, r3, #4
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abc:	4b2e      	ldr	r3, [pc, #184]	@ (8000b78 <MX_GPIO_Init+0x100>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8000b78 <MX_GPIO_Init+0x100>)
 8000ac2:	f043 0310 	orr.w	r3, r3, #16
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8000b78 <MX_GPIO_Init+0x100>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f003 0310 	and.w	r3, r3, #16
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ada:	4828      	ldr	r0, [pc, #160]	@ (8000b7c <MX_GPIO_Init+0x104>)
 8000adc:	f006 fe6f 	bl	80077be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2104      	movs	r1, #4
 8000ae4:	4826      	ldr	r0, [pc, #152]	@ (8000b80 <MX_GPIO_Init+0x108>)
 8000ae6:	f006 fe6a 	bl	80077be <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 8000aea:	2301      	movs	r3, #1
 8000aec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	4619      	mov	r1, r3
 8000afc:	481f      	ldr	r0, [pc, #124]	@ (8000b7c <MX_GPIO_Init+0x104>)
 8000afe:	f006 fcb3 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8000b02:	2320      	movs	r3, #32
 8000b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	4619      	mov	r1, r3
 8000b14:	481b      	ldr	r0, [pc, #108]	@ (8000b84 <MX_GPIO_Init+0x10c>)
 8000b16:	f006 fca7 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000b1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4619      	mov	r1, r3
 8000b32:	4812      	ldr	r0, [pc, #72]	@ (8000b7c <MX_GPIO_Init+0x104>)
 8000b34:	f006 fc98 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000b38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480b      	ldr	r0, [pc, #44]	@ (8000b7c <MX_GPIO_Init+0x104>)
 8000b4e:	f006 fc8b 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000b52:	2304      	movs	r3, #4
 8000b54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0310 	add.w	r3, r7, #16
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	@ (8000b80 <MX_GPIO_Init+0x108>)
 8000b6a:	f006 fc7d 	bl	8007468 <HAL_GPIO_Init>

}
 8000b6e:	bf00      	nop
 8000b70:	3720      	adds	r7, #32
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40010800 	.word	0x40010800
 8000b80:	40011400 	.word	0x40011400
 8000b84:	40011000 	.word	0x40011000

08000b88 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000b92:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc8 <LCD_WR_REG+0x40>)
 8000b94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b98:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <LCD_WR_REG+0x40>)
 8000b9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ba0:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <LCD_WR_REG+0x44>)
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000ba8:	4b07      	ldr	r3, [pc, #28]	@ (8000bc8 <LCD_WR_REG+0x40>)
 8000baa:	2280      	movs	r2, #128	@ 0x80
 8000bac:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000bae:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <LCD_WR_REG+0x40>)
 8000bb0:	2280      	movs	r2, #128	@ 0x80
 8000bb2:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000bb4:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <LCD_WR_REG+0x40>)
 8000bb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bba:	611a      	str	r2, [r3, #16]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40011000 	.word	0x40011000
 8000bcc:	40010c00 	.word	0x40010c00

08000bd0 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8000bda:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <LCD_WR_DATAX+0x40>)
 8000bdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000be0:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <LCD_WR_DATAX+0x40>)
 8000be4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000be8:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <LCD_WR_DATAX+0x44>)
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <LCD_WR_DATAX+0x40>)
 8000bf2:	2280      	movs	r2, #128	@ 0x80
 8000bf4:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <LCD_WR_DATAX+0x40>)
 8000bf8:	2280      	movs	r2, #128	@ 0x80
 8000bfa:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000bfc:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <LCD_WR_DATAX+0x40>)
 8000bfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c02:	611a      	str	r2, [r3, #16]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	40011000 	.word	0x40011000
 8000c14:	40010c00 	.word	0x40010c00

08000c18 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c94 <LCD_RD_DATA+0x7c>)
 8000c20:	f04f 3288 	mov.w	r2, #2290649224	@ 0x88888888
 8000c24:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000c26:	4b1b      	ldr	r3, [pc, #108]	@ (8000c94 <LCD_RD_DATA+0x7c>)
 8000c28:	f04f 3288 	mov.w	r2, #2290649224	@ 0x88888888
 8000c2c:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000c2e:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <LCD_RD_DATA+0x7c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000c34:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <LCD_RD_DATA+0x80>)
 8000c36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c3a:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000c3c:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <LCD_RD_DATA+0x80>)
 8000c3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c42:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000c44:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <LCD_RD_DATA+0x80>)
 8000c46:	2240      	movs	r2, #64	@ 0x40
 8000c48:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000c4a:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <LCD_RD_DATA+0x84>)
 8000c4c:	889b      	ldrh	r3, [r3, #4]
 8000c4e:	f648 1289 	movw	r2, #35209	@ 0x8989
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d102      	bne.n	8000c5c <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000c56:	2001      	movs	r0, #1
 8000c58:	f006 f992 	bl	8006f80 <HAL_Delay>
	t = DATAIN
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c94 <LCD_RD_DATA+0x7c>)
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000c62:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <LCD_RD_DATA+0x80>)
 8000c64:	2240      	movs	r2, #64	@ 0x40
 8000c66:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000c68:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <LCD_RD_DATA+0x80>)
 8000c6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c6e:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000c70:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <LCD_RD_DATA+0x7c>)
 8000c72:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8000c76:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <LCD_RD_DATA+0x7c>)
 8000c7a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8000c7e:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000c80:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <LCD_RD_DATA+0x7c>)
 8000c82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c86:	60da      	str	r2, [r3, #12]
	return t;
 8000c88:	88fb      	ldrh	r3, [r7, #6]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40010c00 	.word	0x40010c00
 8000c98:	40011000 	.word	0x40011000
 8000c9c:	200000cc 	.word	0x200000cc

08000ca0 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	460a      	mov	r2, r1
 8000caa:	80fb      	strh	r3, [r7, #6]
 8000cac:	4613      	mov	r3, r2
 8000cae:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff68 	bl	8000b88 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <LCD_WriteReg+0x4c>)
 8000cba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cbe:	611a      	str	r2, [r3, #16]
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cec <LCD_WriteReg+0x4c>)
 8000cc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cc6:	615a      	str	r2, [r3, #20]
 8000cc8:	4a09      	ldr	r2, [pc, #36]	@ (8000cf0 <LCD_WriteReg+0x50>)
 8000cca:	88bb      	ldrh	r3, [r7, #4]
 8000ccc:	60d3      	str	r3, [r2, #12]
 8000cce:	4b07      	ldr	r3, [pc, #28]	@ (8000cec <LCD_WriteReg+0x4c>)
 8000cd0:	2280      	movs	r2, #128	@ 0x80
 8000cd2:	615a      	str	r2, [r3, #20]
 8000cd4:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <LCD_WriteReg+0x4c>)
 8000cd6:	2280      	movs	r2, #128	@ 0x80
 8000cd8:	611a      	str	r2, [r3, #16]
 8000cda:	4b04      	ldr	r3, [pc, #16]	@ (8000cec <LCD_WriteReg+0x4c>)
 8000cdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ce0:	611a      	str	r2, [r3, #16]
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40011000 	.word	0x40011000
 8000cf0:	40010c00 	.word	0x40010c00

08000cf4 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000cfe:	88fb      	ldrh	r3, [r7, #6]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff41 	bl	8000b88 <LCD_WR_REG>
	return LCD_RD_DATA();
 8000d06:	f7ff ff87 	bl	8000c18 <LCD_RD_DATA>
 8000d0a:	4603      	mov	r3, r0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <LCD_WriteRAM_Prepare+0x14>)
 8000d1a:	891b      	ldrh	r3, [r3, #8]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff33 	bl	8000b88 <LCD_WR_REG>
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200000cc 	.word	0x200000cc

08000d2c <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	460a      	mov	r2, r1
 8000d36:	80fb      	strh	r3, [r7, #6]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000d3c:	4b73      	ldr	r3, [pc, #460]	@ (8000f0c <LCD_SetCursor+0x1e0>)
 8000d3e:	889b      	ldrh	r3, [r3, #4]
 8000d40:	f249 3241 	movw	r2, #37697	@ 0x9341
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d005      	beq.n	8000d54 <LCD_SetCursor+0x28>
 8000d48:	4b70      	ldr	r3, [pc, #448]	@ (8000f0c <LCD_SetCursor+0x1e0>)
 8000d4a:	889b      	ldrh	r3, [r3, #4]
 8000d4c:	f245 3210 	movw	r2, #21264	@ 0x5310
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d164      	bne.n	8000e1e <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000d54:	4b6d      	ldr	r3, [pc, #436]	@ (8000f0c <LCD_SetCursor+0x1e0>)
 8000d56:	895b      	ldrh	r3, [r3, #10]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff15 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000d5e:	4b6c      	ldr	r3, [pc, #432]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000d60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d64:	611a      	str	r2, [r3, #16]
 8000d66:	4b6a      	ldr	r3, [pc, #424]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000d68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d6c:	615a      	str	r2, [r3, #20]
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	4b67      	ldr	r3, [pc, #412]	@ (8000f14 <LCD_SetCursor+0x1e8>)
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	4b65      	ldr	r3, [pc, #404]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000d7a:	2280      	movs	r2, #128	@ 0x80
 8000d7c:	615a      	str	r2, [r3, #20]
 8000d7e:	4b64      	ldr	r3, [pc, #400]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000d80:	2280      	movs	r2, #128	@ 0x80
 8000d82:	611a      	str	r2, [r3, #16]
 8000d84:	4b62      	ldr	r3, [pc, #392]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000d86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d8a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000d8c:	4b60      	ldr	r3, [pc, #384]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000d8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d92:	611a      	str	r2, [r3, #16]
 8000d94:	4b5e      	ldr	r3, [pc, #376]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000d96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d9a:	615a      	str	r2, [r3, #20]
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	4a5d      	ldr	r2, [pc, #372]	@ (8000f14 <LCD_SetCursor+0x1e8>)
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	60d3      	str	r3, [r2, #12]
 8000da4:	4b5a      	ldr	r3, [pc, #360]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000da6:	2280      	movs	r2, #128	@ 0x80
 8000da8:	615a      	str	r2, [r3, #20]
 8000daa:	4b59      	ldr	r3, [pc, #356]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000dac:	2280      	movs	r2, #128	@ 0x80
 8000dae:	611a      	str	r2, [r3, #16]
 8000db0:	4b57      	ldr	r3, [pc, #348]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000db2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000db6:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000db8:	4b54      	ldr	r3, [pc, #336]	@ (8000f0c <LCD_SetCursor+0x1e0>)
 8000dba:	899b      	ldrh	r3, [r3, #12]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fee3 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000dc2:	4b53      	ldr	r3, [pc, #332]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000dc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dc8:	611a      	str	r2, [r3, #16]
 8000dca:	4b51      	ldr	r3, [pc, #324]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000dcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dd0:	615a      	str	r2, [r3, #20]
 8000dd2:	88bb      	ldrh	r3, [r7, #4]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	4b4e      	ldr	r3, [pc, #312]	@ (8000f14 <LCD_SetCursor+0x1e8>)
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	4b4c      	ldr	r3, [pc, #304]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000dde:	2280      	movs	r2, #128	@ 0x80
 8000de0:	615a      	str	r2, [r3, #20]
 8000de2:	4b4b      	ldr	r3, [pc, #300]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000de4:	2280      	movs	r2, #128	@ 0x80
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	4b49      	ldr	r3, [pc, #292]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000dea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dee:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000df0:	4b47      	ldr	r3, [pc, #284]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000df2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	4b45      	ldr	r3, [pc, #276]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dfe:	615a      	str	r2, [r3, #20]
 8000e00:	88bb      	ldrh	r3, [r7, #4]
 8000e02:	4a44      	ldr	r2, [pc, #272]	@ (8000f14 <LCD_SetCursor+0x1e8>)
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	60d3      	str	r3, [r2, #12]
 8000e08:	4b41      	ldr	r3, [pc, #260]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000e0a:	2280      	movs	r2, #128	@ 0x80
 8000e0c:	615a      	str	r2, [r3, #20]
 8000e0e:	4b40      	ldr	r3, [pc, #256]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000e10:	2280      	movs	r2, #128	@ 0x80
 8000e12:	611a      	str	r2, [r3, #16]
 8000e14:	4b3e      	ldr	r3, [pc, #248]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000e16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e1a:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000e1c:	e248      	b.n	80012b0 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f0c <LCD_SetCursor+0x1e0>)
 8000e20:	889b      	ldrh	r3, [r3, #4]
 8000e22:	f646 0204 	movw	r2, #26628	@ 0x6804
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d176      	bne.n	8000f18 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000e2a:	4b38      	ldr	r3, [pc, #224]	@ (8000f0c <LCD_SetCursor+0x1e0>)
 8000e2c:	799b      	ldrb	r3, [r3, #6]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d106      	bne.n	8000e40 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000e32:	4b36      	ldr	r3, [pc, #216]	@ (8000f0c <LCD_SetCursor+0x1e0>)
 8000e34:	881a      	ldrh	r2, [r3, #0]
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000e40:	4b32      	ldr	r3, [pc, #200]	@ (8000f0c <LCD_SetCursor+0x1e0>)
 8000e42:	895b      	ldrh	r3, [r3, #10]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fe9f 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000e4a:	4b31      	ldr	r3, [pc, #196]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000e4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e50:	611a      	str	r2, [r3, #16]
 8000e52:	4b2f      	ldr	r3, [pc, #188]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000e54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e58:	615a      	str	r2, [r3, #20]
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	4b2c      	ldr	r3, [pc, #176]	@ (8000f14 <LCD_SetCursor+0x1e8>)
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	4b2a      	ldr	r3, [pc, #168]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000e66:	2280      	movs	r2, #128	@ 0x80
 8000e68:	615a      	str	r2, [r3, #20]
 8000e6a:	4b29      	ldr	r3, [pc, #164]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000e6c:	2280      	movs	r2, #128	@ 0x80
 8000e6e:	611a      	str	r2, [r3, #16]
 8000e70:	4b27      	ldr	r3, [pc, #156]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000e72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e76:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000e78:	4b25      	ldr	r3, [pc, #148]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000e7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	4b23      	ldr	r3, [pc, #140]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000e82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e86:	615a      	str	r2, [r3, #20]
 8000e88:	88fb      	ldrh	r3, [r7, #6]
 8000e8a:	4a22      	ldr	r2, [pc, #136]	@ (8000f14 <LCD_SetCursor+0x1e8>)
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	60d3      	str	r3, [r2, #12]
 8000e90:	4b1f      	ldr	r3, [pc, #124]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000e92:	2280      	movs	r2, #128	@ 0x80
 8000e94:	615a      	str	r2, [r3, #20]
 8000e96:	4b1e      	ldr	r3, [pc, #120]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000e98:	2280      	movs	r2, #128	@ 0x80
 8000e9a:	611a      	str	r2, [r3, #16]
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000e9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ea2:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000ea4:	4b19      	ldr	r3, [pc, #100]	@ (8000f0c <LCD_SetCursor+0x1e0>)
 8000ea6:	899b      	ldrh	r3, [r3, #12]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fe6d 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000eae:	4b18      	ldr	r3, [pc, #96]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000eb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000eb4:	611a      	str	r2, [r3, #16]
 8000eb6:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000eb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ebc:	615a      	str	r2, [r3, #20]
 8000ebe:	88bb      	ldrh	r3, [r7, #4]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <LCD_SetCursor+0x1e8>)
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000eca:	2280      	movs	r2, #128	@ 0x80
 8000ecc:	615a      	str	r2, [r3, #20]
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000ed0:	2280      	movs	r2, #128	@ 0x80
 8000ed2:	611a      	str	r2, [r3, #16]
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000ed6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eda:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000edc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000ede:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ee2:	611a      	str	r2, [r3, #16]
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000ee6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eea:	615a      	str	r2, [r3, #20]
 8000eec:	88bb      	ldrh	r3, [r7, #4]
 8000eee:	4a09      	ldr	r2, [pc, #36]	@ (8000f14 <LCD_SetCursor+0x1e8>)
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	60d3      	str	r3, [r2, #12]
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000ef6:	2280      	movs	r2, #128	@ 0x80
 8000ef8:	615a      	str	r2, [r3, #20]
 8000efa:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000efc:	2280      	movs	r2, #128	@ 0x80
 8000efe:	611a      	str	r2, [r3, #16]
 8000f00:	4b03      	ldr	r3, [pc, #12]	@ (8000f10 <LCD_SetCursor+0x1e4>)
 8000f02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f06:	611a      	str	r2, [r3, #16]
}
 8000f08:	e1d2      	b.n	80012b0 <LCD_SetCursor+0x584>
 8000f0a:	bf00      	nop
 8000f0c:	200000cc 	.word	0x200000cc
 8000f10:	40011000 	.word	0x40011000
 8000f14:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000f18:	4b99      	ldr	r3, [pc, #612]	@ (8001180 <LCD_SetCursor+0x454>)
 8000f1a:	889b      	ldrh	r3, [r3, #4]
 8000f1c:	f641 1263 	movw	r2, #6499	@ 0x1963
 8000f20:	4293      	cmp	r3, r2
 8000f22:	f040 8133 	bne.w	800118c <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000f26:	4b96      	ldr	r3, [pc, #600]	@ (8001180 <LCD_SetCursor+0x454>)
 8000f28:	799b      	ldrb	r3, [r3, #6]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d163      	bne.n	8000ff6 <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000f2e:	4b94      	ldr	r3, [pc, #592]	@ (8001180 <LCD_SetCursor+0x454>)
 8000f30:	881a      	ldrh	r2, [r3, #0]
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000f3c:	4b90      	ldr	r3, [pc, #576]	@ (8001180 <LCD_SetCursor+0x454>)
 8000f3e:	895b      	ldrh	r3, [r3, #10]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fe21 	bl	8000b88 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000f46:	4b8f      	ldr	r3, [pc, #572]	@ (8001184 <LCD_SetCursor+0x458>)
 8000f48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f4c:	611a      	str	r2, [r3, #16]
 8000f4e:	4b8d      	ldr	r3, [pc, #564]	@ (8001184 <LCD_SetCursor+0x458>)
 8000f50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f54:	615a      	str	r2, [r3, #20]
 8000f56:	4b8c      	ldr	r3, [pc, #560]	@ (8001188 <LCD_SetCursor+0x45c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	4b89      	ldr	r3, [pc, #548]	@ (8001184 <LCD_SetCursor+0x458>)
 8000f5e:	2280      	movs	r2, #128	@ 0x80
 8000f60:	615a      	str	r2, [r3, #20]
 8000f62:	4b88      	ldr	r3, [pc, #544]	@ (8001184 <LCD_SetCursor+0x458>)
 8000f64:	2280      	movs	r2, #128	@ 0x80
 8000f66:	611a      	str	r2, [r3, #16]
 8000f68:	4b86      	ldr	r3, [pc, #536]	@ (8001184 <LCD_SetCursor+0x458>)
 8000f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f6e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000f70:	4b84      	ldr	r3, [pc, #528]	@ (8001184 <LCD_SetCursor+0x458>)
 8000f72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f76:	611a      	str	r2, [r3, #16]
 8000f78:	4b82      	ldr	r3, [pc, #520]	@ (8001184 <LCD_SetCursor+0x458>)
 8000f7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f7e:	615a      	str	r2, [r3, #20]
 8000f80:	4b81      	ldr	r3, [pc, #516]	@ (8001188 <LCD_SetCursor+0x45c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	4b7f      	ldr	r3, [pc, #508]	@ (8001184 <LCD_SetCursor+0x458>)
 8000f88:	2280      	movs	r2, #128	@ 0x80
 8000f8a:	615a      	str	r2, [r3, #20]
 8000f8c:	4b7d      	ldr	r3, [pc, #500]	@ (8001184 <LCD_SetCursor+0x458>)
 8000f8e:	2280      	movs	r2, #128	@ 0x80
 8000f90:	611a      	str	r2, [r3, #16]
 8000f92:	4b7c      	ldr	r3, [pc, #496]	@ (8001184 <LCD_SetCursor+0x458>)
 8000f94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f98:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000f9a:	4b7a      	ldr	r3, [pc, #488]	@ (8001184 <LCD_SetCursor+0x458>)
 8000f9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fa0:	611a      	str	r2, [r3, #16]
 8000fa2:	4b78      	ldr	r3, [pc, #480]	@ (8001184 <LCD_SetCursor+0x458>)
 8000fa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fa8:	615a      	str	r2, [r3, #20]
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	0a1b      	lsrs	r3, r3, #8
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	4b75      	ldr	r3, [pc, #468]	@ (8001188 <LCD_SetCursor+0x45c>)
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	4b73      	ldr	r3, [pc, #460]	@ (8001184 <LCD_SetCursor+0x458>)
 8000fb6:	2280      	movs	r2, #128	@ 0x80
 8000fb8:	615a      	str	r2, [r3, #20]
 8000fba:	4b72      	ldr	r3, [pc, #456]	@ (8001184 <LCD_SetCursor+0x458>)
 8000fbc:	2280      	movs	r2, #128	@ 0x80
 8000fbe:	611a      	str	r2, [r3, #16]
 8000fc0:	4b70      	ldr	r3, [pc, #448]	@ (8001184 <LCD_SetCursor+0x458>)
 8000fc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fc6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000fc8:	4b6e      	ldr	r3, [pc, #440]	@ (8001184 <LCD_SetCursor+0x458>)
 8000fca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fce:	611a      	str	r2, [r3, #16]
 8000fd0:	4b6c      	ldr	r3, [pc, #432]	@ (8001184 <LCD_SetCursor+0x458>)
 8000fd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fd6:	615a      	str	r2, [r3, #20]
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	4a6b      	ldr	r2, [pc, #428]	@ (8001188 <LCD_SetCursor+0x45c>)
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	60d3      	str	r3, [r2, #12]
 8000fe0:	4b68      	ldr	r3, [pc, #416]	@ (8001184 <LCD_SetCursor+0x458>)
 8000fe2:	2280      	movs	r2, #128	@ 0x80
 8000fe4:	615a      	str	r2, [r3, #20]
 8000fe6:	4b67      	ldr	r3, [pc, #412]	@ (8001184 <LCD_SetCursor+0x458>)
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	611a      	str	r2, [r3, #16]
 8000fec:	4b65      	ldr	r3, [pc, #404]	@ (8001184 <LCD_SetCursor+0x458>)
 8000fee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ff2:	611a      	str	r2, [r3, #16]
 8000ff4:	e061      	b.n	80010ba <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000ff6:	4b62      	ldr	r3, [pc, #392]	@ (8001180 <LCD_SetCursor+0x454>)
 8000ff8:	895b      	ldrh	r3, [r3, #10]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fdc4 	bl	8000b88 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8001000:	4b60      	ldr	r3, [pc, #384]	@ (8001184 <LCD_SetCursor+0x458>)
 8001002:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001006:	611a      	str	r2, [r3, #16]
 8001008:	4b5e      	ldr	r3, [pc, #376]	@ (8001184 <LCD_SetCursor+0x458>)
 800100a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800100e:	615a      	str	r2, [r3, #20]
 8001010:	88fb      	ldrh	r3, [r7, #6]
 8001012:	0a1b      	lsrs	r3, r3, #8
 8001014:	b29a      	uxth	r2, r3
 8001016:	4b5c      	ldr	r3, [pc, #368]	@ (8001188 <LCD_SetCursor+0x45c>)
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	4b5a      	ldr	r3, [pc, #360]	@ (8001184 <LCD_SetCursor+0x458>)
 800101c:	2280      	movs	r2, #128	@ 0x80
 800101e:	615a      	str	r2, [r3, #20]
 8001020:	4b58      	ldr	r3, [pc, #352]	@ (8001184 <LCD_SetCursor+0x458>)
 8001022:	2280      	movs	r2, #128	@ 0x80
 8001024:	611a      	str	r2, [r3, #16]
 8001026:	4b57      	ldr	r3, [pc, #348]	@ (8001184 <LCD_SetCursor+0x458>)
 8001028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800102c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 800102e:	4b55      	ldr	r3, [pc, #340]	@ (8001184 <LCD_SetCursor+0x458>)
 8001030:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001034:	611a      	str	r2, [r3, #16]
 8001036:	4b53      	ldr	r3, [pc, #332]	@ (8001184 <LCD_SetCursor+0x458>)
 8001038:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800103c:	615a      	str	r2, [r3, #20]
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	4a51      	ldr	r2, [pc, #324]	@ (8001188 <LCD_SetCursor+0x45c>)
 8001042:	b2db      	uxtb	r3, r3
 8001044:	60d3      	str	r3, [r2, #12]
 8001046:	4b4f      	ldr	r3, [pc, #316]	@ (8001184 <LCD_SetCursor+0x458>)
 8001048:	2280      	movs	r2, #128	@ 0x80
 800104a:	615a      	str	r2, [r3, #20]
 800104c:	4b4d      	ldr	r3, [pc, #308]	@ (8001184 <LCD_SetCursor+0x458>)
 800104e:	2280      	movs	r2, #128	@ 0x80
 8001050:	611a      	str	r2, [r3, #16]
 8001052:	4b4c      	ldr	r3, [pc, #304]	@ (8001184 <LCD_SetCursor+0x458>)
 8001054:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001058:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800105a:	4b4a      	ldr	r3, [pc, #296]	@ (8001184 <LCD_SetCursor+0x458>)
 800105c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001060:	611a      	str	r2, [r3, #16]
 8001062:	4b48      	ldr	r3, [pc, #288]	@ (8001184 <LCD_SetCursor+0x458>)
 8001064:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001068:	615a      	str	r2, [r3, #20]
 800106a:	4b45      	ldr	r3, [pc, #276]	@ (8001180 <LCD_SetCursor+0x454>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	3b01      	subs	r3, #1
 8001070:	121a      	asrs	r2, r3, #8
 8001072:	4b45      	ldr	r3, [pc, #276]	@ (8001188 <LCD_SetCursor+0x45c>)
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	4b43      	ldr	r3, [pc, #268]	@ (8001184 <LCD_SetCursor+0x458>)
 8001078:	2280      	movs	r2, #128	@ 0x80
 800107a:	615a      	str	r2, [r3, #20]
 800107c:	4b41      	ldr	r3, [pc, #260]	@ (8001184 <LCD_SetCursor+0x458>)
 800107e:	2280      	movs	r2, #128	@ 0x80
 8001080:	611a      	str	r2, [r3, #16]
 8001082:	4b40      	ldr	r3, [pc, #256]	@ (8001184 <LCD_SetCursor+0x458>)
 8001084:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001088:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800108a:	4b3e      	ldr	r3, [pc, #248]	@ (8001184 <LCD_SetCursor+0x458>)
 800108c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001090:	611a      	str	r2, [r3, #16]
 8001092:	4b3c      	ldr	r3, [pc, #240]	@ (8001184 <LCD_SetCursor+0x458>)
 8001094:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001098:	615a      	str	r2, [r3, #20]
 800109a:	4b39      	ldr	r3, [pc, #228]	@ (8001180 <LCD_SetCursor+0x454>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	3b01      	subs	r3, #1
 80010a0:	4a39      	ldr	r2, [pc, #228]	@ (8001188 <LCD_SetCursor+0x45c>)
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	60d3      	str	r3, [r2, #12]
 80010a6:	4b37      	ldr	r3, [pc, #220]	@ (8001184 <LCD_SetCursor+0x458>)
 80010a8:	2280      	movs	r2, #128	@ 0x80
 80010aa:	615a      	str	r2, [r3, #20]
 80010ac:	4b35      	ldr	r3, [pc, #212]	@ (8001184 <LCD_SetCursor+0x458>)
 80010ae:	2280      	movs	r2, #128	@ 0x80
 80010b0:	611a      	str	r2, [r3, #16]
 80010b2:	4b34      	ldr	r3, [pc, #208]	@ (8001184 <LCD_SetCursor+0x458>)
 80010b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010b8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80010ba:	4b31      	ldr	r3, [pc, #196]	@ (8001180 <LCD_SetCursor+0x454>)
 80010bc:	899b      	ldrh	r3, [r3, #12]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fd62 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80010c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001184 <LCD_SetCursor+0x458>)
 80010c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010ca:	611a      	str	r2, [r3, #16]
 80010cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001184 <LCD_SetCursor+0x458>)
 80010ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010d2:	615a      	str	r2, [r3, #20]
 80010d4:	88bb      	ldrh	r3, [r7, #4]
 80010d6:	0a1b      	lsrs	r3, r3, #8
 80010d8:	b29a      	uxth	r2, r3
 80010da:	4b2b      	ldr	r3, [pc, #172]	@ (8001188 <LCD_SetCursor+0x45c>)
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	4b29      	ldr	r3, [pc, #164]	@ (8001184 <LCD_SetCursor+0x458>)
 80010e0:	2280      	movs	r2, #128	@ 0x80
 80010e2:	615a      	str	r2, [r3, #20]
 80010e4:	4b27      	ldr	r3, [pc, #156]	@ (8001184 <LCD_SetCursor+0x458>)
 80010e6:	2280      	movs	r2, #128	@ 0x80
 80010e8:	611a      	str	r2, [r3, #16]
 80010ea:	4b26      	ldr	r3, [pc, #152]	@ (8001184 <LCD_SetCursor+0x458>)
 80010ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010f0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 80010f2:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <LCD_SetCursor+0x458>)
 80010f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010f8:	611a      	str	r2, [r3, #16]
 80010fa:	4b22      	ldr	r3, [pc, #136]	@ (8001184 <LCD_SetCursor+0x458>)
 80010fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001100:	615a      	str	r2, [r3, #20]
 8001102:	88bb      	ldrh	r3, [r7, #4]
 8001104:	4a20      	ldr	r2, [pc, #128]	@ (8001188 <LCD_SetCursor+0x45c>)
 8001106:	b2db      	uxtb	r3, r3
 8001108:	60d3      	str	r3, [r2, #12]
 800110a:	4b1e      	ldr	r3, [pc, #120]	@ (8001184 <LCD_SetCursor+0x458>)
 800110c:	2280      	movs	r2, #128	@ 0x80
 800110e:	615a      	str	r2, [r3, #20]
 8001110:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <LCD_SetCursor+0x458>)
 8001112:	2280      	movs	r2, #128	@ 0x80
 8001114:	611a      	str	r2, [r3, #16]
 8001116:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <LCD_SetCursor+0x458>)
 8001118:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800111c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 800111e:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <LCD_SetCursor+0x458>)
 8001120:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001124:	611a      	str	r2, [r3, #16]
 8001126:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <LCD_SetCursor+0x458>)
 8001128:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800112c:	615a      	str	r2, [r3, #20]
 800112e:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <LCD_SetCursor+0x454>)
 8001130:	885b      	ldrh	r3, [r3, #2]
 8001132:	3b01      	subs	r3, #1
 8001134:	121a      	asrs	r2, r3, #8
 8001136:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <LCD_SetCursor+0x45c>)
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <LCD_SetCursor+0x458>)
 800113c:	2280      	movs	r2, #128	@ 0x80
 800113e:	615a      	str	r2, [r3, #20]
 8001140:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <LCD_SetCursor+0x458>)
 8001142:	2280      	movs	r2, #128	@ 0x80
 8001144:	611a      	str	r2, [r3, #16]
 8001146:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <LCD_SetCursor+0x458>)
 8001148:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800114c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800114e:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <LCD_SetCursor+0x458>)
 8001150:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001154:	611a      	str	r2, [r3, #16]
 8001156:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <LCD_SetCursor+0x458>)
 8001158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800115c:	615a      	str	r2, [r3, #20]
 800115e:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <LCD_SetCursor+0x454>)
 8001160:	885b      	ldrh	r3, [r3, #2]
 8001162:	3b01      	subs	r3, #1
 8001164:	4a08      	ldr	r2, [pc, #32]	@ (8001188 <LCD_SetCursor+0x45c>)
 8001166:	b2db      	uxtb	r3, r3
 8001168:	60d3      	str	r3, [r2, #12]
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <LCD_SetCursor+0x458>)
 800116c:	2280      	movs	r2, #128	@ 0x80
 800116e:	615a      	str	r2, [r3, #20]
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <LCD_SetCursor+0x458>)
 8001172:	2280      	movs	r2, #128	@ 0x80
 8001174:	611a      	str	r2, [r3, #16]
 8001176:	4b03      	ldr	r3, [pc, #12]	@ (8001184 <LCD_SetCursor+0x458>)
 8001178:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800117c:	611a      	str	r2, [r3, #16]
}
 800117e:	e097      	b.n	80012b0 <LCD_SetCursor+0x584>
 8001180:	200000cc 	.word	0x200000cc
 8001184:	40011000 	.word	0x40011000
 8001188:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 800118c:	4b4a      	ldr	r3, [pc, #296]	@ (80012b8 <LCD_SetCursor+0x58c>)
 800118e:	889b      	ldrh	r3, [r3, #4]
 8001190:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001194:	4293      	cmp	r3, r2
 8001196:	d172      	bne.n	800127e <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8001198:	4b47      	ldr	r3, [pc, #284]	@ (80012b8 <LCD_SetCursor+0x58c>)
 800119a:	895b      	ldrh	r3, [r3, #10]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fcf3 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 80011a2:	4b46      	ldr	r3, [pc, #280]	@ (80012bc <LCD_SetCursor+0x590>)
 80011a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011a8:	611a      	str	r2, [r3, #16]
 80011aa:	4b44      	ldr	r3, [pc, #272]	@ (80012bc <LCD_SetCursor+0x590>)
 80011ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011b0:	615a      	str	r2, [r3, #20]
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b41      	ldr	r3, [pc, #260]	@ (80012c0 <LCD_SetCursor+0x594>)
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	4b3f      	ldr	r3, [pc, #252]	@ (80012bc <LCD_SetCursor+0x590>)
 80011be:	2280      	movs	r2, #128	@ 0x80
 80011c0:	615a      	str	r2, [r3, #20]
 80011c2:	4b3e      	ldr	r3, [pc, #248]	@ (80012bc <LCD_SetCursor+0x590>)
 80011c4:	2280      	movs	r2, #128	@ 0x80
 80011c6:	611a      	str	r2, [r3, #16]
 80011c8:	4b3c      	ldr	r3, [pc, #240]	@ (80012bc <LCD_SetCursor+0x590>)
 80011ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011ce:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 80011d0:	4b39      	ldr	r3, [pc, #228]	@ (80012b8 <LCD_SetCursor+0x58c>)
 80011d2:	895b      	ldrh	r3, [r3, #10]
 80011d4:	3301      	adds	r3, #1
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fcd5 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 80011de:	4b37      	ldr	r3, [pc, #220]	@ (80012bc <LCD_SetCursor+0x590>)
 80011e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011e4:	611a      	str	r2, [r3, #16]
 80011e6:	4b35      	ldr	r3, [pc, #212]	@ (80012bc <LCD_SetCursor+0x590>)
 80011e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011ec:	615a      	str	r2, [r3, #20]
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	4a33      	ldr	r2, [pc, #204]	@ (80012c0 <LCD_SetCursor+0x594>)
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	60d3      	str	r3, [r2, #12]
 80011f6:	4b31      	ldr	r3, [pc, #196]	@ (80012bc <LCD_SetCursor+0x590>)
 80011f8:	2280      	movs	r2, #128	@ 0x80
 80011fa:	615a      	str	r2, [r3, #20]
 80011fc:	4b2f      	ldr	r3, [pc, #188]	@ (80012bc <LCD_SetCursor+0x590>)
 80011fe:	2280      	movs	r2, #128	@ 0x80
 8001200:	611a      	str	r2, [r3, #16]
 8001202:	4b2e      	ldr	r3, [pc, #184]	@ (80012bc <LCD_SetCursor+0x590>)
 8001204:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001208:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800120a:	4b2b      	ldr	r3, [pc, #172]	@ (80012b8 <LCD_SetCursor+0x58c>)
 800120c:	899b      	ldrh	r3, [r3, #12]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fcba 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8001214:	4b29      	ldr	r3, [pc, #164]	@ (80012bc <LCD_SetCursor+0x590>)
 8001216:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800121a:	611a      	str	r2, [r3, #16]
 800121c:	4b27      	ldr	r3, [pc, #156]	@ (80012bc <LCD_SetCursor+0x590>)
 800121e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001222:	615a      	str	r2, [r3, #20]
 8001224:	88bb      	ldrh	r3, [r7, #4]
 8001226:	0a1b      	lsrs	r3, r3, #8
 8001228:	b29a      	uxth	r2, r3
 800122a:	4b25      	ldr	r3, [pc, #148]	@ (80012c0 <LCD_SetCursor+0x594>)
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	4b23      	ldr	r3, [pc, #140]	@ (80012bc <LCD_SetCursor+0x590>)
 8001230:	2280      	movs	r2, #128	@ 0x80
 8001232:	615a      	str	r2, [r3, #20]
 8001234:	4b21      	ldr	r3, [pc, #132]	@ (80012bc <LCD_SetCursor+0x590>)
 8001236:	2280      	movs	r2, #128	@ 0x80
 8001238:	611a      	str	r2, [r3, #16]
 800123a:	4b20      	ldr	r3, [pc, #128]	@ (80012bc <LCD_SetCursor+0x590>)
 800123c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001240:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001242:	4b1d      	ldr	r3, [pc, #116]	@ (80012b8 <LCD_SetCursor+0x58c>)
 8001244:	899b      	ldrh	r3, [r3, #12]
 8001246:	3301      	adds	r3, #1
 8001248:	b29b      	uxth	r3, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fc9c 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8001250:	4b1a      	ldr	r3, [pc, #104]	@ (80012bc <LCD_SetCursor+0x590>)
 8001252:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001256:	611a      	str	r2, [r3, #16]
 8001258:	4b18      	ldr	r3, [pc, #96]	@ (80012bc <LCD_SetCursor+0x590>)
 800125a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800125e:	615a      	str	r2, [r3, #20]
 8001260:	88bb      	ldrh	r3, [r7, #4]
 8001262:	4a17      	ldr	r2, [pc, #92]	@ (80012c0 <LCD_SetCursor+0x594>)
 8001264:	b2db      	uxtb	r3, r3
 8001266:	60d3      	str	r3, [r2, #12]
 8001268:	4b14      	ldr	r3, [pc, #80]	@ (80012bc <LCD_SetCursor+0x590>)
 800126a:	2280      	movs	r2, #128	@ 0x80
 800126c:	615a      	str	r2, [r3, #20]
 800126e:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <LCD_SetCursor+0x590>)
 8001270:	2280      	movs	r2, #128	@ 0x80
 8001272:	611a      	str	r2, [r3, #16]
 8001274:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <LCD_SetCursor+0x590>)
 8001276:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800127a:	611a      	str	r2, [r3, #16]
}
 800127c:	e018      	b.n	80012b0 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 800127e:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <LCD_SetCursor+0x58c>)
 8001280:	799b      	ldrb	r3, [r3, #6]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d106      	bne.n	8001294 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 8001286:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <LCD_SetCursor+0x58c>)
 8001288:	881a      	ldrh	r2, [r3, #0]
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	b29b      	uxth	r3, r3
 8001290:	3b01      	subs	r3, #1
 8001292:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8001294:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <LCD_SetCursor+0x58c>)
 8001296:	895b      	ldrh	r3, [r3, #10]
 8001298:	88fa      	ldrh	r2, [r7, #6]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fcff 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 80012a2:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <LCD_SetCursor+0x58c>)
 80012a4:	899b      	ldrh	r3, [r3, #12]
 80012a6:	88ba      	ldrh	r2, [r7, #4]
 80012a8:	4611      	mov	r1, r2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fcf8 	bl	8000ca0 <LCD_WriteReg>
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200000cc 	.word	0x200000cc
 80012bc:	40011000 	.word	0x40011000
 80012c0:	40010c00 	.word	0x40010c00

080012c4 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 80012d6:	4b78      	ldr	r3, [pc, #480]	@ (80014b8 <LCD_Scan_Dir+0x1f4>)
 80012d8:	799b      	ldrb	r3, [r3, #6]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d10b      	bne.n	80012f6 <LCD_Scan_Dir+0x32>
 80012de:	4b76      	ldr	r3, [pc, #472]	@ (80014b8 <LCD_Scan_Dir+0x1f4>)
 80012e0:	889b      	ldrh	r3, [r3, #4]
 80012e2:	f646 0204 	movw	r2, #26628	@ 0x6804
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d005      	beq.n	80012f6 <LCD_Scan_Dir+0x32>
 80012ea:	4b73      	ldr	r3, [pc, #460]	@ (80014b8 <LCD_Scan_Dir+0x1f4>)
 80012ec:	889b      	ldrh	r3, [r3, #4]
 80012ee:	f641 1263 	movw	r2, #6499	@ 0x1963
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d109      	bne.n	800130a <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 80012f6:	4b70      	ldr	r3, [pc, #448]	@ (80014b8 <LCD_Scan_Dir+0x1f4>)
 80012f8:	799b      	ldrb	r3, [r3, #6]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d134      	bne.n	8001368 <LCD_Scan_Dir+0xa4>
 80012fe:	4b6e      	ldr	r3, [pc, #440]	@ (80014b8 <LCD_Scan_Dir+0x1f4>)
 8001300:	889b      	ldrh	r3, [r3, #4]
 8001302:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001306:	4293      	cmp	r3, r2
 8001308:	d12e      	bne.n	8001368 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	2b07      	cmp	r3, #7
 800130e:	d82b      	bhi.n	8001368 <LCD_Scan_Dir+0xa4>
 8001310:	a201      	add	r2, pc, #4	@ (adr r2, 8001318 <LCD_Scan_Dir+0x54>)
 8001312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001316:	bf00      	nop
 8001318:	08001339 	.word	0x08001339
 800131c:	0800133f 	.word	0x0800133f
 8001320:	08001345 	.word	0x08001345
 8001324:	0800134b 	.word	0x0800134b
 8001328:	08001351 	.word	0x08001351
 800132c:	08001357 	.word	0x08001357
 8001330:	0800135d 	.word	0x0800135d
 8001334:	08001363 	.word	0x08001363
		{
		case 0:
			dir = 6;
 8001338:	2306      	movs	r3, #6
 800133a:	71fb      	strb	r3, [r7, #7]
			break;
 800133c:	e014      	b.n	8001368 <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 800133e:	2307      	movs	r3, #7
 8001340:	71fb      	strb	r3, [r7, #7]
			break;
 8001342:	e011      	b.n	8001368 <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 8001344:	2304      	movs	r3, #4
 8001346:	71fb      	strb	r3, [r7, #7]
			break;
 8001348:	e00e      	b.n	8001368 <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 800134a:	2305      	movs	r3, #5
 800134c:	71fb      	strb	r3, [r7, #7]
			break;
 800134e:	e00b      	b.n	8001368 <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 8001350:	2301      	movs	r3, #1
 8001352:	71fb      	strb	r3, [r7, #7]
			break;
 8001354:	e008      	b.n	8001368 <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	71fb      	strb	r3, [r7, #7]
			break;
 800135a:	e005      	b.n	8001368 <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 800135c:	2303      	movs	r3, #3
 800135e:	71fb      	strb	r3, [r7, #7]
			break;
 8001360:	e002      	b.n	8001368 <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 8001362:	2302      	movs	r3, #2
 8001364:	71fb      	strb	r3, [r7, #7]
			break;
 8001366:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 8001368:	4b53      	ldr	r3, [pc, #332]	@ (80014b8 <LCD_Scan_Dir+0x1f4>)
 800136a:	889b      	ldrh	r3, [r3, #4]
 800136c:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001370:	4293      	cmp	r3, r2
 8001372:	d018      	beq.n	80013a6 <LCD_Scan_Dir+0xe2>
 8001374:	4b50      	ldr	r3, [pc, #320]	@ (80014b8 <LCD_Scan_Dir+0x1f4>)
 8001376:	889b      	ldrh	r3, [r3, #4]
 8001378:	f646 0204 	movw	r2, #26628	@ 0x6804
 800137c:	4293      	cmp	r3, r2
 800137e:	d012      	beq.n	80013a6 <LCD_Scan_Dir+0xe2>
 8001380:	4b4d      	ldr	r3, [pc, #308]	@ (80014b8 <LCD_Scan_Dir+0x1f4>)
 8001382:	889b      	ldrh	r3, [r3, #4]
 8001384:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001388:	4293      	cmp	r3, r2
 800138a:	d00c      	beq.n	80013a6 <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 800138c:	4b4a      	ldr	r3, [pc, #296]	@ (80014b8 <LCD_Scan_Dir+0x1f4>)
 800138e:	889b      	ldrh	r3, [r3, #4]
 8001390:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001394:	4293      	cmp	r3, r2
 8001396:	d006      	beq.n	80013a6 <LCD_Scan_Dir+0xe2>
 8001398:	4b47      	ldr	r3, [pc, #284]	@ (80014b8 <LCD_Scan_Dir+0x1f4>)
 800139a:	889b      	ldrh	r3, [r3, #4]
 800139c:	f641 1263 	movw	r2, #6499	@ 0x1963
 80013a0:	4293      	cmp	r3, r2
 80013a2:	f040 8250 	bne.w	8001846 <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	2b07      	cmp	r3, #7
 80013aa:	d836      	bhi.n	800141a <LCD_Scan_Dir+0x156>
 80013ac:	a201      	add	r2, pc, #4	@ (adr r2, 80013b4 <LCD_Scan_Dir+0xf0>)
 80013ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b2:	bf00      	nop
 80013b4:	0800141b 	.word	0x0800141b
 80013b8:	080013d5 	.word	0x080013d5
 80013bc:	080013df 	.word	0x080013df
 80013c0:	080013e9 	.word	0x080013e9
 80013c4:	080013f3 	.word	0x080013f3
 80013c8:	080013fd 	.word	0x080013fd
 80013cc:	08001407 	.word	0x08001407
 80013d0:	08001411 	.word	0x08001411
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80013d4:	89fb      	ldrh	r3, [r7, #14]
 80013d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013da:	81fb      	strh	r3, [r7, #14]
			break;
 80013dc:	e01d      	b.n	800141a <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80013de:	89fb      	ldrh	r3, [r7, #14]
 80013e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013e4:	81fb      	strh	r3, [r7, #14]
			break;
 80013e6:	e018      	b.n	800141a <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 80013e8:	89fb      	ldrh	r3, [r7, #14]
 80013ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80013ee:	81fb      	strh	r3, [r7, #14]
			break;
 80013f0:	e013      	b.n	800141a <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	f043 0320 	orr.w	r3, r3, #32
 80013f8:	81fb      	strh	r3, [r7, #14]
			break;
 80013fa:	e00e      	b.n	800141a <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 80013fc:	89fb      	ldrh	r3, [r7, #14]
 80013fe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001402:	81fb      	strh	r3, [r7, #14]
			break;
 8001404:	e009      	b.n	800141a <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8001406:	89fb      	ldrh	r3, [r7, #14]
 8001408:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800140c:	81fb      	strh	r3, [r7, #14]
			break;
 800140e:	e004      	b.n	800141a <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001410:	89fb      	ldrh	r3, [r7, #14]
 8001412:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8001416:	81fb      	strh	r3, [r7, #14]
			break;
 8001418:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 800141a:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <LCD_Scan_Dir+0x1f4>)
 800141c:	889b      	ldrh	r3, [r3, #4]
 800141e:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001422:	4293      	cmp	r3, r2
 8001424:	d103      	bne.n	800142e <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 8001426:	f44f 5358 	mov.w	r3, #13824	@ 0x3600
 800142a:	81bb      	strh	r3, [r7, #12]
 800142c:	e001      	b.n	8001432 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 800142e:	2336      	movs	r3, #54	@ 0x36
 8001430:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 8001432:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <LCD_Scan_Dir+0x1f4>)
 8001434:	889b      	ldrh	r3, [r3, #4]
 8001436:	f245 3210 	movw	r2, #21264	@ 0x5310
 800143a:	4293      	cmp	r3, r2
 800143c:	d00f      	beq.n	800145e <LCD_Scan_Dir+0x19a>
 800143e:	4b1e      	ldr	r3, [pc, #120]	@ (80014b8 <LCD_Scan_Dir+0x1f4>)
 8001440:	889b      	ldrh	r3, [r3, #4]
 8001442:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001446:	4293      	cmp	r3, r2
 8001448:	d009      	beq.n	800145e <LCD_Scan_Dir+0x19a>
 800144a:	4b1b      	ldr	r3, [pc, #108]	@ (80014b8 <LCD_Scan_Dir+0x1f4>)
 800144c:	889b      	ldrh	r3, [r3, #4]
 800144e:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001452:	4293      	cmp	r3, r2
 8001454:	d003      	beq.n	800145e <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 8001456:	89fb      	ldrh	r3, [r7, #14]
 8001458:	f043 0308 	orr.w	r3, r3, #8
 800145c:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 800145e:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <LCD_Scan_Dir+0x1f4>)
 8001460:	889b      	ldrh	r3, [r3, #4]
 8001462:	f646 0204 	movw	r2, #26628	@ 0x6804
 8001466:	4293      	cmp	r3, r2
 8001468:	d103      	bne.n	8001472 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 800146a:	89fb      	ldrh	r3, [r7, #14]
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001472:	89fa      	ldrh	r2, [r7, #14]
 8001474:	89bb      	ldrh	r3, [r7, #12]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fc11 	bl	8000ca0 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <LCD_Scan_Dir+0x1f4>)
 8001480:	889b      	ldrh	r3, [r3, #4]
 8001482:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001486:	4293      	cmp	r3, r2
 8001488:	d028      	beq.n	80014dc <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 800148a:	89fb      	ldrh	r3, [r7, #14]
 800148c:	f003 0320 	and.w	r3, r3, #32
 8001490:	2b00      	cmp	r3, #0
 8001492:	d013      	beq.n	80014bc <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8001494:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <LCD_Scan_Dir+0x1f4>)
 8001496:	881a      	ldrh	r2, [r3, #0]
 8001498:	4b07      	ldr	r3, [pc, #28]	@ (80014b8 <LCD_Scan_Dir+0x1f4>)
 800149a:	885b      	ldrh	r3, [r3, #2]
 800149c:	429a      	cmp	r2, r3
 800149e:	d21d      	bcs.n	80014dc <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80014a0:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <LCD_Scan_Dir+0x1f4>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80014a6:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <LCD_Scan_Dir+0x1f4>)
 80014a8:	885a      	ldrh	r2, [r3, #2]
 80014aa:	4b03      	ldr	r3, [pc, #12]	@ (80014b8 <LCD_Scan_Dir+0x1f4>)
 80014ac:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80014ae:	4a02      	ldr	r2, [pc, #8]	@ (80014b8 <LCD_Scan_Dir+0x1f4>)
 80014b0:	897b      	ldrh	r3, [r7, #10]
 80014b2:	8053      	strh	r3, [r2, #2]
 80014b4:	e012      	b.n	80014dc <LCD_Scan_Dir+0x218>
 80014b6:	bf00      	nop
 80014b8:	200000cc 	.word	0x200000cc
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 80014bc:	4b7f      	ldr	r3, [pc, #508]	@ (80016bc <LCD_Scan_Dir+0x3f8>)
 80014be:	881a      	ldrh	r2, [r3, #0]
 80014c0:	4b7e      	ldr	r3, [pc, #504]	@ (80016bc <LCD_Scan_Dir+0x3f8>)
 80014c2:	885b      	ldrh	r3, [r3, #2]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d909      	bls.n	80014dc <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80014c8:	4b7c      	ldr	r3, [pc, #496]	@ (80016bc <LCD_Scan_Dir+0x3f8>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80014ce:	4b7b      	ldr	r3, [pc, #492]	@ (80016bc <LCD_Scan_Dir+0x3f8>)
 80014d0:	885a      	ldrh	r2, [r3, #2]
 80014d2:	4b7a      	ldr	r3, [pc, #488]	@ (80016bc <LCD_Scan_Dir+0x3f8>)
 80014d4:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80014d6:	4a79      	ldr	r2, [pc, #484]	@ (80016bc <LCD_Scan_Dir+0x3f8>)
 80014d8:	897b      	ldrh	r3, [r7, #10]
 80014da:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 80014dc:	4b77      	ldr	r3, [pc, #476]	@ (80016bc <LCD_Scan_Dir+0x3f8>)
 80014de:	889b      	ldrh	r3, [r3, #4]
 80014e0:	f245 5210 	movw	r2, #21776	@ 0x5510
 80014e4:	4293      	cmp	r3, r2
 80014e6:	f040 80ef 	bne.w	80016c8 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 80014ea:	4b74      	ldr	r3, [pc, #464]	@ (80016bc <LCD_Scan_Dir+0x3f8>)
 80014ec:	895b      	ldrh	r3, [r3, #10]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fb4a 	bl	8000b88 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80014f4:	4b72      	ldr	r3, [pc, #456]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 80014f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014fa:	611a      	str	r2, [r3, #16]
 80014fc:	4b70      	ldr	r3, [pc, #448]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 80014fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001502:	615a      	str	r2, [r3, #20]
 8001504:	4b6f      	ldr	r3, [pc, #444]	@ (80016c4 <LCD_Scan_Dir+0x400>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	4b6d      	ldr	r3, [pc, #436]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 800150c:	2280      	movs	r2, #128	@ 0x80
 800150e:	615a      	str	r2, [r3, #20]
 8001510:	4b6b      	ldr	r3, [pc, #428]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 8001512:	2280      	movs	r2, #128	@ 0x80
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	4b6a      	ldr	r3, [pc, #424]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 8001518:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800151c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 800151e:	4b67      	ldr	r3, [pc, #412]	@ (80016bc <LCD_Scan_Dir+0x3f8>)
 8001520:	895b      	ldrh	r3, [r3, #10]
 8001522:	3301      	adds	r3, #1
 8001524:	b29b      	uxth	r3, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fb2e 	bl	8000b88 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800152c:	4b64      	ldr	r3, [pc, #400]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 800152e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001532:	611a      	str	r2, [r3, #16]
 8001534:	4b62      	ldr	r3, [pc, #392]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 8001536:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800153a:	615a      	str	r2, [r3, #20]
 800153c:	4b61      	ldr	r3, [pc, #388]	@ (80016c4 <LCD_Scan_Dir+0x400>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	4b5f      	ldr	r3, [pc, #380]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 8001544:	2280      	movs	r2, #128	@ 0x80
 8001546:	615a      	str	r2, [r3, #20]
 8001548:	4b5d      	ldr	r3, [pc, #372]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 800154a:	2280      	movs	r2, #128	@ 0x80
 800154c:	611a      	str	r2, [r3, #16]
 800154e:	4b5c      	ldr	r3, [pc, #368]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 8001550:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001554:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 8001556:	4b59      	ldr	r3, [pc, #356]	@ (80016bc <LCD_Scan_Dir+0x3f8>)
 8001558:	895b      	ldrh	r3, [r3, #10]
 800155a:	3302      	adds	r3, #2
 800155c:	b29b      	uxth	r3, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fb12 	bl	8000b88 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001564:	4b56      	ldr	r3, [pc, #344]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 8001566:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800156a:	611a      	str	r2, [r3, #16]
 800156c:	4b54      	ldr	r3, [pc, #336]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 800156e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001572:	615a      	str	r2, [r3, #20]
 8001574:	4b51      	ldr	r3, [pc, #324]	@ (80016bc <LCD_Scan_Dir+0x3f8>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	3b01      	subs	r3, #1
 800157a:	121a      	asrs	r2, r3, #8
 800157c:	4b51      	ldr	r3, [pc, #324]	@ (80016c4 <LCD_Scan_Dir+0x400>)
 800157e:	60da      	str	r2, [r3, #12]
 8001580:	4b4f      	ldr	r3, [pc, #316]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 8001582:	2280      	movs	r2, #128	@ 0x80
 8001584:	615a      	str	r2, [r3, #20]
 8001586:	4b4e      	ldr	r3, [pc, #312]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 8001588:	2280      	movs	r2, #128	@ 0x80
 800158a:	611a      	str	r2, [r3, #16]
 800158c:	4b4c      	ldr	r3, [pc, #304]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 800158e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001592:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8001594:	4b49      	ldr	r3, [pc, #292]	@ (80016bc <LCD_Scan_Dir+0x3f8>)
 8001596:	895b      	ldrh	r3, [r3, #10]
 8001598:	3303      	adds	r3, #3
 800159a:	b29b      	uxth	r3, r3
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff faf3 	bl	8000b88 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80015a2:	4b47      	ldr	r3, [pc, #284]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 80015a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015a8:	611a      	str	r2, [r3, #16]
 80015aa:	4b45      	ldr	r3, [pc, #276]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 80015ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015b0:	615a      	str	r2, [r3, #20]
 80015b2:	4b42      	ldr	r3, [pc, #264]	@ (80016bc <LCD_Scan_Dir+0x3f8>)
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	4a42      	ldr	r2, [pc, #264]	@ (80016c4 <LCD_Scan_Dir+0x400>)
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	60d3      	str	r3, [r2, #12]
 80015be:	4b40      	ldr	r3, [pc, #256]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 80015c0:	2280      	movs	r2, #128	@ 0x80
 80015c2:	615a      	str	r2, [r3, #20]
 80015c4:	4b3e      	ldr	r3, [pc, #248]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 80015c6:	2280      	movs	r2, #128	@ 0x80
 80015c8:	611a      	str	r2, [r3, #16]
 80015ca:	4b3d      	ldr	r3, [pc, #244]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 80015cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015d0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80015d2:	4b3a      	ldr	r3, [pc, #232]	@ (80016bc <LCD_Scan_Dir+0x3f8>)
 80015d4:	899b      	ldrh	r3, [r3, #12]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fad6 	bl	8000b88 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80015dc:	4b38      	ldr	r3, [pc, #224]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 80015de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015e2:	611a      	str	r2, [r3, #16]
 80015e4:	4b36      	ldr	r3, [pc, #216]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 80015e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ea:	615a      	str	r2, [r3, #20]
 80015ec:	4b35      	ldr	r3, [pc, #212]	@ (80016c4 <LCD_Scan_Dir+0x400>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	4b33      	ldr	r3, [pc, #204]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 80015f4:	2280      	movs	r2, #128	@ 0x80
 80015f6:	615a      	str	r2, [r3, #20]
 80015f8:	4b31      	ldr	r3, [pc, #196]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 80015fa:	2280      	movs	r2, #128	@ 0x80
 80015fc:	611a      	str	r2, [r3, #16]
 80015fe:	4b30      	ldr	r3, [pc, #192]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 8001600:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001604:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 8001606:	4b2d      	ldr	r3, [pc, #180]	@ (80016bc <LCD_Scan_Dir+0x3f8>)
 8001608:	899b      	ldrh	r3, [r3, #12]
 800160a:	3301      	adds	r3, #1
 800160c:	b29b      	uxth	r3, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff faba 	bl	8000b88 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001614:	4b2a      	ldr	r3, [pc, #168]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 8001616:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800161a:	611a      	str	r2, [r3, #16]
 800161c:	4b28      	ldr	r3, [pc, #160]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 800161e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001622:	615a      	str	r2, [r3, #20]
 8001624:	4b27      	ldr	r3, [pc, #156]	@ (80016c4 <LCD_Scan_Dir+0x400>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	4b25      	ldr	r3, [pc, #148]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 800162c:	2280      	movs	r2, #128	@ 0x80
 800162e:	615a      	str	r2, [r3, #20]
 8001630:	4b23      	ldr	r3, [pc, #140]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 8001632:	2280      	movs	r2, #128	@ 0x80
 8001634:	611a      	str	r2, [r3, #16]
 8001636:	4b22      	ldr	r3, [pc, #136]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 8001638:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800163c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 800163e:	4b1f      	ldr	r3, [pc, #124]	@ (80016bc <LCD_Scan_Dir+0x3f8>)
 8001640:	899b      	ldrh	r3, [r3, #12]
 8001642:	3302      	adds	r3, #2
 8001644:	b29b      	uxth	r3, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fa9e 	bl	8000b88 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 800164c:	4b1c      	ldr	r3, [pc, #112]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 800164e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001652:	611a      	str	r2, [r3, #16]
 8001654:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 8001656:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800165a:	615a      	str	r2, [r3, #20]
 800165c:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <LCD_Scan_Dir+0x3f8>)
 800165e:	885b      	ldrh	r3, [r3, #2]
 8001660:	3b01      	subs	r3, #1
 8001662:	121a      	asrs	r2, r3, #8
 8001664:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <LCD_Scan_Dir+0x400>)
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 800166a:	2280      	movs	r2, #128	@ 0x80
 800166c:	615a      	str	r2, [r3, #20]
 800166e:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 8001670:	2280      	movs	r2, #128	@ 0x80
 8001672:	611a      	str	r2, [r3, #16]
 8001674:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 8001676:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800167a:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 800167c:	4b0f      	ldr	r3, [pc, #60]	@ (80016bc <LCD_Scan_Dir+0x3f8>)
 800167e:	899b      	ldrh	r3, [r3, #12]
 8001680:	3303      	adds	r3, #3
 8001682:	b29b      	uxth	r3, r3
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fa7f 	bl	8000b88 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800168a:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 800168c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001690:	611a      	str	r2, [r3, #16]
 8001692:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 8001694:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001698:	615a      	str	r2, [r3, #20]
 800169a:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <LCD_Scan_Dir+0x3f8>)
 800169c:	885b      	ldrh	r3, [r3, #2]
 800169e:	3b01      	subs	r3, #1
 80016a0:	4a08      	ldr	r2, [pc, #32]	@ (80016c4 <LCD_Scan_Dir+0x400>)
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	60d3      	str	r3, [r2, #12]
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 80016a8:	2280      	movs	r2, #128	@ 0x80
 80016aa:	615a      	str	r2, [r3, #20]
 80016ac:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 80016ae:	2280      	movs	r2, #128	@ 0x80
 80016b0:	611a      	str	r2, [r3, #16]
 80016b2:	4b03      	ldr	r3, [pc, #12]	@ (80016c0 <LCD_Scan_Dir+0x3fc>)
 80016b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016b8:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80016ba:	e10b      	b.n	80018d4 <LCD_Scan_Dir+0x610>
 80016bc:	200000cc 	.word	0x200000cc
 80016c0:	40011000 	.word	0x40011000
 80016c4:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 80016c8:	4b84      	ldr	r3, [pc, #528]	@ (80018dc <LCD_Scan_Dir+0x618>)
 80016ca:	895b      	ldrh	r3, [r3, #10]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fa5b 	bl	8000b88 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80016d2:	4b83      	ldr	r3, [pc, #524]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 80016d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016d8:	611a      	str	r2, [r3, #16]
 80016da:	4b81      	ldr	r3, [pc, #516]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 80016dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016e0:	615a      	str	r2, [r3, #20]
 80016e2:	4b80      	ldr	r3, [pc, #512]	@ (80018e4 <LCD_Scan_Dir+0x620>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	4b7d      	ldr	r3, [pc, #500]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 80016ea:	2280      	movs	r2, #128	@ 0x80
 80016ec:	615a      	str	r2, [r3, #20]
 80016ee:	4b7c      	ldr	r3, [pc, #496]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 80016f0:	2280      	movs	r2, #128	@ 0x80
 80016f2:	611a      	str	r2, [r3, #16]
 80016f4:	4b7a      	ldr	r3, [pc, #488]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 80016f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016fa:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80016fc:	4b78      	ldr	r3, [pc, #480]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 80016fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001702:	611a      	str	r2, [r3, #16]
 8001704:	4b76      	ldr	r3, [pc, #472]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 8001706:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800170a:	615a      	str	r2, [r3, #20]
 800170c:	4b75      	ldr	r3, [pc, #468]	@ (80018e4 <LCD_Scan_Dir+0x620>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	4b73      	ldr	r3, [pc, #460]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 8001714:	2280      	movs	r2, #128	@ 0x80
 8001716:	615a      	str	r2, [r3, #20]
 8001718:	4b71      	ldr	r3, [pc, #452]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 800171a:	2280      	movs	r2, #128	@ 0x80
 800171c:	611a      	str	r2, [r3, #16]
 800171e:	4b70      	ldr	r3, [pc, #448]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 8001720:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001724:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001726:	4b6e      	ldr	r3, [pc, #440]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 8001728:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800172c:	611a      	str	r2, [r3, #16]
 800172e:	4b6c      	ldr	r3, [pc, #432]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 8001730:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001734:	615a      	str	r2, [r3, #20]
 8001736:	4b69      	ldr	r3, [pc, #420]	@ (80018dc <LCD_Scan_Dir+0x618>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	3b01      	subs	r3, #1
 800173c:	121a      	asrs	r2, r3, #8
 800173e:	4b69      	ldr	r3, [pc, #420]	@ (80018e4 <LCD_Scan_Dir+0x620>)
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	4b67      	ldr	r3, [pc, #412]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 8001744:	2280      	movs	r2, #128	@ 0x80
 8001746:	615a      	str	r2, [r3, #20]
 8001748:	4b65      	ldr	r3, [pc, #404]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 800174a:	2280      	movs	r2, #128	@ 0x80
 800174c:	611a      	str	r2, [r3, #16]
 800174e:	4b64      	ldr	r3, [pc, #400]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 8001750:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001754:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001756:	4b62      	ldr	r3, [pc, #392]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 8001758:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800175c:	611a      	str	r2, [r3, #16]
 800175e:	4b60      	ldr	r3, [pc, #384]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 8001760:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001764:	615a      	str	r2, [r3, #20]
 8001766:	4b5d      	ldr	r3, [pc, #372]	@ (80018dc <LCD_Scan_Dir+0x618>)
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	3b01      	subs	r3, #1
 800176c:	4a5d      	ldr	r2, [pc, #372]	@ (80018e4 <LCD_Scan_Dir+0x620>)
 800176e:	b2db      	uxtb	r3, r3
 8001770:	60d3      	str	r3, [r2, #12]
 8001772:	4b5b      	ldr	r3, [pc, #364]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 8001774:	2280      	movs	r2, #128	@ 0x80
 8001776:	615a      	str	r2, [r3, #20]
 8001778:	4b59      	ldr	r3, [pc, #356]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 800177a:	2280      	movs	r2, #128	@ 0x80
 800177c:	611a      	str	r2, [r3, #16]
 800177e:	4b58      	ldr	r3, [pc, #352]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 8001780:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001784:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8001786:	4b55      	ldr	r3, [pc, #340]	@ (80018dc <LCD_Scan_Dir+0x618>)
 8001788:	899b      	ldrh	r3, [r3, #12]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff f9fc 	bl	8000b88 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001790:	4b53      	ldr	r3, [pc, #332]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 8001792:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001796:	611a      	str	r2, [r3, #16]
 8001798:	4b51      	ldr	r3, [pc, #324]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 800179a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800179e:	615a      	str	r2, [r3, #20]
 80017a0:	4b50      	ldr	r3, [pc, #320]	@ (80018e4 <LCD_Scan_Dir+0x620>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	4b4e      	ldr	r3, [pc, #312]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 80017a8:	2280      	movs	r2, #128	@ 0x80
 80017aa:	615a      	str	r2, [r3, #20]
 80017ac:	4b4c      	ldr	r3, [pc, #304]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 80017ae:	2280      	movs	r2, #128	@ 0x80
 80017b0:	611a      	str	r2, [r3, #16]
 80017b2:	4b4b      	ldr	r3, [pc, #300]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 80017b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017b8:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80017ba:	4b49      	ldr	r3, [pc, #292]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 80017bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017c0:	611a      	str	r2, [r3, #16]
 80017c2:	4b47      	ldr	r3, [pc, #284]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 80017c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017c8:	615a      	str	r2, [r3, #20]
 80017ca:	4b46      	ldr	r3, [pc, #280]	@ (80018e4 <LCD_Scan_Dir+0x620>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	4b43      	ldr	r3, [pc, #268]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 80017d2:	2280      	movs	r2, #128	@ 0x80
 80017d4:	615a      	str	r2, [r3, #20]
 80017d6:	4b42      	ldr	r3, [pc, #264]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 80017d8:	2280      	movs	r2, #128	@ 0x80
 80017da:	611a      	str	r2, [r3, #16]
 80017dc:	4b40      	ldr	r3, [pc, #256]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 80017de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017e2:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80017e4:	4b3e      	ldr	r3, [pc, #248]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 80017e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017ea:	611a      	str	r2, [r3, #16]
 80017ec:	4b3c      	ldr	r3, [pc, #240]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 80017ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017f2:	615a      	str	r2, [r3, #20]
 80017f4:	4b39      	ldr	r3, [pc, #228]	@ (80018dc <LCD_Scan_Dir+0x618>)
 80017f6:	885b      	ldrh	r3, [r3, #2]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	121a      	asrs	r2, r3, #8
 80017fc:	4b39      	ldr	r3, [pc, #228]	@ (80018e4 <LCD_Scan_Dir+0x620>)
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	4b37      	ldr	r3, [pc, #220]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 8001802:	2280      	movs	r2, #128	@ 0x80
 8001804:	615a      	str	r2, [r3, #20]
 8001806:	4b36      	ldr	r3, [pc, #216]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 8001808:	2280      	movs	r2, #128	@ 0x80
 800180a:	611a      	str	r2, [r3, #16]
 800180c:	4b34      	ldr	r3, [pc, #208]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 800180e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001812:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001814:	4b32      	ldr	r3, [pc, #200]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 8001816:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800181a:	611a      	str	r2, [r3, #16]
 800181c:	4b30      	ldr	r3, [pc, #192]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 800181e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001822:	615a      	str	r2, [r3, #20]
 8001824:	4b2d      	ldr	r3, [pc, #180]	@ (80018dc <LCD_Scan_Dir+0x618>)
 8001826:	885b      	ldrh	r3, [r3, #2]
 8001828:	3b01      	subs	r3, #1
 800182a:	4a2e      	ldr	r2, [pc, #184]	@ (80018e4 <LCD_Scan_Dir+0x620>)
 800182c:	b2db      	uxtb	r3, r3
 800182e:	60d3      	str	r3, [r2, #12]
 8001830:	4b2b      	ldr	r3, [pc, #172]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 8001832:	2280      	movs	r2, #128	@ 0x80
 8001834:	615a      	str	r2, [r3, #20]
 8001836:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 8001838:	2280      	movs	r2, #128	@ 0x80
 800183a:	611a      	str	r2, [r3, #16]
 800183c:	4b28      	ldr	r3, [pc, #160]	@ (80018e0 <LCD_Scan_Dir+0x61c>)
 800183e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001842:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001844:	e046      	b.n	80018d4 <LCD_Scan_Dir+0x610>
		}
	} else {
		switch (dir) {
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2b07      	cmp	r3, #7
 800184a:	d836      	bhi.n	80018ba <LCD_Scan_Dir+0x5f6>
 800184c:	a201      	add	r2, pc, #4	@ (adr r2, 8001854 <LCD_Scan_Dir+0x590>)
 800184e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001852:	bf00      	nop
 8001854:	08001875 	.word	0x08001875
 8001858:	0800187f 	.word	0x0800187f
 800185c:	08001889 	.word	0x08001889
 8001860:	080018bb 	.word	0x080018bb
 8001864:	08001893 	.word	0x08001893
 8001868:	0800189d 	.word	0x0800189d
 800186c:	080018a7 	.word	0x080018a7
 8001870:	080018b1 	.word	0x080018b1
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8001874:	89fb      	ldrh	r3, [r7, #14]
 8001876:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800187a:	81fb      	strh	r3, [r7, #14]
			break;
 800187c:	e01d      	b.n	80018ba <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 800187e:	89fb      	ldrh	r3, [r7, #14]
 8001880:	f043 0310 	orr.w	r3, r3, #16
 8001884:	81fb      	strh	r3, [r7, #14]
			break;
 8001886:	e018      	b.n	80018ba <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 8001888:	89fb      	ldrh	r3, [r7, #14]
 800188a:	f043 0320 	orr.w	r3, r3, #32
 800188e:	81fb      	strh	r3, [r7, #14]
			break;
 8001890:	e013      	b.n	80018ba <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8001892:	89fb      	ldrh	r3, [r7, #14]
 8001894:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8001898:	81fb      	strh	r3, [r7, #14]
			break;
 800189a:	e00e      	b.n	80018ba <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 800189c:	89fb      	ldrh	r3, [r7, #14]
 800189e:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 80018a2:	81fb      	strh	r3, [r7, #14]
			break;
 80018a4:	e009      	b.n	80018ba <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 80018a6:	89fb      	ldrh	r3, [r7, #14]
 80018a8:	f043 0318 	orr.w	r3, r3, #24
 80018ac:	81fb      	strh	r3, [r7, #14]
			break;
 80018ae:	e004      	b.n	80018ba <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 80018b0:	89fb      	ldrh	r3, [r7, #14]
 80018b2:	f043 0308 	orr.w	r3, r3, #8
 80018b6:	81fb      	strh	r3, [r7, #14]
			break;
 80018b8:	bf00      	nop
		}
		dirreg = 0X03;
 80018ba:	2303      	movs	r3, #3
 80018bc:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 80018be:	89fb      	ldrh	r3, [r7, #14]
 80018c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018c4:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80018c6:	89fa      	ldrh	r2, [r7, #14]
 80018c8:	89bb      	ldrh	r3, [r7, #12]
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff f9e7 	bl	8000ca0 <LCD_WriteReg>
	}
}
 80018d2:	bf00      	nop
 80018d4:	bf00      	nop
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200000cc 	.word	0x200000cc
 80018e0:	40011000 	.word	0x40011000
 80018e4:	40010c00 	.word	0x40010c00

080018e8 <LCD_Fast_DrawPoint>:
	LCD_WriteRAM_Prepare();
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
}
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	80fb      	strh	r3, [r7, #6]
 80018f2:	460b      	mov	r3, r1
 80018f4:	80bb      	strh	r3, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80018fa:	4b75      	ldr	r3, [pc, #468]	@ (8001ad0 <LCD_Fast_DrawPoint+0x1e8>)
 80018fc:	889b      	ldrh	r3, [r3, #4]
 80018fe:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001902:	4293      	cmp	r3, r2
 8001904:	d005      	beq.n	8001912 <LCD_Fast_DrawPoint+0x2a>
 8001906:	4b72      	ldr	r3, [pc, #456]	@ (8001ad0 <LCD_Fast_DrawPoint+0x1e8>)
 8001908:	889b      	ldrh	r3, [r3, #4]
 800190a:	f245 3210 	movw	r2, #21264	@ 0x5310
 800190e:	4293      	cmp	r3, r2
 8001910:	d164      	bne.n	80019dc <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 8001912:	4b6f      	ldr	r3, [pc, #444]	@ (8001ad0 <LCD_Fast_DrawPoint+0x1e8>)
 8001914:	895b      	ldrh	r3, [r3, #10]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff f936 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 800191c:	4b6d      	ldr	r3, [pc, #436]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 800191e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001922:	611a      	str	r2, [r3, #16]
 8001924:	4b6b      	ldr	r3, [pc, #428]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800192a:	615a      	str	r2, [r3, #20]
 800192c:	88fb      	ldrh	r3, [r7, #6]
 800192e:	0a1b      	lsrs	r3, r3, #8
 8001930:	b29a      	uxth	r2, r3
 8001932:	4b69      	ldr	r3, [pc, #420]	@ (8001ad8 <LCD_Fast_DrawPoint+0x1f0>)
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	4b67      	ldr	r3, [pc, #412]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001938:	2280      	movs	r2, #128	@ 0x80
 800193a:	615a      	str	r2, [r3, #20]
 800193c:	4b65      	ldr	r3, [pc, #404]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 800193e:	2280      	movs	r2, #128	@ 0x80
 8001940:	611a      	str	r2, [r3, #16]
 8001942:	4b64      	ldr	r3, [pc, #400]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001944:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001948:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800194a:	4b62      	ldr	r3, [pc, #392]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 800194c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001950:	611a      	str	r2, [r3, #16]
 8001952:	4b60      	ldr	r3, [pc, #384]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001958:	615a      	str	r2, [r3, #20]
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	4a5e      	ldr	r2, [pc, #376]	@ (8001ad8 <LCD_Fast_DrawPoint+0x1f0>)
 800195e:	b2db      	uxtb	r3, r3
 8001960:	60d3      	str	r3, [r2, #12]
 8001962:	4b5c      	ldr	r3, [pc, #368]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001964:	2280      	movs	r2, #128	@ 0x80
 8001966:	615a      	str	r2, [r3, #20]
 8001968:	4b5a      	ldr	r3, [pc, #360]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 800196a:	2280      	movs	r2, #128	@ 0x80
 800196c:	611a      	str	r2, [r3, #16]
 800196e:	4b59      	ldr	r3, [pc, #356]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001974:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001976:	4b56      	ldr	r3, [pc, #344]	@ (8001ad0 <LCD_Fast_DrawPoint+0x1e8>)
 8001978:	899b      	ldrh	r3, [r3, #12]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff f904 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001980:	4b54      	ldr	r3, [pc, #336]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001982:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001986:	611a      	str	r2, [r3, #16]
 8001988:	4b52      	ldr	r3, [pc, #328]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 800198a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800198e:	615a      	str	r2, [r3, #20]
 8001990:	88bb      	ldrh	r3, [r7, #4]
 8001992:	0a1b      	lsrs	r3, r3, #8
 8001994:	b29a      	uxth	r2, r3
 8001996:	4b50      	ldr	r3, [pc, #320]	@ (8001ad8 <LCD_Fast_DrawPoint+0x1f0>)
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	4b4e      	ldr	r3, [pc, #312]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 800199c:	2280      	movs	r2, #128	@ 0x80
 800199e:	615a      	str	r2, [r3, #20]
 80019a0:	4b4c      	ldr	r3, [pc, #304]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 80019a2:	2280      	movs	r2, #128	@ 0x80
 80019a4:	611a      	str	r2, [r3, #16]
 80019a6:	4b4b      	ldr	r3, [pc, #300]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 80019a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019ac:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80019ae:	4b49      	ldr	r3, [pc, #292]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 80019b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019b4:	611a      	str	r2, [r3, #16]
 80019b6:	4b47      	ldr	r3, [pc, #284]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 80019b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019bc:	615a      	str	r2, [r3, #20]
 80019be:	88bb      	ldrh	r3, [r7, #4]
 80019c0:	4a45      	ldr	r2, [pc, #276]	@ (8001ad8 <LCD_Fast_DrawPoint+0x1f0>)
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	60d3      	str	r3, [r2, #12]
 80019c6:	4b43      	ldr	r3, [pc, #268]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 80019c8:	2280      	movs	r2, #128	@ 0x80
 80019ca:	615a      	str	r2, [r3, #20]
 80019cc:	4b41      	ldr	r3, [pc, #260]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 80019ce:	2280      	movs	r2, #128	@ 0x80
 80019d0:	611a      	str	r2, [r3, #16]
 80019d2:	4b40      	ldr	r3, [pc, #256]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 80019d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019d8:	611a      	str	r2, [r3, #16]
 80019da:	e1e6      	b.n	8001daa <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 80019dc:	4b3c      	ldr	r3, [pc, #240]	@ (8001ad0 <LCD_Fast_DrawPoint+0x1e8>)
 80019de:	889b      	ldrh	r3, [r3, #4]
 80019e0:	f245 5210 	movw	r2, #21776	@ 0x5510
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d179      	bne.n	8001adc <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 80019e8:	4b39      	ldr	r3, [pc, #228]	@ (8001ad0 <LCD_Fast_DrawPoint+0x1e8>)
 80019ea:	895b      	ldrh	r3, [r3, #10]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff f8cb 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80019f2:	4b38      	ldr	r3, [pc, #224]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 80019f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019f8:	611a      	str	r2, [r3, #16]
 80019fa:	4b36      	ldr	r3, [pc, #216]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 80019fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a00:	615a      	str	r2, [r3, #20]
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	4b33      	ldr	r3, [pc, #204]	@ (8001ad8 <LCD_Fast_DrawPoint+0x1f0>)
 8001a0a:	60da      	str	r2, [r3, #12]
 8001a0c:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001a0e:	2280      	movs	r2, #128	@ 0x80
 8001a10:	615a      	str	r2, [r3, #20]
 8001a12:	4b30      	ldr	r3, [pc, #192]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001a14:	2280      	movs	r2, #128	@ 0x80
 8001a16:	611a      	str	r2, [r3, #16]
 8001a18:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001a1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a1e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001a20:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad0 <LCD_Fast_DrawPoint+0x1e8>)
 8001a22:	895b      	ldrh	r3, [r3, #10]
 8001a24:	3301      	adds	r3, #1
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff f8ad 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 8001a2e:	4b29      	ldr	r3, [pc, #164]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001a30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a34:	611a      	str	r2, [r3, #16]
 8001a36:	4b27      	ldr	r3, [pc, #156]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001a38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a3c:	615a      	str	r2, [r3, #20]
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	4a25      	ldr	r2, [pc, #148]	@ (8001ad8 <LCD_Fast_DrawPoint+0x1f0>)
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	60d3      	str	r3, [r2, #12]
 8001a46:	4b23      	ldr	r3, [pc, #140]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001a48:	2280      	movs	r2, #128	@ 0x80
 8001a4a:	615a      	str	r2, [r3, #20]
 8001a4c:	4b21      	ldr	r3, [pc, #132]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001a4e:	2280      	movs	r2, #128	@ 0x80
 8001a50:	611a      	str	r2, [r3, #16]
 8001a52:	4b20      	ldr	r3, [pc, #128]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001a54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a58:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad0 <LCD_Fast_DrawPoint+0x1e8>)
 8001a5c:	899b      	ldrh	r3, [r3, #12]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff f892 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001a64:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001a66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a6a:	611a      	str	r2, [r3, #16]
 8001a6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001a6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a72:	615a      	str	r2, [r3, #20]
 8001a74:	88bb      	ldrh	r3, [r7, #4]
 8001a76:	0a1b      	lsrs	r3, r3, #8
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <LCD_Fast_DrawPoint+0x1f0>)
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001a80:	2280      	movs	r2, #128	@ 0x80
 8001a82:	615a      	str	r2, [r3, #20]
 8001a84:	4b13      	ldr	r3, [pc, #76]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001a86:	2280      	movs	r2, #128	@ 0x80
 8001a88:	611a      	str	r2, [r3, #16]
 8001a8a:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001a8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a90:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001a92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <LCD_Fast_DrawPoint+0x1e8>)
 8001a94:	899b      	ldrh	r3, [r3, #12]
 8001a96:	3301      	adds	r3, #1
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff f874 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001aa2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001aa6:	611a      	str	r2, [r3, #16]
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001aaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aae:	615a      	str	r2, [r3, #20]
 8001ab0:	88bb      	ldrh	r3, [r7, #4]
 8001ab2:	4a09      	ldr	r2, [pc, #36]	@ (8001ad8 <LCD_Fast_DrawPoint+0x1f0>)
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	60d3      	str	r3, [r2, #12]
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001aba:	2280      	movs	r2, #128	@ 0x80
 8001abc:	615a      	str	r2, [r3, #20]
 8001abe:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001ac0:	2280      	movs	r2, #128	@ 0x80
 8001ac2:	611a      	str	r2, [r3, #16]
 8001ac4:	4b03      	ldr	r3, [pc, #12]	@ (8001ad4 <LCD_Fast_DrawPoint+0x1ec>)
 8001ac6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aca:	611a      	str	r2, [r3, #16]
 8001acc:	e16d      	b.n	8001daa <LCD_Fast_DrawPoint+0x4c2>
 8001ace:	bf00      	nop
 8001ad0:	200000cc 	.word	0x200000cc
 8001ad4:	40011000 	.word	0x40011000
 8001ad8:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8001adc:	4b68      	ldr	r3, [pc, #416]	@ (8001c80 <LCD_Fast_DrawPoint+0x398>)
 8001ade:	889b      	ldrh	r3, [r3, #4]
 8001ae0:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	f040 80d1 	bne.w	8001c8c <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 8001aea:	4b65      	ldr	r3, [pc, #404]	@ (8001c80 <LCD_Fast_DrawPoint+0x398>)
 8001aec:	799b      	ldrb	r3, [r3, #6]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 8001af2:	4b63      	ldr	r3, [pc, #396]	@ (8001c80 <LCD_Fast_DrawPoint+0x398>)
 8001af4:	881a      	ldrh	r2, [r3, #0]
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	3b01      	subs	r3, #1
 8001afe:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001b00:	4b5f      	ldr	r3, [pc, #380]	@ (8001c80 <LCD_Fast_DrawPoint+0x398>)
 8001b02:	895b      	ldrh	r3, [r3, #10]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff f83f 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001b0a:	4b5e      	ldr	r3, [pc, #376]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001b0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b10:	611a      	str	r2, [r3, #16]
 8001b12:	4b5c      	ldr	r3, [pc, #368]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001b14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b18:	615a      	str	r2, [r3, #20]
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	4b59      	ldr	r3, [pc, #356]	@ (8001c88 <LCD_Fast_DrawPoint+0x3a0>)
 8001b22:	60da      	str	r2, [r3, #12]
 8001b24:	4b57      	ldr	r3, [pc, #348]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001b26:	2280      	movs	r2, #128	@ 0x80
 8001b28:	615a      	str	r2, [r3, #20]
 8001b2a:	4b56      	ldr	r3, [pc, #344]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001b2c:	2280      	movs	r2, #128	@ 0x80
 8001b2e:	611a      	str	r2, [r3, #16]
 8001b30:	4b54      	ldr	r3, [pc, #336]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001b32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b36:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001b38:	4b52      	ldr	r3, [pc, #328]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001b3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b3e:	611a      	str	r2, [r3, #16]
 8001b40:	4b50      	ldr	r3, [pc, #320]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001b42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b46:	615a      	str	r2, [r3, #20]
 8001b48:	88fb      	ldrh	r3, [r7, #6]
 8001b4a:	4a4f      	ldr	r2, [pc, #316]	@ (8001c88 <LCD_Fast_DrawPoint+0x3a0>)
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	60d3      	str	r3, [r2, #12]
 8001b50:	4b4c      	ldr	r3, [pc, #304]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001b52:	2280      	movs	r2, #128	@ 0x80
 8001b54:	615a      	str	r2, [r3, #20]
 8001b56:	4b4b      	ldr	r3, [pc, #300]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001b58:	2280      	movs	r2, #128	@ 0x80
 8001b5a:	611a      	str	r2, [r3, #16]
 8001b5c:	4b49      	ldr	r3, [pc, #292]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001b5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b62:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8001b64:	4b47      	ldr	r3, [pc, #284]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001b66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b6a:	611a      	str	r2, [r3, #16]
 8001b6c:	4b45      	ldr	r3, [pc, #276]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001b6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b72:	615a      	str	r2, [r3, #20]
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	0a1b      	lsrs	r3, r3, #8
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	4b43      	ldr	r3, [pc, #268]	@ (8001c88 <LCD_Fast_DrawPoint+0x3a0>)
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	4b41      	ldr	r3, [pc, #260]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001b80:	2280      	movs	r2, #128	@ 0x80
 8001b82:	615a      	str	r2, [r3, #20]
 8001b84:	4b3f      	ldr	r3, [pc, #252]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001b86:	2280      	movs	r2, #128	@ 0x80
 8001b88:	611a      	str	r2, [r3, #16]
 8001b8a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001b8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b90:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001b92:	4b3c      	ldr	r3, [pc, #240]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001b94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b98:	611a      	str	r2, [r3, #16]
 8001b9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001b9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ba0:	615a      	str	r2, [r3, #20]
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	4a38      	ldr	r2, [pc, #224]	@ (8001c88 <LCD_Fast_DrawPoint+0x3a0>)
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	60d3      	str	r3, [r2, #12]
 8001baa:	4b36      	ldr	r3, [pc, #216]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001bac:	2280      	movs	r2, #128	@ 0x80
 8001bae:	615a      	str	r2, [r3, #20]
 8001bb0:	4b34      	ldr	r3, [pc, #208]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001bb2:	2280      	movs	r2, #128	@ 0x80
 8001bb4:	611a      	str	r2, [r3, #16]
 8001bb6:	4b33      	ldr	r3, [pc, #204]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bbc:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001bbe:	4b30      	ldr	r3, [pc, #192]	@ (8001c80 <LCD_Fast_DrawPoint+0x398>)
 8001bc0:	899b      	ldrh	r3, [r3, #12]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe ffe0 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001bca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bce:	611a      	str	r2, [r3, #16]
 8001bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001bd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bd6:	615a      	str	r2, [r3, #20]
 8001bd8:	88bb      	ldrh	r3, [r7, #4]
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	4b2a      	ldr	r3, [pc, #168]	@ (8001c88 <LCD_Fast_DrawPoint+0x3a0>)
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	4b28      	ldr	r3, [pc, #160]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001be4:	2280      	movs	r2, #128	@ 0x80
 8001be6:	615a      	str	r2, [r3, #20]
 8001be8:	4b26      	ldr	r3, [pc, #152]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001bea:	2280      	movs	r2, #128	@ 0x80
 8001bec:	611a      	str	r2, [r3, #16]
 8001bee:	4b25      	ldr	r3, [pc, #148]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001bf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bf4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001bf6:	4b23      	ldr	r3, [pc, #140]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001bf8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bfc:	611a      	str	r2, [r3, #16]
 8001bfe:	4b21      	ldr	r3, [pc, #132]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001c00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c04:	615a      	str	r2, [r3, #20]
 8001c06:	88bb      	ldrh	r3, [r7, #4]
 8001c08:	4a1f      	ldr	r2, [pc, #124]	@ (8001c88 <LCD_Fast_DrawPoint+0x3a0>)
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	60d3      	str	r3, [r2, #12]
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001c10:	2280      	movs	r2, #128	@ 0x80
 8001c12:	615a      	str	r2, [r3, #20]
 8001c14:	4b1b      	ldr	r3, [pc, #108]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001c16:	2280      	movs	r2, #128	@ 0x80
 8001c18:	611a      	str	r2, [r3, #16]
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001c1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c20:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8001c22:	4b18      	ldr	r3, [pc, #96]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001c24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c28:	611a      	str	r2, [r3, #16]
 8001c2a:	4b16      	ldr	r3, [pc, #88]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001c2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c30:	615a      	str	r2, [r3, #20]
 8001c32:	88bb      	ldrh	r3, [r7, #4]
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <LCD_Fast_DrawPoint+0x3a0>)
 8001c3a:	60da      	str	r2, [r3, #12]
 8001c3c:	4b11      	ldr	r3, [pc, #68]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001c3e:	2280      	movs	r2, #128	@ 0x80
 8001c40:	615a      	str	r2, [r3, #20]
 8001c42:	4b10      	ldr	r3, [pc, #64]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001c44:	2280      	movs	r2, #128	@ 0x80
 8001c46:	611a      	str	r2, [r3, #16]
 8001c48:	4b0e      	ldr	r3, [pc, #56]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001c4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c4e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001c50:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001c52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c56:	611a      	str	r2, [r3, #16]
 8001c58:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001c5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c5e:	615a      	str	r2, [r3, #20]
 8001c60:	88bb      	ldrh	r3, [r7, #4]
 8001c62:	4a09      	ldr	r2, [pc, #36]	@ (8001c88 <LCD_Fast_DrawPoint+0x3a0>)
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	60d3      	str	r3, [r2, #12]
 8001c68:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001c6a:	2280      	movs	r2, #128	@ 0x80
 8001c6c:	615a      	str	r2, [r3, #20]
 8001c6e:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001c70:	2280      	movs	r2, #128	@ 0x80
 8001c72:	611a      	str	r2, [r3, #16]
 8001c74:	4b03      	ldr	r3, [pc, #12]	@ (8001c84 <LCD_Fast_DrawPoint+0x39c>)
 8001c76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c7a:	611a      	str	r2, [r3, #16]
 8001c7c:	e095      	b.n	8001daa <LCD_Fast_DrawPoint+0x4c2>
 8001c7e:	bf00      	nop
 8001c80:	200000cc 	.word	0x200000cc
 8001c84:	40011000 	.word	0x40011000
 8001c88:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8001c8c:	4b5e      	ldr	r3, [pc, #376]	@ (8001e08 <LCD_Fast_DrawPoint+0x520>)
 8001c8e:	889b      	ldrh	r3, [r3, #4]
 8001c90:	f646 0204 	movw	r2, #26628	@ 0x6804
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d16f      	bne.n	8001d78 <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8001c98:	4b5b      	ldr	r3, [pc, #364]	@ (8001e08 <LCD_Fast_DrawPoint+0x520>)
 8001c9a:	799b      	ldrb	r3, [r3, #6]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d106      	bne.n	8001cae <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8001ca0:	4b59      	ldr	r3, [pc, #356]	@ (8001e08 <LCD_Fast_DrawPoint+0x520>)
 8001ca2:	881a      	ldrh	r2, [r3, #0]
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	3b01      	subs	r3, #1
 8001cac:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001cae:	4b56      	ldr	r3, [pc, #344]	@ (8001e08 <LCD_Fast_DrawPoint+0x520>)
 8001cb0:	895b      	ldrh	r3, [r3, #10]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe ff68 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001cb8:	4b54      	ldr	r3, [pc, #336]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001cba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cbe:	611a      	str	r2, [r3, #16]
 8001cc0:	4b52      	ldr	r3, [pc, #328]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001cc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cc6:	615a      	str	r2, [r3, #20]
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	0a1b      	lsrs	r3, r3, #8
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b50      	ldr	r3, [pc, #320]	@ (8001e10 <LCD_Fast_DrawPoint+0x528>)
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	4b4e      	ldr	r3, [pc, #312]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001cd4:	2280      	movs	r2, #128	@ 0x80
 8001cd6:	615a      	str	r2, [r3, #20]
 8001cd8:	4b4c      	ldr	r3, [pc, #304]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001cda:	2280      	movs	r2, #128	@ 0x80
 8001cdc:	611a      	str	r2, [r3, #16]
 8001cde:	4b4b      	ldr	r3, [pc, #300]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001ce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ce4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001ce6:	4b49      	ldr	r3, [pc, #292]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001ce8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cec:	611a      	str	r2, [r3, #16]
 8001cee:	4b47      	ldr	r3, [pc, #284]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001cf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cf4:	615a      	str	r2, [r3, #20]
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	4a45      	ldr	r2, [pc, #276]	@ (8001e10 <LCD_Fast_DrawPoint+0x528>)
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	60d3      	str	r3, [r2, #12]
 8001cfe:	4b43      	ldr	r3, [pc, #268]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001d00:	2280      	movs	r2, #128	@ 0x80
 8001d02:	615a      	str	r2, [r3, #20]
 8001d04:	4b41      	ldr	r3, [pc, #260]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	611a      	str	r2, [r3, #16]
 8001d0a:	4b40      	ldr	r3, [pc, #256]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001d0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d10:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001d12:	4b3d      	ldr	r3, [pc, #244]	@ (8001e08 <LCD_Fast_DrawPoint+0x520>)
 8001d14:	899b      	ldrh	r3, [r3, #12]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe ff36 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001d1c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001d1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d22:	611a      	str	r2, [r3, #16]
 8001d24:	4b39      	ldr	r3, [pc, #228]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001d26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d2a:	615a      	str	r2, [r3, #20]
 8001d2c:	88bb      	ldrh	r3, [r7, #4]
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	4b37      	ldr	r3, [pc, #220]	@ (8001e10 <LCD_Fast_DrawPoint+0x528>)
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	4b35      	ldr	r3, [pc, #212]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001d38:	2280      	movs	r2, #128	@ 0x80
 8001d3a:	615a      	str	r2, [r3, #20]
 8001d3c:	4b33      	ldr	r3, [pc, #204]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001d3e:	2280      	movs	r2, #128	@ 0x80
 8001d40:	611a      	str	r2, [r3, #16]
 8001d42:	4b32      	ldr	r3, [pc, #200]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001d44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d48:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001d4a:	4b30      	ldr	r3, [pc, #192]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001d4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d50:	611a      	str	r2, [r3, #16]
 8001d52:	4b2e      	ldr	r3, [pc, #184]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001d54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d58:	615a      	str	r2, [r3, #20]
 8001d5a:	88bb      	ldrh	r3, [r7, #4]
 8001d5c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e10 <LCD_Fast_DrawPoint+0x528>)
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	60d3      	str	r3, [r2, #12]
 8001d62:	4b2a      	ldr	r3, [pc, #168]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001d64:	2280      	movs	r2, #128	@ 0x80
 8001d66:	615a      	str	r2, [r3, #20]
 8001d68:	4b28      	ldr	r3, [pc, #160]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001d6a:	2280      	movs	r2, #128	@ 0x80
 8001d6c:	611a      	str	r2, [r3, #16]
 8001d6e:	4b27      	ldr	r3, [pc, #156]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001d70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d74:	611a      	str	r2, [r3, #16]
 8001d76:	e018      	b.n	8001daa <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8001d78:	4b23      	ldr	r3, [pc, #140]	@ (8001e08 <LCD_Fast_DrawPoint+0x520>)
 8001d7a:	799b      	ldrb	r3, [r3, #6]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d106      	bne.n	8001d8e <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8001d80:	4b21      	ldr	r3, [pc, #132]	@ (8001e08 <LCD_Fast_DrawPoint+0x520>)
 8001d82:	881a      	ldrh	r2, [r3, #0]
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e08 <LCD_Fast_DrawPoint+0x520>)
 8001d90:	895b      	ldrh	r3, [r3, #10]
 8001d92:	88fa      	ldrh	r2, [r7, #6]
 8001d94:	4611      	mov	r1, r2
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe ff82 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e08 <LCD_Fast_DrawPoint+0x520>)
 8001d9e:	899b      	ldrh	r3, [r3, #12]
 8001da0:	88ba      	ldrh	r2, [r7, #4]
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe ff7b 	bl	8000ca0 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8001daa:	4b18      	ldr	r3, [pc, #96]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001dac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001db0:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8001db2:	4b16      	ldr	r3, [pc, #88]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001db4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001db8:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8001dba:	4b13      	ldr	r3, [pc, #76]	@ (8001e08 <LCD_Fast_DrawPoint+0x520>)
 8001dbc:	891a      	ldrh	r2, [r3, #8]
 8001dbe:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <LCD_Fast_DrawPoint+0x528>)
 8001dc0:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8001dc2:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001dc4:	2280      	movs	r2, #128	@ 0x80
 8001dc6:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001dc8:	4b10      	ldr	r3, [pc, #64]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001dca:	2280      	movs	r2, #128	@ 0x80
 8001dcc:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001dce:	4b0f      	ldr	r3, [pc, #60]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001dd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dd4:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001dd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ddc:	611a      	str	r2, [r3, #16]
 8001dde:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001de0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001de4:	615a      	str	r2, [r3, #20]
 8001de6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e10 <LCD_Fast_DrawPoint+0x528>)
 8001de8:	887b      	ldrh	r3, [r7, #2]
 8001dea:	60d3      	str	r3, [r2, #12]
 8001dec:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001dee:	2280      	movs	r2, #128	@ 0x80
 8001df0:	615a      	str	r2, [r3, #20]
 8001df2:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001df4:	2280      	movs	r2, #128	@ 0x80
 8001df6:	611a      	str	r2, [r3, #16]
 8001df8:	4b04      	ldr	r3, [pc, #16]	@ (8001e0c <LCD_Fast_DrawPoint+0x524>)
 8001dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dfe:	611a      	str	r2, [r3, #16]
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	200000cc 	.word	0x200000cc
 8001e0c:	40011000 	.word	0x40011000
 8001e10:	40010c00 	.word	0x40010c00
 8001e14:	00000000 	.word	0x00000000

08001e18 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001e22:	20be      	movs	r0, #190	@ 0xbe
 8001e24:	f7fe feb0 	bl	8000b88 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001e28:	4b4b      	ldr	r3, [pc, #300]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001e2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e2e:	611a      	str	r2, [r3, #16]
 8001e30:	4b49      	ldr	r3, [pc, #292]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001e32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e36:	615a      	str	r2, [r3, #20]
 8001e38:	4b48      	ldr	r3, [pc, #288]	@ (8001f5c <LCD_SSD_BackLightSet+0x144>)
 8001e3a:	2205      	movs	r2, #5
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	4b46      	ldr	r3, [pc, #280]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001e40:	2280      	movs	r2, #128	@ 0x80
 8001e42:	615a      	str	r2, [r3, #20]
 8001e44:	4b44      	ldr	r3, [pc, #272]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001e46:	2280      	movs	r2, #128	@ 0x80
 8001e48:	611a      	str	r2, [r3, #16]
 8001e4a:	4b43      	ldr	r3, [pc, #268]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001e4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e50:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001e52:	4b41      	ldr	r3, [pc, #260]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001e54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e58:	611a      	str	r2, [r3, #16]
 8001e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001e5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e60:	615a      	str	r2, [r3, #20]
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fc5b 	bl	8000720 <__aeabi_i2d>
 8001e6a:	a339      	add	r3, pc, #228	@ (adr r3, 8001f50 <LCD_SSD_BackLightSet+0x138>)
 8001e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e70:	f7fe f9da 	bl	8000228 <__aeabi_dmul>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4c38      	ldr	r4, [pc, #224]	@ (8001f5c <LCD_SSD_BackLightSet+0x144>)
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe fcb9 	bl	80007f4 <__aeabi_d2uiz>
 8001e82:	4603      	mov	r3, r0
 8001e84:	60e3      	str	r3, [r4, #12]
 8001e86:	4b34      	ldr	r3, [pc, #208]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001e88:	2280      	movs	r2, #128	@ 0x80
 8001e8a:	615a      	str	r2, [r3, #20]
 8001e8c:	4b32      	ldr	r3, [pc, #200]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001e8e:	2280      	movs	r2, #128	@ 0x80
 8001e90:	611a      	str	r2, [r3, #16]
 8001e92:	4b31      	ldr	r3, [pc, #196]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001e94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e98:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001e9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ea0:	611a      	str	r2, [r3, #16]
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001ea4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ea8:	615a      	str	r2, [r3, #20]
 8001eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8001f5c <LCD_SSD_BackLightSet+0x144>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	60da      	str	r2, [r3, #12]
 8001eb0:	4b29      	ldr	r3, [pc, #164]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001eb2:	2280      	movs	r2, #128	@ 0x80
 8001eb4:	615a      	str	r2, [r3, #20]
 8001eb6:	4b28      	ldr	r3, [pc, #160]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001eb8:	2280      	movs	r2, #128	@ 0x80
 8001eba:	611a      	str	r2, [r3, #16]
 8001ebc:	4b26      	ldr	r3, [pc, #152]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001ebe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ec2:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001ec4:	4b24      	ldr	r3, [pc, #144]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001ec6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001eca:	611a      	str	r2, [r3, #16]
 8001ecc:	4b22      	ldr	r3, [pc, #136]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001ece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ed2:	615a      	str	r2, [r3, #20]
 8001ed4:	4b21      	ldr	r3, [pc, #132]	@ (8001f5c <LCD_SSD_BackLightSet+0x144>)
 8001ed6:	22ff      	movs	r2, #255	@ 0xff
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	4b1f      	ldr	r3, [pc, #124]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001edc:	2280      	movs	r2, #128	@ 0x80
 8001ede:	615a      	str	r2, [r3, #20]
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001ee2:	2280      	movs	r2, #128	@ 0x80
 8001ee4:	611a      	str	r2, [r3, #16]
 8001ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001ee8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eec:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001eee:	4b1a      	ldr	r3, [pc, #104]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001ef0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ef4:	611a      	str	r2, [r3, #16]
 8001ef6:	4b18      	ldr	r3, [pc, #96]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001ef8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001efc:	615a      	str	r2, [r3, #20]
 8001efe:	4b17      	ldr	r3, [pc, #92]	@ (8001f5c <LCD_SSD_BackLightSet+0x144>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	60da      	str	r2, [r3, #12]
 8001f04:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001f06:	2280      	movs	r2, #128	@ 0x80
 8001f08:	615a      	str	r2, [r3, #20]
 8001f0a:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001f0c:	2280      	movs	r2, #128	@ 0x80
 8001f0e:	611a      	str	r2, [r3, #16]
 8001f10:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001f12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f16:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8001f18:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001f1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f1e:	611a      	str	r2, [r3, #16]
 8001f20:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001f22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f26:	615a      	str	r2, [r3, #20]
 8001f28:	4b0c      	ldr	r3, [pc, #48]	@ (8001f5c <LCD_SSD_BackLightSet+0x144>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001f30:	2280      	movs	r2, #128	@ 0x80
 8001f32:	615a      	str	r2, [r3, #20]
 8001f34:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001f36:	2280      	movs	r2, #128	@ 0x80
 8001f38:	611a      	str	r2, [r3, #16]
 8001f3a:	4b07      	ldr	r3, [pc, #28]	@ (8001f58 <LCD_SSD_BackLightSet+0x140>)
 8001f3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f40:	611a      	str	r2, [r3, #16]
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd90      	pop	{r4, r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	f3af 8000 	nop.w
 8001f50:	66666666 	.word	0x66666666
 8001f54:	40046666 	.word	0x40046666
 8001f58:	40011000 	.word	0x40011000
 8001f5c:	40010c00 	.word	0x40010c00

08001f60 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d177      	bne.n	8002060 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001f70:	4b80      	ldr	r3, [pc, #512]	@ (8002174 <LCD_Display_Dir+0x214>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001f76:	4b7f      	ldr	r3, [pc, #508]	@ (8002174 <LCD_Display_Dir+0x214>)
 8001f78:	22f0      	movs	r2, #240	@ 0xf0
 8001f7a:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001f7c:	4b7d      	ldr	r3, [pc, #500]	@ (8002174 <LCD_Display_Dir+0x214>)
 8001f7e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001f82:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001f84:	4b7b      	ldr	r3, [pc, #492]	@ (8002174 <LCD_Display_Dir+0x214>)
 8001f86:	889b      	ldrh	r3, [r3, #4]
 8001f88:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d00b      	beq.n	8001fa8 <LCD_Display_Dir+0x48>
 8001f90:	4b78      	ldr	r3, [pc, #480]	@ (8002174 <LCD_Display_Dir+0x214>)
 8001f92:	889b      	ldrh	r3, [r3, #4]
 8001f94:	f646 0204 	movw	r2, #26628	@ 0x6804
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d005      	beq.n	8001fa8 <LCD_Display_Dir+0x48>
 8001f9c:	4b75      	ldr	r3, [pc, #468]	@ (8002174 <LCD_Display_Dir+0x214>)
 8001f9e:	889b      	ldrh	r3, [r3, #4]
 8001fa0:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d11e      	bne.n	8001fe6 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001fa8:	4b72      	ldr	r3, [pc, #456]	@ (8002174 <LCD_Display_Dir+0x214>)
 8001faa:	222c      	movs	r2, #44	@ 0x2c
 8001fac:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001fae:	4b71      	ldr	r3, [pc, #452]	@ (8002174 <LCD_Display_Dir+0x214>)
 8001fb0:	222a      	movs	r2, #42	@ 0x2a
 8001fb2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001fb4:	4b6f      	ldr	r3, [pc, #444]	@ (8002174 <LCD_Display_Dir+0x214>)
 8001fb6:	222b      	movs	r2, #43	@ 0x2b
 8001fb8:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001fba:	4b6e      	ldr	r3, [pc, #440]	@ (8002174 <LCD_Display_Dir+0x214>)
 8001fbc:	889b      	ldrh	r3, [r3, #4]
 8001fbe:	f646 0204 	movw	r2, #26628	@ 0x6804
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d006      	beq.n	8001fd4 <LCD_Display_Dir+0x74>
 8001fc6:	4b6b      	ldr	r3, [pc, #428]	@ (8002174 <LCD_Display_Dir+0x214>)
 8001fc8:	889b      	ldrh	r3, [r3, #4]
 8001fca:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	f040 80c7 	bne.w	8002162 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001fd4:	4b67      	ldr	r3, [pc, #412]	@ (8002174 <LCD_Display_Dir+0x214>)
 8001fd6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001fda:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001fdc:	4b65      	ldr	r3, [pc, #404]	@ (8002174 <LCD_Display_Dir+0x214>)
 8001fde:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001fe2:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001fe4:	e0bd      	b.n	8002162 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001fe6:	4b63      	ldr	r3, [pc, #396]	@ (8002174 <LCD_Display_Dir+0x214>)
 8001fe8:	889b      	ldrh	r3, [r3, #4]
 8001fea:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d114      	bne.n	800201c <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8001ff2:	4b60      	ldr	r3, [pc, #384]	@ (8002174 <LCD_Display_Dir+0x214>)
 8001ff4:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8001ff8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001ffa:	4b5e      	ldr	r3, [pc, #376]	@ (8002174 <LCD_Display_Dir+0x214>)
 8001ffc:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8002000:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8002002:	4b5c      	ldr	r3, [pc, #368]	@ (8002174 <LCD_Display_Dir+0x214>)
 8002004:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8002008:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 800200a:	4b5a      	ldr	r3, [pc, #360]	@ (8002174 <LCD_Display_Dir+0x214>)
 800200c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002010:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8002012:	4b58      	ldr	r3, [pc, #352]	@ (8002174 <LCD_Display_Dir+0x214>)
 8002014:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002018:	805a      	strh	r2, [r3, #2]
 800201a:	e0a3      	b.n	8002164 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 800201c:	4b55      	ldr	r3, [pc, #340]	@ (8002174 <LCD_Display_Dir+0x214>)
 800201e:	889b      	ldrh	r3, [r3, #4]
 8002020:	f641 1263 	movw	r2, #6499	@ 0x1963
 8002024:	4293      	cmp	r3, r2
 8002026:	d111      	bne.n	800204c <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8002028:	4b52      	ldr	r3, [pc, #328]	@ (8002174 <LCD_Display_Dir+0x214>)
 800202a:	222c      	movs	r2, #44	@ 0x2c
 800202c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 800202e:	4b51      	ldr	r3, [pc, #324]	@ (8002174 <LCD_Display_Dir+0x214>)
 8002030:	222b      	movs	r2, #43	@ 0x2b
 8002032:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8002034:	4b4f      	ldr	r3, [pc, #316]	@ (8002174 <LCD_Display_Dir+0x214>)
 8002036:	222a      	movs	r2, #42	@ 0x2a
 8002038:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 800203a:	4b4e      	ldr	r3, [pc, #312]	@ (8002174 <LCD_Display_Dir+0x214>)
 800203c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002040:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8002042:	4b4c      	ldr	r3, [pc, #304]	@ (8002174 <LCD_Display_Dir+0x214>)
 8002044:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002048:	805a      	strh	r2, [r3, #2]
 800204a:	e08b      	b.n	8002164 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 800204c:	4b49      	ldr	r3, [pc, #292]	@ (8002174 <LCD_Display_Dir+0x214>)
 800204e:	2222      	movs	r2, #34	@ 0x22
 8002050:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8002052:	4b48      	ldr	r3, [pc, #288]	@ (8002174 <LCD_Display_Dir+0x214>)
 8002054:	2220      	movs	r2, #32
 8002056:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8002058:	4b46      	ldr	r3, [pc, #280]	@ (8002174 <LCD_Display_Dir+0x214>)
 800205a:	2221      	movs	r2, #33	@ 0x21
 800205c:	819a      	strh	r2, [r3, #12]
 800205e:	e081      	b.n	8002164 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8002060:	4b44      	ldr	r3, [pc, #272]	@ (8002174 <LCD_Display_Dir+0x214>)
 8002062:	2201      	movs	r2, #1
 8002064:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8002066:	4b43      	ldr	r3, [pc, #268]	@ (8002174 <LCD_Display_Dir+0x214>)
 8002068:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800206c:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 800206e:	4b41      	ldr	r3, [pc, #260]	@ (8002174 <LCD_Display_Dir+0x214>)
 8002070:	22f0      	movs	r2, #240	@ 0xf0
 8002072:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8002074:	4b3f      	ldr	r3, [pc, #252]	@ (8002174 <LCD_Display_Dir+0x214>)
 8002076:	889b      	ldrh	r3, [r3, #4]
 8002078:	f249 3241 	movw	r2, #37697	@ 0x9341
 800207c:	4293      	cmp	r3, r2
 800207e:	d005      	beq.n	800208c <LCD_Display_Dir+0x12c>
 8002080:	4b3c      	ldr	r3, [pc, #240]	@ (8002174 <LCD_Display_Dir+0x214>)
 8002082:	889b      	ldrh	r3, [r3, #4]
 8002084:	f245 3210 	movw	r2, #21264	@ 0x5310
 8002088:	4293      	cmp	r3, r2
 800208a:	d109      	bne.n	80020a0 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 800208c:	4b39      	ldr	r3, [pc, #228]	@ (8002174 <LCD_Display_Dir+0x214>)
 800208e:	222c      	movs	r2, #44	@ 0x2c
 8002090:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8002092:	4b38      	ldr	r3, [pc, #224]	@ (8002174 <LCD_Display_Dir+0x214>)
 8002094:	222a      	movs	r2, #42	@ 0x2a
 8002096:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8002098:	4b36      	ldr	r3, [pc, #216]	@ (8002174 <LCD_Display_Dir+0x214>)
 800209a:	222b      	movs	r2, #43	@ 0x2b
 800209c:	819a      	strh	r2, [r3, #12]
 800209e:	e04b      	b.n	8002138 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 80020a0:	4b34      	ldr	r3, [pc, #208]	@ (8002174 <LCD_Display_Dir+0x214>)
 80020a2:	889b      	ldrh	r3, [r3, #4]
 80020a4:	f646 0204 	movw	r2, #26628	@ 0x6804
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d109      	bne.n	80020c0 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 80020ac:	4b31      	ldr	r3, [pc, #196]	@ (8002174 <LCD_Display_Dir+0x214>)
 80020ae:	222c      	movs	r2, #44	@ 0x2c
 80020b0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 80020b2:	4b30      	ldr	r3, [pc, #192]	@ (8002174 <LCD_Display_Dir+0x214>)
 80020b4:	222b      	movs	r2, #43	@ 0x2b
 80020b6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 80020b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002174 <LCD_Display_Dir+0x214>)
 80020ba:	222a      	movs	r2, #42	@ 0x2a
 80020bc:	819a      	strh	r2, [r3, #12]
 80020be:	e03b      	b.n	8002138 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 80020c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002174 <LCD_Display_Dir+0x214>)
 80020c2:	889b      	ldrh	r3, [r3, #4]
 80020c4:	f245 5210 	movw	r2, #21776	@ 0x5510
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d114      	bne.n	80020f6 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 80020cc:	4b29      	ldr	r3, [pc, #164]	@ (8002174 <LCD_Display_Dir+0x214>)
 80020ce:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 80020d2:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 80020d4:	4b27      	ldr	r3, [pc, #156]	@ (8002174 <LCD_Display_Dir+0x214>)
 80020d6:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 80020da:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 80020dc:	4b25      	ldr	r3, [pc, #148]	@ (8002174 <LCD_Display_Dir+0x214>)
 80020de:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 80020e2:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 80020e4:	4b23      	ldr	r3, [pc, #140]	@ (8002174 <LCD_Display_Dir+0x214>)
 80020e6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80020ea:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 80020ec:	4b21      	ldr	r3, [pc, #132]	@ (8002174 <LCD_Display_Dir+0x214>)
 80020ee:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80020f2:	805a      	strh	r2, [r3, #2]
 80020f4:	e020      	b.n	8002138 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 80020f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002174 <LCD_Display_Dir+0x214>)
 80020f8:	889b      	ldrh	r3, [r3, #4]
 80020fa:	f641 1263 	movw	r2, #6499	@ 0x1963
 80020fe:	4293      	cmp	r3, r2
 8002100:	d111      	bne.n	8002126 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8002102:	4b1c      	ldr	r3, [pc, #112]	@ (8002174 <LCD_Display_Dir+0x214>)
 8002104:	222c      	movs	r2, #44	@ 0x2c
 8002106:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8002108:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <LCD_Display_Dir+0x214>)
 800210a:	222a      	movs	r2, #42	@ 0x2a
 800210c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 800210e:	4b19      	ldr	r3, [pc, #100]	@ (8002174 <LCD_Display_Dir+0x214>)
 8002110:	222b      	movs	r2, #43	@ 0x2b
 8002112:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8002114:	4b17      	ldr	r3, [pc, #92]	@ (8002174 <LCD_Display_Dir+0x214>)
 8002116:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800211a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 800211c:	4b15      	ldr	r3, [pc, #84]	@ (8002174 <LCD_Display_Dir+0x214>)
 800211e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002122:	805a      	strh	r2, [r3, #2]
 8002124:	e008      	b.n	8002138 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8002126:	4b13      	ldr	r3, [pc, #76]	@ (8002174 <LCD_Display_Dir+0x214>)
 8002128:	2222      	movs	r2, #34	@ 0x22
 800212a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 800212c:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <LCD_Display_Dir+0x214>)
 800212e:	2221      	movs	r2, #33	@ 0x21
 8002130:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8002132:	4b10      	ldr	r3, [pc, #64]	@ (8002174 <LCD_Display_Dir+0x214>)
 8002134:	2220      	movs	r2, #32
 8002136:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8002138:	4b0e      	ldr	r3, [pc, #56]	@ (8002174 <LCD_Display_Dir+0x214>)
 800213a:	889b      	ldrh	r3, [r3, #4]
 800213c:	f646 0204 	movw	r2, #26628	@ 0x6804
 8002140:	4293      	cmp	r3, r2
 8002142:	d005      	beq.n	8002150 <LCD_Display_Dir+0x1f0>
 8002144:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <LCD_Display_Dir+0x214>)
 8002146:	889b      	ldrh	r3, [r3, #4]
 8002148:	f245 3210 	movw	r2, #21264	@ 0x5310
 800214c:	4293      	cmp	r3, r2
 800214e:	d109      	bne.n	8002164 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8002150:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <LCD_Display_Dir+0x214>)
 8002152:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002156:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <LCD_Display_Dir+0x214>)
 800215a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800215e:	805a      	strh	r2, [r3, #2]
 8002160:	e000      	b.n	8002164 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8002162:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8002164:	2000      	movs	r0, #0
 8002166:	f7ff f8ad 	bl	80012c4 <LCD_Scan_Dir>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200000cc 	.word	0x200000cc

08002178 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 800217e:	4b90      	ldr	r3, [pc, #576]	@ (80023c0 <LCD_Init+0x248>)
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	4a8f      	ldr	r2, [pc, #572]	@ (80023c0 <LCD_Init+0x248>)
 8002184:	f043 0308 	orr.w	r3, r3, #8
 8002188:	6193      	str	r3, [r2, #24]
 800218a:	4b8d      	ldr	r3, [pc, #564]	@ (80023c0 <LCD_Init+0x248>)
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8002196:	4b8a      	ldr	r3, [pc, #552]	@ (80023c0 <LCD_Init+0x248>)
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	4a89      	ldr	r2, [pc, #548]	@ (80023c0 <LCD_Init+0x248>)
 800219c:	f043 0310 	orr.w	r3, r3, #16
 80021a0:	6193      	str	r3, [r2, #24]
 80021a2:	4b87      	ldr	r3, [pc, #540]	@ (80023c0 <LCD_Init+0x248>)
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 80021ae:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80021b2:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 80021b4:	2301      	movs	r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 80021b8:	2301      	movs	r3, #1
 80021ba:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 80021bc:	2303      	movs	r3, #3
 80021be:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 80021c0:	f107 0308 	add.w	r3, r7, #8
 80021c4:	4619      	mov	r1, r3
 80021c6:	487f      	ldr	r0, [pc, #508]	@ (80023c4 <LCD_Init+0x24c>)
 80021c8:	f005 f94e 	bl	8007468 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 80021cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021d0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 80021d2:	f107 0308 	add.w	r3, r7, #8
 80021d6:	4619      	mov	r1, r3
 80021d8:	487b      	ldr	r0, [pc, #492]	@ (80023c8 <LCD_Init+0x250>)
 80021da:	f005 f945 	bl	8007468 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 80021de:	2032      	movs	r0, #50	@ 0x32
 80021e0:	f004 fece 	bl	8006f80 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 80021e4:	2101      	movs	r1, #1
 80021e6:	2000      	movs	r0, #0
 80021e8:	f7fe fd5a 	bl	8000ca0 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 80021ec:	2032      	movs	r0, #50	@ 0x32
 80021ee:	f004 fec7 	bl	8006f80 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f7fe fd7e 	bl	8000cf4 <LCD_ReadReg>
 80021f8:	4603      	mov	r3, r0
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b73      	ldr	r3, [pc, #460]	@ (80023cc <LCD_Init+0x254>)
 80021fe:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8002200:	4b72      	ldr	r3, [pc, #456]	@ (80023cc <LCD_Init+0x254>)
 8002202:	889b      	ldrh	r3, [r3, #4]
 8002204:	2bfe      	cmp	r3, #254	@ 0xfe
 8002206:	d90b      	bls.n	8002220 <LCD_Init+0xa8>
 8002208:	4b70      	ldr	r3, [pc, #448]	@ (80023cc <LCD_Init+0x254>)
 800220a:	889b      	ldrh	r3, [r3, #4]
 800220c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002210:	4293      	cmp	r3, r2
 8002212:	d005      	beq.n	8002220 <LCD_Init+0xa8>
 8002214:	4b6d      	ldr	r3, [pc, #436]	@ (80023cc <LCD_Init+0x254>)
 8002216:	889b      	ldrh	r3, [r3, #4]
 8002218:	f5b3 4f13 	cmp.w	r3, #37632	@ 0x9300
 800221c:	f040 80c8 	bne.w	80023b0 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8002220:	20d3      	movs	r0, #211	@ 0xd3
 8002222:	f7fe fcb1 	bl	8000b88 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8002226:	f7fe fcf7 	bl	8000c18 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 800222a:	f7fe fcf5 	bl	8000c18 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 800222e:	f7fe fcf3 	bl	8000c18 <LCD_RD_DATA>
 8002232:	4603      	mov	r3, r0
 8002234:	461a      	mov	r2, r3
 8002236:	4b65      	ldr	r3, [pc, #404]	@ (80023cc <LCD_Init+0x254>)
 8002238:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 800223a:	4b64      	ldr	r3, [pc, #400]	@ (80023cc <LCD_Init+0x254>)
 800223c:	889b      	ldrh	r3, [r3, #4]
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	b29a      	uxth	r2, r3
 8002242:	4b62      	ldr	r3, [pc, #392]	@ (80023cc <LCD_Init+0x254>)
 8002244:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8002246:	f7fe fce7 	bl	8000c18 <LCD_RD_DATA>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	4b5f      	ldr	r3, [pc, #380]	@ (80023cc <LCD_Init+0x254>)
 8002250:	889b      	ldrh	r3, [r3, #4]
 8002252:	4313      	orrs	r3, r2
 8002254:	b29a      	uxth	r2, r3
 8002256:	4b5d      	ldr	r3, [pc, #372]	@ (80023cc <LCD_Init+0x254>)
 8002258:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 800225a:	4b5c      	ldr	r3, [pc, #368]	@ (80023cc <LCD_Init+0x254>)
 800225c:	889b      	ldrh	r3, [r3, #4]
 800225e:	f249 3241 	movw	r2, #37697	@ 0x9341
 8002262:	4293      	cmp	r3, r2
 8002264:	f000 80a4 	beq.w	80023b0 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8002268:	20bf      	movs	r0, #191	@ 0xbf
 800226a:	f7fe fc8d 	bl	8000b88 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 800226e:	f7fe fcd3 	bl	8000c18 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8002272:	f7fe fcd1 	bl	8000c18 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8002276:	f7fe fccf 	bl	8000c18 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 800227a:	f7fe fccd 	bl	8000c18 <LCD_RD_DATA>
 800227e:	4603      	mov	r3, r0
 8002280:	461a      	mov	r2, r3
 8002282:	4b52      	ldr	r3, [pc, #328]	@ (80023cc <LCD_Init+0x254>)
 8002284:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8002286:	4b51      	ldr	r3, [pc, #324]	@ (80023cc <LCD_Init+0x254>)
 8002288:	889b      	ldrh	r3, [r3, #4]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	b29a      	uxth	r2, r3
 800228e:	4b4f      	ldr	r3, [pc, #316]	@ (80023cc <LCD_Init+0x254>)
 8002290:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8002292:	f7fe fcc1 	bl	8000c18 <LCD_RD_DATA>
 8002296:	4603      	mov	r3, r0
 8002298:	461a      	mov	r2, r3
 800229a:	4b4c      	ldr	r3, [pc, #304]	@ (80023cc <LCD_Init+0x254>)
 800229c:	889b      	ldrh	r3, [r3, #4]
 800229e:	4313      	orrs	r3, r2
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	4b4a      	ldr	r3, [pc, #296]	@ (80023cc <LCD_Init+0x254>)
 80022a4:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 80022a6:	4b49      	ldr	r3, [pc, #292]	@ (80023cc <LCD_Init+0x254>)
 80022a8:	889b      	ldrh	r3, [r3, #4]
 80022aa:	f646 0204 	movw	r2, #26628	@ 0x6804
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d07e      	beq.n	80023b0 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 80022b2:	20d4      	movs	r0, #212	@ 0xd4
 80022b4:	f7fe fc68 	bl	8000b88 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 80022b8:	f7fe fcae 	bl	8000c18 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 80022bc:	f7fe fcac 	bl	8000c18 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 80022c0:	f7fe fcaa 	bl	8000c18 <LCD_RD_DATA>
 80022c4:	4603      	mov	r3, r0
 80022c6:	461a      	mov	r2, r3
 80022c8:	4b40      	ldr	r3, [pc, #256]	@ (80023cc <LCD_Init+0x254>)
 80022ca:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 80022cc:	4b3f      	ldr	r3, [pc, #252]	@ (80023cc <LCD_Init+0x254>)
 80022ce:	889b      	ldrh	r3, [r3, #4]
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	4b3d      	ldr	r3, [pc, #244]	@ (80023cc <LCD_Init+0x254>)
 80022d6:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 80022d8:	f7fe fc9e 	bl	8000c18 <LCD_RD_DATA>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	4b3a      	ldr	r3, [pc, #232]	@ (80023cc <LCD_Init+0x254>)
 80022e2:	889b      	ldrh	r3, [r3, #4]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	4b38      	ldr	r3, [pc, #224]	@ (80023cc <LCD_Init+0x254>)
 80022ea:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 80022ec:	4b37      	ldr	r3, [pc, #220]	@ (80023cc <LCD_Init+0x254>)
 80022ee:	889b      	ldrh	r3, [r3, #4]
 80022f0:	f245 3210 	movw	r2, #21264	@ 0x5310
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d05b      	beq.n	80023b0 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 80022f8:	f44f 405a 	mov.w	r0, #55808	@ 0xda00
 80022fc:	f7fe fc44 	bl	8000b88 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8002300:	f7fe fc8a 	bl	8000c18 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 8002304:	f44f 405b 	mov.w	r0, #56064	@ 0xdb00
 8002308:	f7fe fc3e 	bl	8000b88 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 800230c:	f7fe fc84 	bl	8000c18 <LCD_RD_DATA>
 8002310:	4603      	mov	r3, r0
 8002312:	461a      	mov	r2, r3
 8002314:	4b2d      	ldr	r3, [pc, #180]	@ (80023cc <LCD_Init+0x254>)
 8002316:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8002318:	4b2c      	ldr	r3, [pc, #176]	@ (80023cc <LCD_Init+0x254>)
 800231a:	889b      	ldrh	r3, [r3, #4]
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	b29a      	uxth	r2, r3
 8002320:	4b2a      	ldr	r3, [pc, #168]	@ (80023cc <LCD_Init+0x254>)
 8002322:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8002324:	f44f 405c 	mov.w	r0, #56320	@ 0xdc00
 8002328:	f7fe fc2e 	bl	8000b88 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 800232c:	f7fe fc74 	bl	8000c18 <LCD_RD_DATA>
 8002330:	4603      	mov	r3, r0
 8002332:	461a      	mov	r2, r3
 8002334:	4b25      	ldr	r3, [pc, #148]	@ (80023cc <LCD_Init+0x254>)
 8002336:	889b      	ldrh	r3, [r3, #4]
 8002338:	4313      	orrs	r3, r2
 800233a:	b29a      	uxth	r2, r3
 800233c:	4b23      	ldr	r3, [pc, #140]	@ (80023cc <LCD_Init+0x254>)
 800233e:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8002340:	4b22      	ldr	r3, [pc, #136]	@ (80023cc <LCD_Init+0x254>)
 8002342:	889b      	ldrh	r3, [r3, #4]
 8002344:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002348:	d103      	bne.n	8002352 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 800234a:	4b20      	ldr	r3, [pc, #128]	@ (80023cc <LCD_Init+0x254>)
 800234c:	f245 5210 	movw	r2, #21776	@ 0x5510
 8002350:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8002352:	4b1e      	ldr	r3, [pc, #120]	@ (80023cc <LCD_Init+0x254>)
 8002354:	889b      	ldrh	r3, [r3, #4]
 8002356:	f245 5210 	movw	r2, #21776	@ 0x5510
 800235a:	4293      	cmp	r3, r2
 800235c:	d028      	beq.n	80023b0 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 800235e:	20a1      	movs	r0, #161	@ 0xa1
 8002360:	f7fe fc12 	bl	8000b88 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8002364:	f7fe fc58 	bl	8000c18 <LCD_RD_DATA>
 8002368:	4603      	mov	r3, r0
 800236a:	461a      	mov	r2, r3
 800236c:	4b17      	ldr	r3, [pc, #92]	@ (80023cc <LCD_Init+0x254>)
 800236e:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8002370:	f7fe fc52 	bl	8000c18 <LCD_RD_DATA>
 8002374:	4603      	mov	r3, r0
 8002376:	461a      	mov	r2, r3
 8002378:	4b14      	ldr	r3, [pc, #80]	@ (80023cc <LCD_Init+0x254>)
 800237a:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 800237c:	4b13      	ldr	r3, [pc, #76]	@ (80023cc <LCD_Init+0x254>)
 800237e:	889b      	ldrh	r3, [r3, #4]
 8002380:	021b      	lsls	r3, r3, #8
 8002382:	b29a      	uxth	r2, r3
 8002384:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <LCD_Init+0x254>)
 8002386:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8002388:	f7fe fc46 	bl	8000c18 <LCD_RD_DATA>
 800238c:	4603      	mov	r3, r0
 800238e:	461a      	mov	r2, r3
 8002390:	4b0e      	ldr	r3, [pc, #56]	@ (80023cc <LCD_Init+0x254>)
 8002392:	889b      	ldrh	r3, [r3, #4]
 8002394:	4313      	orrs	r3, r2
 8002396:	b29a      	uxth	r2, r3
 8002398:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <LCD_Init+0x254>)
 800239a:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 800239c:	4b0b      	ldr	r3, [pc, #44]	@ (80023cc <LCD_Init+0x254>)
 800239e:	889b      	ldrh	r3, [r3, #4]
 80023a0:	f245 7261 	movw	r2, #22369	@ 0x5761
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d103      	bne.n	80023b0 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 80023a8:	4b08      	ldr	r3, [pc, #32]	@ (80023cc <LCD_Init+0x254>)
 80023aa:	f641 1263 	movw	r2, #6499	@ 0x1963
 80023ae:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 80023b0:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <LCD_Init+0x254>)
 80023b2:	889b      	ldrh	r3, [r3, #4]
 80023b4:	f249 3241 	movw	r2, #37697	@ 0x9341
 80023b8:	4293      	cmp	r3, r2
 80023ba:	f040 811f 	bne.w	80025fc <LCD_Init+0x484>
 80023be:	e007      	b.n	80023d0 <LCD_Init+0x258>
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40011000 	.word	0x40011000
 80023c8:	40010c00 	.word	0x40010c00
 80023cc:	200000cc 	.word	0x200000cc
			{
		LCD_WR_REG(0xCF);
 80023d0:	20cf      	movs	r0, #207	@ 0xcf
 80023d2:	f7fe fbd9 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80023d6:	2000      	movs	r0, #0
 80023d8:	f7fe fbfa 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 80023dc:	20c1      	movs	r0, #193	@ 0xc1
 80023de:	f7fe fbf7 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 80023e2:	2030      	movs	r0, #48	@ 0x30
 80023e4:	f7fe fbf4 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 80023e8:	20ed      	movs	r0, #237	@ 0xed
 80023ea:	f7fe fbcd 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 80023ee:	2064      	movs	r0, #100	@ 0x64
 80023f0:	f7fe fbee 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80023f4:	2003      	movs	r0, #3
 80023f6:	f7fe fbeb 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 80023fa:	2012      	movs	r0, #18
 80023fc:	f7fe fbe8 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8002400:	2081      	movs	r0, #129	@ 0x81
 8002402:	f7fe fbe5 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 8002406:	20e8      	movs	r0, #232	@ 0xe8
 8002408:	f7fe fbbe 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 800240c:	2085      	movs	r0, #133	@ 0x85
 800240e:	f7fe fbdf 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002412:	2010      	movs	r0, #16
 8002414:	f7fe fbdc 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002418:	207a      	movs	r0, #122	@ 0x7a
 800241a:	f7fe fbd9 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 800241e:	20cb      	movs	r0, #203	@ 0xcb
 8002420:	f7fe fbb2 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8002424:	2039      	movs	r0, #57	@ 0x39
 8002426:	f7fe fbd3 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 800242a:	202c      	movs	r0, #44	@ 0x2c
 800242c:	f7fe fbd0 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002430:	2000      	movs	r0, #0
 8002432:	f7fe fbcd 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002436:	2034      	movs	r0, #52	@ 0x34
 8002438:	f7fe fbca 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800243c:	2002      	movs	r0, #2
 800243e:	f7fe fbc7 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8002442:	20f7      	movs	r0, #247	@ 0xf7
 8002444:	f7fe fba0 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002448:	2020      	movs	r0, #32
 800244a:	f7fe fbc1 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 800244e:	20ea      	movs	r0, #234	@ 0xea
 8002450:	f7fe fb9a 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002454:	2000      	movs	r0, #0
 8002456:	f7fe fbbb 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800245a:	2000      	movs	r0, #0
 800245c:	f7fe fbb8 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8002460:	20c0      	movs	r0, #192	@ 0xc0
 8002462:	f7fe fb91 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8002466:	201b      	movs	r0, #27
 8002468:	f7fe fbb2 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 800246c:	20c1      	movs	r0, #193	@ 0xc1
 800246e:	f7fe fb8b 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8002472:	2001      	movs	r0, #1
 8002474:	f7fe fbac 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8002478:	20c5      	movs	r0, #197	@ 0xc5
 800247a:	f7fe fb85 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 800247e:	2030      	movs	r0, #48	@ 0x30
 8002480:	f7fe fba6 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8002484:	2030      	movs	r0, #48	@ 0x30
 8002486:	f7fe fba3 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 800248a:	20c7      	movs	r0, #199	@ 0xc7
 800248c:	f7fe fb7c 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8002490:	20b7      	movs	r0, #183	@ 0xb7
 8002492:	f7fe fb9d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8002496:	2036      	movs	r0, #54	@ 0x36
 8002498:	f7fe fb76 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 800249c:	2048      	movs	r0, #72	@ 0x48
 800249e:	f7fe fb97 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 80024a2:	203a      	movs	r0, #58	@ 0x3a
 80024a4:	f7fe fb70 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 80024a8:	2055      	movs	r0, #85	@ 0x55
 80024aa:	f7fe fb91 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 80024ae:	20b1      	movs	r0, #177	@ 0xb1
 80024b0:	f7fe fb6a 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80024b4:	2000      	movs	r0, #0
 80024b6:	f7fe fb8b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 80024ba:	201a      	movs	r0, #26
 80024bc:	f7fe fb88 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 80024c0:	20b6      	movs	r0, #182	@ 0xb6
 80024c2:	f7fe fb61 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80024c6:	200a      	movs	r0, #10
 80024c8:	f7fe fb82 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80024cc:	20a2      	movs	r0, #162	@ 0xa2
 80024ce:	f7fe fb7f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80024d2:	20f2      	movs	r0, #242	@ 0xf2
 80024d4:	f7fe fb58 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80024d8:	2000      	movs	r0, #0
 80024da:	f7fe fb79 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 80024de:	2026      	movs	r0, #38	@ 0x26
 80024e0:	f7fe fb52 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80024e4:	2001      	movs	r0, #1
 80024e6:	f7fe fb73 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 80024ea:	20e0      	movs	r0, #224	@ 0xe0
 80024ec:	f7fe fb4c 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 80024f0:	200f      	movs	r0, #15
 80024f2:	f7fe fb6d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 80024f6:	202a      	movs	r0, #42	@ 0x2a
 80024f8:	f7fe fb6a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 80024fc:	2028      	movs	r0, #40	@ 0x28
 80024fe:	f7fe fb67 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8002502:	2008      	movs	r0, #8
 8002504:	f7fe fb64 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8002508:	200e      	movs	r0, #14
 800250a:	f7fe fb61 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 800250e:	2008      	movs	r0, #8
 8002510:	f7fe fb5e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002514:	2054      	movs	r0, #84	@ 0x54
 8002516:	f7fe fb5b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 800251a:	20a9      	movs	r0, #169	@ 0xa9
 800251c:	f7fe fb58 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002520:	2043      	movs	r0, #67	@ 0x43
 8002522:	f7fe fb55 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8002526:	200a      	movs	r0, #10
 8002528:	f7fe fb52 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800252c:	200f      	movs	r0, #15
 800252e:	f7fe fb4f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002532:	2000      	movs	r0, #0
 8002534:	f7fe fb4c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002538:	2000      	movs	r0, #0
 800253a:	f7fe fb49 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800253e:	2000      	movs	r0, #0
 8002540:	f7fe fb46 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002544:	2000      	movs	r0, #0
 8002546:	f7fe fb43 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 800254a:	20e1      	movs	r0, #225	@ 0xe1
 800254c:	f7fe fb1c 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002550:	2000      	movs	r0, #0
 8002552:	f7fe fb3d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8002556:	2015      	movs	r0, #21
 8002558:	f7fe fb3a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800255c:	2017      	movs	r0, #23
 800255e:	f7fe fb37 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8002562:	2007      	movs	r0, #7
 8002564:	f7fe fb34 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002568:	2011      	movs	r0, #17
 800256a:	f7fe fb31 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 800256e:	2006      	movs	r0, #6
 8002570:	f7fe fb2e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8002574:	202b      	movs	r0, #43	@ 0x2b
 8002576:	f7fe fb2b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 800257a:	2056      	movs	r0, #86	@ 0x56
 800257c:	f7fe fb28 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002580:	203c      	movs	r0, #60	@ 0x3c
 8002582:	f7fe fb25 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002586:	2005      	movs	r0, #5
 8002588:	f7fe fb22 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 800258c:	2010      	movs	r0, #16
 800258e:	f7fe fb1f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002592:	200f      	movs	r0, #15
 8002594:	f7fe fb1c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002598:	203f      	movs	r0, #63	@ 0x3f
 800259a:	f7fe fb19 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800259e:	203f      	movs	r0, #63	@ 0x3f
 80025a0:	f7fe fb16 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80025a4:	200f      	movs	r0, #15
 80025a6:	f7fe fb13 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 80025aa:	202b      	movs	r0, #43	@ 0x2b
 80025ac:	f7fe faec 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025b0:	2000      	movs	r0, #0
 80025b2:	f7fe fb0d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025b6:	2000      	movs	r0, #0
 80025b8:	f7fe fb0a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80025bc:	2001      	movs	r0, #1
 80025be:	f7fe fb07 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 80025c2:	203f      	movs	r0, #63	@ 0x3f
 80025c4:	f7fe fb04 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 80025c8:	202a      	movs	r0, #42	@ 0x2a
 80025ca:	f7fe fadd 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7fe fafe 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7fe fafb 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025da:	2000      	movs	r0, #0
 80025dc:	f7fe faf8 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 80025e0:	20ef      	movs	r0, #239	@ 0xef
 80025e2:	f7fe faf5 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 80025e6:	2011      	movs	r0, #17
 80025e8:	f7fe face 	bl	8000b88 <LCD_WR_REG>
		HAL_Delay(120);
 80025ec:	2078      	movs	r0, #120	@ 0x78
 80025ee:	f004 fcc7 	bl	8006f80 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 80025f2:	2029      	movs	r0, #41	@ 0x29
 80025f4:	f7fe fac8 	bl	8000b88 <LCD_WR_REG>
 80025f8:	f003 bcd8 	b.w	8005fac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 80025fc:	4b58      	ldr	r3, [pc, #352]	@ (8002760 <LCD_Init+0x5e8>)
 80025fe:	889b      	ldrh	r3, [r3, #4]
 8002600:	f646 0204 	movw	r2, #26628	@ 0x6804
 8002604:	4293      	cmp	r3, r2
 8002606:	f040 80ad 	bne.w	8002764 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 800260a:	2011      	movs	r0, #17
 800260c:	f7fe fabc 	bl	8000b88 <LCD_WR_REG>
		HAL_Delay(20);
 8002610:	2014      	movs	r0, #20
 8002612:	f004 fcb5 	bl	8006f80 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8002616:	20d0      	movs	r0, #208	@ 0xd0
 8002618:	f7fe fab6 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 800261c:	2007      	movs	r0, #7
 800261e:	f7fe fad7 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8002622:	2042      	movs	r0, #66	@ 0x42
 8002624:	f7fe fad4 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8002628:	201d      	movs	r0, #29
 800262a:	f7fe fad1 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 800262e:	20d1      	movs	r0, #209	@ 0xd1
 8002630:	f7fe faaa 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002634:	2000      	movs	r0, #0
 8002636:	f7fe facb 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 800263a:	201a      	movs	r0, #26
 800263c:	f7fe fac8 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8002640:	2009      	movs	r0, #9
 8002642:	f7fe fac5 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8002646:	20d2      	movs	r0, #210	@ 0xd2
 8002648:	f7fe fa9e 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800264c:	2001      	movs	r0, #1
 800264e:	f7fe fabf 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8002652:	2022      	movs	r0, #34	@ 0x22
 8002654:	f7fe fabc 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8002658:	20c0      	movs	r0, #192	@ 0xc0
 800265a:	f7fe fa95 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 800265e:	2010      	movs	r0, #16
 8002660:	f7fe fab6 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8002664:	203b      	movs	r0, #59	@ 0x3b
 8002666:	f7fe fab3 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800266a:	2000      	movs	r0, #0
 800266c:	f7fe fab0 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002670:	2002      	movs	r0, #2
 8002672:	f7fe faad 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8002676:	2011      	movs	r0, #17
 8002678:	f7fe faaa 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 800267c:	20c5      	movs	r0, #197	@ 0xc5
 800267e:	f7fe fa83 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8002682:	2003      	movs	r0, #3
 8002684:	f7fe faa4 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8002688:	20c8      	movs	r0, #200	@ 0xc8
 800268a:	f7fe fa7d 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800268e:	2000      	movs	r0, #0
 8002690:	f7fe fa9e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002694:	2025      	movs	r0, #37	@ 0x25
 8002696:	f7fe fa9b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 800269a:	2021      	movs	r0, #33	@ 0x21
 800269c:	f7fe fa98 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 80026a0:	2005      	movs	r0, #5
 80026a2:	f7fe fa95 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80026a6:	2000      	movs	r0, #0
 80026a8:	f7fe fa92 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 80026ac:	200a      	movs	r0, #10
 80026ae:	f7fe fa8f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 80026b2:	2065      	movs	r0, #101	@ 0x65
 80026b4:	f7fe fa8c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80026b8:	2025      	movs	r0, #37	@ 0x25
 80026ba:	f7fe fa89 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 80026be:	2077      	movs	r0, #119	@ 0x77
 80026c0:	f7fe fa86 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 80026c4:	2050      	movs	r0, #80	@ 0x50
 80026c6:	f7fe fa83 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 80026ca:	200f      	movs	r0, #15
 80026cc:	f7fe fa80 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80026d0:	2000      	movs	r0, #0
 80026d2:	f7fe fa7d 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 80026d6:	20f8      	movs	r0, #248	@ 0xf8
 80026d8:	f7fe fa56 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80026dc:	2001      	movs	r0, #1
 80026de:	f7fe fa77 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 80026e2:	20fe      	movs	r0, #254	@ 0xfe
 80026e4:	f7fe fa50 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7fe fa71 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 80026ee:	2002      	movs	r0, #2
 80026f0:	f7fe fa6e 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 80026f4:	2020      	movs	r0, #32
 80026f6:	f7fe fa47 	bl	8000b88 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 80026fa:	2036      	movs	r0, #54	@ 0x36
 80026fc:	f7fe fa44 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8002700:	2008      	movs	r0, #8
 8002702:	f7fe fa65 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 8002706:	203a      	movs	r0, #58	@ 0x3a
 8002708:	f7fe fa3e 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 800270c:	2055      	movs	r0, #85	@ 0x55
 800270e:	f7fe fa5f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8002712:	202b      	movs	r0, #43	@ 0x2b
 8002714:	f7fe fa38 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002718:	2000      	movs	r0, #0
 800271a:	f7fe fa59 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800271e:	2000      	movs	r0, #0
 8002720:	f7fe fa56 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002724:	2001      	movs	r0, #1
 8002726:	f7fe fa53 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 800272a:	203f      	movs	r0, #63	@ 0x3f
 800272c:	f7fe fa50 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8002730:	202a      	movs	r0, #42	@ 0x2a
 8002732:	f7fe fa29 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002736:	2000      	movs	r0, #0
 8002738:	f7fe fa4a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800273c:	2000      	movs	r0, #0
 800273e:	f7fe fa47 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002742:	2001      	movs	r0, #1
 8002744:	f7fe fa44 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002748:	20df      	movs	r0, #223	@ 0xdf
 800274a:	f7fe fa41 	bl	8000bd0 <LCD_WR_DATAX>
		HAL_Delay(120);
 800274e:	2078      	movs	r0, #120	@ 0x78
 8002750:	f004 fc16 	bl	8006f80 <HAL_Delay>
		LCD_WR_REG(0X29);
 8002754:	2029      	movs	r0, #41	@ 0x29
 8002756:	f7fe fa17 	bl	8000b88 <LCD_WR_REG>
 800275a:	f003 bc27 	b.w	8005fac <LCD_Init+0x3e34>
 800275e:	bf00      	nop
 8002760:	200000cc 	.word	0x200000cc
	} else if (lcddev.id == 0x5310) {
 8002764:	4b03      	ldr	r3, [pc, #12]	@ (8002774 <LCD_Init+0x5fc>)
 8002766:	889b      	ldrh	r3, [r3, #4]
 8002768:	f245 3210 	movw	r2, #21264	@ 0x5310
 800276c:	4293      	cmp	r3, r2
 800276e:	f040 877c 	bne.w	800366a <LCD_Init+0x14f2>
 8002772:	e001      	b.n	8002778 <LCD_Init+0x600>
 8002774:	200000cc 	.word	0x200000cc
		LCD_WR_REG(0xED);
 8002778:	20ed      	movs	r0, #237	@ 0xed
 800277a:	f7fe fa05 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800277e:	2001      	movs	r0, #1
 8002780:	f7fe fa26 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 8002784:	20fe      	movs	r0, #254	@ 0xfe
 8002786:	f7fe fa23 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 800278a:	20ee      	movs	r0, #238	@ 0xee
 800278c:	f7fe f9fc 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8002790:	20de      	movs	r0, #222	@ 0xde
 8002792:	f7fe fa1d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002796:	2021      	movs	r0, #33	@ 0x21
 8002798:	f7fe fa1a 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 800279c:	20f1      	movs	r0, #241	@ 0xf1
 800279e:	f7fe f9f3 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80027a2:	2001      	movs	r0, #1
 80027a4:	f7fe fa14 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 80027a8:	20df      	movs	r0, #223	@ 0xdf
 80027aa:	f7fe f9ed 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 80027ae:	2010      	movs	r0, #16
 80027b0:	f7fe fa0e 	bl	8000bd0 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80027b4:	20c4      	movs	r0, #196	@ 0xc4
 80027b6:	f7fe f9e7 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 80027ba:	208f      	movs	r0, #143	@ 0x8f
 80027bc:	f7fe fa08 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 80027c0:	20c6      	movs	r0, #198	@ 0xc6
 80027c2:	f7fe f9e1 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80027c6:	2000      	movs	r0, #0
 80027c8:	f7fe fa02 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80027cc:	20e2      	movs	r0, #226	@ 0xe2
 80027ce:	f7fe f9ff 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80027d2:	20e2      	movs	r0, #226	@ 0xe2
 80027d4:	f7fe f9fc 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80027d8:	20e2      	movs	r0, #226	@ 0xe2
 80027da:	f7fe f9f9 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 80027de:	20bf      	movs	r0, #191	@ 0xbf
 80027e0:	f7fe f9d2 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80027e4:	20aa      	movs	r0, #170	@ 0xaa
 80027e6:	f7fe f9f3 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 80027ea:	20b0      	movs	r0, #176	@ 0xb0
 80027ec:	f7fe f9cc 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 80027f0:	200d      	movs	r0, #13
 80027f2:	f7fe f9ed 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f6:	2000      	movs	r0, #0
 80027f8:	f7fe f9ea 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 80027fc:	200d      	movs	r0, #13
 80027fe:	f7fe f9e7 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002802:	2000      	movs	r0, #0
 8002804:	f7fe f9e4 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002808:	2011      	movs	r0, #17
 800280a:	f7fe f9e1 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800280e:	2000      	movs	r0, #0
 8002810:	f7fe f9de 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8002814:	2019      	movs	r0, #25
 8002816:	f7fe f9db 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800281a:	2000      	movs	r0, #0
 800281c:	f7fe f9d8 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002820:	2021      	movs	r0, #33	@ 0x21
 8002822:	f7fe f9d5 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002826:	2000      	movs	r0, #0
 8002828:	f7fe f9d2 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 800282c:	202d      	movs	r0, #45	@ 0x2d
 800282e:	f7fe f9cf 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002832:	2000      	movs	r0, #0
 8002834:	f7fe f9cc 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002838:	203d      	movs	r0, #61	@ 0x3d
 800283a:	f7fe f9c9 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800283e:	2000      	movs	r0, #0
 8002840:	f7fe f9c6 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002844:	205d      	movs	r0, #93	@ 0x5d
 8002846:	f7fe f9c3 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800284a:	2000      	movs	r0, #0
 800284c:	f7fe f9c0 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002850:	205d      	movs	r0, #93	@ 0x5d
 8002852:	f7fe f9bd 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002856:	2000      	movs	r0, #0
 8002858:	f7fe f9ba 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 800285c:	20b1      	movs	r0, #177	@ 0xb1
 800285e:	f7fe f993 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 8002862:	2080      	movs	r0, #128	@ 0x80
 8002864:	f7fe f9b4 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002868:	2000      	movs	r0, #0
 800286a:	f7fe f9b1 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800286e:	208b      	movs	r0, #139	@ 0x8b
 8002870:	f7fe f9ae 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002874:	2000      	movs	r0, #0
 8002876:	f7fe f9ab 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 800287a:	2096      	movs	r0, #150	@ 0x96
 800287c:	f7fe f9a8 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002880:	2000      	movs	r0, #0
 8002882:	f7fe f9a5 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 8002886:	20b2      	movs	r0, #178	@ 0xb2
 8002888:	f7fe f97e 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800288c:	2000      	movs	r0, #0
 800288e:	f7fe f99f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002892:	2000      	movs	r0, #0
 8002894:	f7fe f99c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002898:	2002      	movs	r0, #2
 800289a:	f7fe f999 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800289e:	2000      	movs	r0, #0
 80028a0:	f7fe f996 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80028a4:	2003      	movs	r0, #3
 80028a6:	f7fe f993 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028aa:	2000      	movs	r0, #0
 80028ac:	f7fe f990 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 80028b0:	20b3      	movs	r0, #179	@ 0xb3
 80028b2:	f7fe f969 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f7fe f98a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028bc:	2000      	movs	r0, #0
 80028be:	f7fe f987 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c2:	2000      	movs	r0, #0
 80028c4:	f7fe f984 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c8:	2000      	movs	r0, #0
 80028ca:	f7fe f981 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f7fe f97e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028d4:	2000      	movs	r0, #0
 80028d6:	f7fe f97b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028da:	2000      	movs	r0, #0
 80028dc:	f7fe f978 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e0:	2000      	movs	r0, #0
 80028e2:	f7fe f975 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e6:	2000      	movs	r0, #0
 80028e8:	f7fe f972 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ec:	2000      	movs	r0, #0
 80028ee:	f7fe f96f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f2:	2000      	movs	r0, #0
 80028f4:	f7fe f96c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f8:	2000      	movs	r0, #0
 80028fa:	f7fe f969 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028fe:	2000      	movs	r0, #0
 8002900:	f7fe f966 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002904:	2000      	movs	r0, #0
 8002906:	f7fe f963 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800290a:	2000      	movs	r0, #0
 800290c:	f7fe f960 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002910:	2000      	movs	r0, #0
 8002912:	f7fe f95d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002916:	2000      	movs	r0, #0
 8002918:	f7fe f95a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800291c:	2000      	movs	r0, #0
 800291e:	f7fe f957 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002922:	2000      	movs	r0, #0
 8002924:	f7fe f954 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002928:	2000      	movs	r0, #0
 800292a:	f7fe f951 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800292e:	2000      	movs	r0, #0
 8002930:	f7fe f94e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002934:	2000      	movs	r0, #0
 8002936:	f7fe f94b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800293a:	2000      	movs	r0, #0
 800293c:	f7fe f948 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002940:	2000      	movs	r0, #0
 8002942:	f7fe f945 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8002946:	20b4      	movs	r0, #180	@ 0xb4
 8002948:	f7fe f91e 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 800294c:	208b      	movs	r0, #139	@ 0x8b
 800294e:	f7fe f93f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002952:	2000      	movs	r0, #0
 8002954:	f7fe f93c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002958:	2096      	movs	r0, #150	@ 0x96
 800295a:	f7fe f939 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe f936 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 8002964:	20a1      	movs	r0, #161	@ 0xa1
 8002966:	f7fe f933 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800296a:	2000      	movs	r0, #0
 800296c:	f7fe f930 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8002970:	20b5      	movs	r0, #181	@ 0xb5
 8002972:	f7fe f909 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 8002976:	2002      	movs	r0, #2
 8002978:	f7fe f92a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800297c:	2000      	movs	r0, #0
 800297e:	f7fe f927 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002982:	2003      	movs	r0, #3
 8002984:	f7fe f924 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002988:	2000      	movs	r0, #0
 800298a:	f7fe f921 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 800298e:	2004      	movs	r0, #4
 8002990:	f7fe f91e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002994:	2000      	movs	r0, #0
 8002996:	f7fe f91b 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 800299a:	20b6      	movs	r0, #182	@ 0xb6
 800299c:	f7fe f8f4 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80029a0:	2000      	movs	r0, #0
 80029a2:	f7fe f915 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a6:	2000      	movs	r0, #0
 80029a8:	f7fe f912 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 80029ac:	20b7      	movs	r0, #183	@ 0xb7
 80029ae:	f7fe f8eb 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80029b2:	2000      	movs	r0, #0
 80029b4:	f7fe f90c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f7fe f909 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80029be:	203f      	movs	r0, #63	@ 0x3f
 80029c0:	f7fe f906 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029c4:	2000      	movs	r0, #0
 80029c6:	f7fe f903 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 80029ca:	205e      	movs	r0, #94	@ 0x5e
 80029cc:	f7fe f900 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d0:	2000      	movs	r0, #0
 80029d2:	f7fe f8fd 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80029d6:	2064      	movs	r0, #100	@ 0x64
 80029d8:	f7fe f8fa 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029dc:	2000      	movs	r0, #0
 80029de:	f7fe f8f7 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 80029e2:	208c      	movs	r0, #140	@ 0x8c
 80029e4:	f7fe f8f4 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e8:	2000      	movs	r0, #0
 80029ea:	f7fe f8f1 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 80029ee:	20ac      	movs	r0, #172	@ 0xac
 80029f0:	f7fe f8ee 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f4:	2000      	movs	r0, #0
 80029f6:	f7fe f8eb 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80029fa:	20dc      	movs	r0, #220	@ 0xdc
 80029fc:	f7fe f8e8 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a00:	2000      	movs	r0, #0
 8002a02:	f7fe f8e5 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8002a06:	2070      	movs	r0, #112	@ 0x70
 8002a08:	f7fe f8e2 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f7fe f8df 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8002a12:	2090      	movs	r0, #144	@ 0x90
 8002a14:	f7fe f8dc 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f7fe f8d9 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 8002a1e:	20eb      	movs	r0, #235	@ 0xeb
 8002a20:	f7fe f8d6 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a24:	2000      	movs	r0, #0
 8002a26:	f7fe f8d3 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002a2a:	20dc      	movs	r0, #220	@ 0xdc
 8002a2c:	f7fe f8d0 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a30:	2000      	movs	r0, #0
 8002a32:	f7fe f8cd 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8002a36:	20b8      	movs	r0, #184	@ 0xb8
 8002a38:	f7fe f8a6 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f7fe f8c7 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a42:	2000      	movs	r0, #0
 8002a44:	f7fe f8c4 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7fe f8c1 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f7fe f8be 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7fe f8bb 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f7fe f8b8 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a60:	2000      	movs	r0, #0
 8002a62:	f7fe f8b5 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a66:	2000      	movs	r0, #0
 8002a68:	f7fe f8b2 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 8002a6c:	20ba      	movs	r0, #186	@ 0xba
 8002a6e:	f7fe f88b 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 8002a72:	2024      	movs	r0, #36	@ 0x24
 8002a74:	f7fe f8ac 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f7fe f8a9 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f7fe f8a6 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a84:	2000      	movs	r0, #0
 8002a86:	f7fe f8a3 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8002a8a:	20c1      	movs	r0, #193	@ 0xc1
 8002a8c:	f7fe f87c 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002a90:	2020      	movs	r0, #32
 8002a92:	f7fe f89d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a96:	2000      	movs	r0, #0
 8002a98:	f7fe f89a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002a9c:	2054      	movs	r0, #84	@ 0x54
 8002a9e:	f7fe f897 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f7fe f894 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8002aa8:	20ff      	movs	r0, #255	@ 0xff
 8002aaa:	f7fe f891 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f7fe f88e 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8002ab4:	20c2      	movs	r0, #194	@ 0xc2
 8002ab6:	f7fe f867 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8002aba:	200a      	movs	r0, #10
 8002abc:	f7fe f888 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7fe f885 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002ac6:	2004      	movs	r0, #4
 8002ac8:	f7fe f882 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7fe f87f 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8002ad2:	20c3      	movs	r0, #195	@ 0xc3
 8002ad4:	f7fe f858 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8002ad8:	203c      	movs	r0, #60	@ 0x3c
 8002ada:	f7fe f879 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ade:	2000      	movs	r0, #0
 8002ae0:	f7fe f876 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8002ae4:	203a      	movs	r0, #58	@ 0x3a
 8002ae6:	f7fe f873 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aea:	2000      	movs	r0, #0
 8002aec:	f7fe f870 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8002af0:	2039      	movs	r0, #57	@ 0x39
 8002af2:	f7fe f86d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af6:	2000      	movs	r0, #0
 8002af8:	f7fe f86a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 8002afc:	2037      	movs	r0, #55	@ 0x37
 8002afe:	f7fe f867 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b02:	2000      	movs	r0, #0
 8002b04:	f7fe f864 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002b08:	203c      	movs	r0, #60	@ 0x3c
 8002b0a:	f7fe f861 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f7fe f85e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002b14:	2036      	movs	r0, #54	@ 0x36
 8002b16:	f7fe f85b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f7fe f858 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002b20:	2032      	movs	r0, #50	@ 0x32
 8002b22:	f7fe f855 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b26:	2000      	movs	r0, #0
 8002b28:	f7fe f852 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002b2c:	202f      	movs	r0, #47	@ 0x2f
 8002b2e:	f7fe f84f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7fe f84c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002b38:	202c      	movs	r0, #44	@ 0x2c
 8002b3a:	f7fe f849 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f7fe f846 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002b44:	2029      	movs	r0, #41	@ 0x29
 8002b46:	f7fe f843 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f7fe f840 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002b50:	2026      	movs	r0, #38	@ 0x26
 8002b52:	f7fe f83d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b56:	2000      	movs	r0, #0
 8002b58:	f7fe f83a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002b5c:	2024      	movs	r0, #36	@ 0x24
 8002b5e:	f7fe f837 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7fe f834 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002b68:	2024      	movs	r0, #36	@ 0x24
 8002b6a:	f7fe f831 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f7fe f82e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002b74:	2023      	movs	r0, #35	@ 0x23
 8002b76:	f7fe f82b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7fe f828 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002b80:	203c      	movs	r0, #60	@ 0x3c
 8002b82:	f7fe f825 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b86:	2000      	movs	r0, #0
 8002b88:	f7fe f822 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002b8c:	2036      	movs	r0, #54	@ 0x36
 8002b8e:	f7fe f81f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b92:	2000      	movs	r0, #0
 8002b94:	f7fe f81c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002b98:	2032      	movs	r0, #50	@ 0x32
 8002b9a:	f7fe f819 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f7fe f816 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002ba4:	202f      	movs	r0, #47	@ 0x2f
 8002ba6:	f7fe f813 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002baa:	2000      	movs	r0, #0
 8002bac:	f7fe f810 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002bb0:	202c      	movs	r0, #44	@ 0x2c
 8002bb2:	f7fe f80d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f7fe f80a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002bbc:	2029      	movs	r0, #41	@ 0x29
 8002bbe:	f7fe f807 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f7fe f804 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002bc8:	2026      	movs	r0, #38	@ 0x26
 8002bca:	f7fe f801 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f7fd fffe 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002bd4:	2024      	movs	r0, #36	@ 0x24
 8002bd6:	f7fd fffb 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f7fd fff8 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002be0:	2024      	movs	r0, #36	@ 0x24
 8002be2:	f7fd fff5 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be6:	2000      	movs	r0, #0
 8002be8:	f7fd fff2 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002bec:	2023      	movs	r0, #35	@ 0x23
 8002bee:	f7fd ffef 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f7fd ffec 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8002bf8:	20c4      	movs	r0, #196	@ 0xc4
 8002bfa:	f7fd ffc5 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 8002bfe:	2062      	movs	r0, #98	@ 0x62
 8002c00:	f7fd ffe6 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c04:	2000      	movs	r0, #0
 8002c06:	f7fd ffe3 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002c0a:	2005      	movs	r0, #5
 8002c0c:	f7fd ffe0 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c10:	2000      	movs	r0, #0
 8002c12:	f7fd ffdd 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002c16:	2084      	movs	r0, #132	@ 0x84
 8002c18:	f7fd ffda 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	f7fd ffd7 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8002c22:	20f0      	movs	r0, #240	@ 0xf0
 8002c24:	f7fd ffd4 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f7fd ffd1 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002c2e:	2018      	movs	r0, #24
 8002c30:	f7fd ffce 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c34:	2000      	movs	r0, #0
 8002c36:	f7fd ffcb 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8002c3a:	20a4      	movs	r0, #164	@ 0xa4
 8002c3c:	f7fd ffc8 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c40:	2000      	movs	r0, #0
 8002c42:	f7fd ffc5 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002c46:	2018      	movs	r0, #24
 8002c48:	f7fd ffc2 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f7fd ffbf 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002c52:	2050      	movs	r0, #80	@ 0x50
 8002c54:	f7fd ffbc 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f7fd ffb9 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8002c5e:	200c      	movs	r0, #12
 8002c60:	f7fd ffb6 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c64:	2000      	movs	r0, #0
 8002c66:	f7fd ffb3 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002c6a:	2017      	movs	r0, #23
 8002c6c:	f7fd ffb0 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c70:	2000      	movs	r0, #0
 8002c72:	f7fd ffad 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8002c76:	2095      	movs	r0, #149	@ 0x95
 8002c78:	f7fd ffaa 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f7fd ffa7 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002c82:	20f3      	movs	r0, #243	@ 0xf3
 8002c84:	f7fd ffa4 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f7fd ffa1 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8002c8e:	20e6      	movs	r0, #230	@ 0xe6
 8002c90:	f7fd ff9e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c94:	2000      	movs	r0, #0
 8002c96:	f7fd ff9b 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8002c9a:	20c5      	movs	r0, #197	@ 0xc5
 8002c9c:	f7fd ff74 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002ca0:	2032      	movs	r0, #50	@ 0x32
 8002ca2:	f7fd ff95 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f7fd ff92 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002cac:	2044      	movs	r0, #68	@ 0x44
 8002cae:	f7fd ff8f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f7fd ff8c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002cb8:	2065      	movs	r0, #101	@ 0x65
 8002cba:	f7fd ff89 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	f7fd ff86 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002cc4:	2076      	movs	r0, #118	@ 0x76
 8002cc6:	f7fd ff83 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f7fd ff80 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002cd0:	2088      	movs	r0, #136	@ 0x88
 8002cd2:	f7fd ff7d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f7fd ff7a 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002cdc:	20c6      	movs	r0, #198	@ 0xc6
 8002cde:	f7fd ff53 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002ce2:	2020      	movs	r0, #32
 8002ce4:	f7fd ff74 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce8:	2000      	movs	r0, #0
 8002cea:	f7fd ff71 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002cee:	2017      	movs	r0, #23
 8002cf0:	f7fd ff6e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f7fd ff6b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	f7fd ff68 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d00:	2000      	movs	r0, #0
 8002d02:	f7fd ff65 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8002d06:	20c7      	movs	r0, #199	@ 0xc7
 8002d08:	f7fd ff3e 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f7fd ff5f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d12:	2000      	movs	r0, #0
 8002d14:	f7fd ff5c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f7fd ff59 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d1e:	2000      	movs	r0, #0
 8002d20:	f7fd ff56 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002d24:	20c8      	movs	r0, #200	@ 0xc8
 8002d26:	f7fd ff2f 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f7fd ff50 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d30:	2000      	movs	r0, #0
 8002d32:	f7fd ff4d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f7fd ff4a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f7fd ff47 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002d42:	20c9      	movs	r0, #201	@ 0xc9
 8002d44:	f7fd ff20 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f7fd ff41 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f7fd ff3e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d54:	2000      	movs	r0, #0
 8002d56:	f7fd ff3b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f7fd ff38 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f7fd ff35 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d66:	2000      	movs	r0, #0
 8002d68:	f7fd ff32 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f7fd ff2f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d72:	2000      	movs	r0, #0
 8002d74:	f7fd ff2c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f7fd ff29 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f7fd ff26 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d84:	2000      	movs	r0, #0
 8002d86:	f7fd ff23 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f7fd ff20 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d90:	2000      	movs	r0, #0
 8002d92:	f7fd ff1d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d96:	2000      	movs	r0, #0
 8002d98:	f7fd ff1a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f7fd ff17 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da2:	2000      	movs	r0, #0
 8002da4:	f7fd ff14 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002da8:	20e0      	movs	r0, #224	@ 0xe0
 8002daa:	f7fd feed 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002dae:	2016      	movs	r0, #22
 8002db0:	f7fd ff0e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db4:	2000      	movs	r0, #0
 8002db6:	f7fd ff0b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002dba:	201c      	movs	r0, #28
 8002dbc:	f7fd ff08 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	f7fd ff05 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002dc6:	2021      	movs	r0, #33	@ 0x21
 8002dc8:	f7fd ff02 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f7fd feff 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002dd2:	2036      	movs	r0, #54	@ 0x36
 8002dd4:	f7fd fefc 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7fd fef9 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002dde:	2046      	movs	r0, #70	@ 0x46
 8002de0:	f7fd fef6 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de4:	2000      	movs	r0, #0
 8002de6:	f7fd fef3 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002dea:	2052      	movs	r0, #82	@ 0x52
 8002dec:	f7fd fef0 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df0:	2000      	movs	r0, #0
 8002df2:	f7fd feed 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002df6:	2064      	movs	r0, #100	@ 0x64
 8002df8:	f7fd feea 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7fd fee7 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002e02:	207a      	movs	r0, #122	@ 0x7a
 8002e04:	f7fd fee4 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7fd fee1 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002e0e:	208b      	movs	r0, #139	@ 0x8b
 8002e10:	f7fd fede 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e14:	2000      	movs	r0, #0
 8002e16:	f7fd fedb 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002e1a:	2099      	movs	r0, #153	@ 0x99
 8002e1c:	f7fd fed8 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e20:	2000      	movs	r0, #0
 8002e22:	f7fd fed5 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002e26:	20a8      	movs	r0, #168	@ 0xa8
 8002e28:	f7fd fed2 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f7fd fecf 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002e32:	20b9      	movs	r0, #185	@ 0xb9
 8002e34:	f7fd fecc 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7fd fec9 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002e3e:	20c4      	movs	r0, #196	@ 0xc4
 8002e40:	f7fd fec6 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7fd fec3 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002e4a:	20ca      	movs	r0, #202	@ 0xca
 8002e4c:	f7fd fec0 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e50:	2000      	movs	r0, #0
 8002e52:	f7fd febd 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002e56:	20d2      	movs	r0, #210	@ 0xd2
 8002e58:	f7fd feba 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f7fd feb7 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8002e62:	20d9      	movs	r0, #217	@ 0xd9
 8002e64:	f7fd feb4 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7fd feb1 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002e6e:	20e0      	movs	r0, #224	@ 0xe0
 8002e70:	f7fd feae 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e74:	2000      	movs	r0, #0
 8002e76:	f7fd feab 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002e7a:	20f3      	movs	r0, #243	@ 0xf3
 8002e7c:	f7fd fea8 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7fd fea5 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8002e86:	20e1      	movs	r0, #225	@ 0xe1
 8002e88:	f7fd fe7e 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002e8c:	2016      	movs	r0, #22
 8002e8e:	f7fd fe9f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e92:	2000      	movs	r0, #0
 8002e94:	f7fd fe9c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002e98:	201c      	movs	r0, #28
 8002e9a:	f7fd fe99 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f7fd fe96 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002ea4:	2022      	movs	r0, #34	@ 0x22
 8002ea6:	f7fd fe93 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eaa:	2000      	movs	r0, #0
 8002eac:	f7fd fe90 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002eb0:	2036      	movs	r0, #54	@ 0x36
 8002eb2:	f7fd fe8d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f7fd fe8a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002ebc:	2045      	movs	r0, #69	@ 0x45
 8002ebe:	f7fd fe87 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f7fd fe84 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002ec8:	2052      	movs	r0, #82	@ 0x52
 8002eca:	f7fd fe81 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f7fd fe7e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002ed4:	2064      	movs	r0, #100	@ 0x64
 8002ed6:	f7fd fe7b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eda:	2000      	movs	r0, #0
 8002edc:	f7fd fe78 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002ee0:	207a      	movs	r0, #122	@ 0x7a
 8002ee2:	f7fd fe75 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f7fd fe72 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002eec:	208b      	movs	r0, #139	@ 0x8b
 8002eee:	f7fd fe6f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f7fd fe6c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002ef8:	2099      	movs	r0, #153	@ 0x99
 8002efa:	f7fd fe69 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002efe:	2000      	movs	r0, #0
 8002f00:	f7fd fe66 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002f04:	20a8      	movs	r0, #168	@ 0xa8
 8002f06:	f7fd fe63 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f7fd fe60 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002f10:	20b9      	movs	r0, #185	@ 0xb9
 8002f12:	f7fd fe5d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f16:	2000      	movs	r0, #0
 8002f18:	f7fd fe5a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002f1c:	20c4      	movs	r0, #196	@ 0xc4
 8002f1e:	f7fd fe57 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f7fd fe54 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002f28:	20ca      	movs	r0, #202	@ 0xca
 8002f2a:	f7fd fe51 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f7fd fe4e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002f34:	20d2      	movs	r0, #210	@ 0xd2
 8002f36:	f7fd fe4b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f7fd fe48 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002f40:	20d8      	movs	r0, #216	@ 0xd8
 8002f42:	f7fd fe45 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f46:	2000      	movs	r0, #0
 8002f48:	f7fd fe42 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002f4c:	20e0      	movs	r0, #224	@ 0xe0
 8002f4e:	f7fd fe3f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f52:	2000      	movs	r0, #0
 8002f54:	f7fd fe3c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002f58:	20f3      	movs	r0, #243	@ 0xf3
 8002f5a:	f7fd fe39 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f7fd fe36 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8002f64:	20e2      	movs	r0, #226	@ 0xe2
 8002f66:	f7fd fe0f 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002f6a:	2005      	movs	r0, #5
 8002f6c:	f7fd fe30 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f70:	2000      	movs	r0, #0
 8002f72:	f7fd fe2d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002f76:	200b      	movs	r0, #11
 8002f78:	f7fd fe2a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f7fd fe27 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002f82:	201b      	movs	r0, #27
 8002f84:	f7fd fe24 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f7fd fe21 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002f8e:	2034      	movs	r0, #52	@ 0x34
 8002f90:	f7fd fe1e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f94:	2000      	movs	r0, #0
 8002f96:	f7fd fe1b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002f9a:	2044      	movs	r0, #68	@ 0x44
 8002f9c:	f7fd fe18 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	f7fd fe15 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002fa6:	204f      	movs	r0, #79	@ 0x4f
 8002fa8:	f7fd fe12 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fac:	2000      	movs	r0, #0
 8002fae:	f7fd fe0f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002fb2:	2061      	movs	r0, #97	@ 0x61
 8002fb4:	f7fd fe0c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f7fd fe09 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002fbe:	2079      	movs	r0, #121	@ 0x79
 8002fc0:	f7fd fe06 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f7fd fe03 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002fca:	2088      	movs	r0, #136	@ 0x88
 8002fcc:	f7fd fe00 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	f7fd fdfd 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002fd6:	2097      	movs	r0, #151	@ 0x97
 8002fd8:	f7fd fdfa 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f7fd fdf7 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002fe2:	20a6      	movs	r0, #166	@ 0xa6
 8002fe4:	f7fd fdf4 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f7fd fdf1 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002fee:	20b7      	movs	r0, #183	@ 0xb7
 8002ff0:	f7fd fdee 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f7fd fdeb 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002ffa:	20c2      	movs	r0, #194	@ 0xc2
 8002ffc:	f7fd fde8 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003000:	2000      	movs	r0, #0
 8003002:	f7fd fde5 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8003006:	20c7      	movs	r0, #199	@ 0xc7
 8003008:	f7fd fde2 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800300c:	2000      	movs	r0, #0
 800300e:	f7fd fddf 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8003012:	20d1      	movs	r0, #209	@ 0xd1
 8003014:	f7fd fddc 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003018:	2000      	movs	r0, #0
 800301a:	f7fd fdd9 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 800301e:	20d6      	movs	r0, #214	@ 0xd6
 8003020:	f7fd fdd6 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003024:	2000      	movs	r0, #0
 8003026:	f7fd fdd3 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 800302a:	20dd      	movs	r0, #221	@ 0xdd
 800302c:	f7fd fdd0 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003030:	2000      	movs	r0, #0
 8003032:	f7fd fdcd 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003036:	20f3      	movs	r0, #243	@ 0xf3
 8003038:	f7fd fdca 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800303c:	2000      	movs	r0, #0
 800303e:	f7fd fdc7 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8003042:	20e3      	movs	r0, #227	@ 0xe3
 8003044:	f7fd fda0 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8003048:	2005      	movs	r0, #5
 800304a:	f7fd fdc1 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800304e:	2000      	movs	r0, #0
 8003050:	f7fd fdbe 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8003054:	200a      	movs	r0, #10
 8003056:	f7fd fdbb 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800305a:	2000      	movs	r0, #0
 800305c:	f7fd fdb8 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8003060:	201c      	movs	r0, #28
 8003062:	f7fd fdb5 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003066:	2000      	movs	r0, #0
 8003068:	f7fd fdb2 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 800306c:	2033      	movs	r0, #51	@ 0x33
 800306e:	f7fd fdaf 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003072:	2000      	movs	r0, #0
 8003074:	f7fd fdac 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003078:	2044      	movs	r0, #68	@ 0x44
 800307a:	f7fd fda9 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800307e:	2000      	movs	r0, #0
 8003080:	f7fd fda6 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8003084:	2050      	movs	r0, #80	@ 0x50
 8003086:	f7fd fda3 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800308a:	2000      	movs	r0, #0
 800308c:	f7fd fda0 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8003090:	2062      	movs	r0, #98	@ 0x62
 8003092:	f7fd fd9d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003096:	2000      	movs	r0, #0
 8003098:	f7fd fd9a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 800309c:	2078      	movs	r0, #120	@ 0x78
 800309e:	f7fd fd97 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030a2:	2000      	movs	r0, #0
 80030a4:	f7fd fd94 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80030a8:	2088      	movs	r0, #136	@ 0x88
 80030aa:	f7fd fd91 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ae:	2000      	movs	r0, #0
 80030b0:	f7fd fd8e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 80030b4:	2097      	movs	r0, #151	@ 0x97
 80030b6:	f7fd fd8b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ba:	2000      	movs	r0, #0
 80030bc:	f7fd fd88 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 80030c0:	20a6      	movs	r0, #166	@ 0xa6
 80030c2:	f7fd fd85 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c6:	2000      	movs	r0, #0
 80030c8:	f7fd fd82 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 80030cc:	20b7      	movs	r0, #183	@ 0xb7
 80030ce:	f7fd fd7f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030d2:	2000      	movs	r0, #0
 80030d4:	f7fd fd7c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 80030d8:	20c2      	movs	r0, #194	@ 0xc2
 80030da:	f7fd fd79 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030de:	2000      	movs	r0, #0
 80030e0:	f7fd fd76 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 80030e4:	20c7      	movs	r0, #199	@ 0xc7
 80030e6:	f7fd fd73 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7fd fd70 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 80030f0:	20d1      	movs	r0, #209	@ 0xd1
 80030f2:	f7fd fd6d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f6:	2000      	movs	r0, #0
 80030f8:	f7fd fd6a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 80030fc:	20d5      	movs	r0, #213	@ 0xd5
 80030fe:	f7fd fd67 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003102:	2000      	movs	r0, #0
 8003104:	f7fd fd64 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8003108:	20dd      	movs	r0, #221	@ 0xdd
 800310a:	f7fd fd61 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800310e:	2000      	movs	r0, #0
 8003110:	f7fd fd5e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003114:	20f3      	movs	r0, #243	@ 0xf3
 8003116:	f7fd fd5b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800311a:	2000      	movs	r0, #0
 800311c:	f7fd fd58 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8003120:	20e4      	movs	r0, #228	@ 0xe4
 8003122:	f7fd fd31 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8003126:	2001      	movs	r0, #1
 8003128:	f7fd fd52 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800312c:	2000      	movs	r0, #0
 800312e:	f7fd fd4f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8003132:	2001      	movs	r0, #1
 8003134:	f7fd fd4c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003138:	2000      	movs	r0, #0
 800313a:	f7fd fd49 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800313e:	2002      	movs	r0, #2
 8003140:	f7fd fd46 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003144:	2000      	movs	r0, #0
 8003146:	f7fd fd43 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 800314a:	202a      	movs	r0, #42	@ 0x2a
 800314c:	f7fd fd40 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003150:	2000      	movs	r0, #0
 8003152:	f7fd fd3d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8003156:	203c      	movs	r0, #60	@ 0x3c
 8003158:	f7fd fd3a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800315c:	2000      	movs	r0, #0
 800315e:	f7fd fd37 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8003162:	204b      	movs	r0, #75	@ 0x4b
 8003164:	f7fd fd34 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003168:	2000      	movs	r0, #0
 800316a:	f7fd fd31 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800316e:	205d      	movs	r0, #93	@ 0x5d
 8003170:	f7fd fd2e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003174:	2000      	movs	r0, #0
 8003176:	f7fd fd2b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 800317a:	2074      	movs	r0, #116	@ 0x74
 800317c:	f7fd fd28 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003180:	2000      	movs	r0, #0
 8003182:	f7fd fd25 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8003186:	2084      	movs	r0, #132	@ 0x84
 8003188:	f7fd fd22 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800318c:	2000      	movs	r0, #0
 800318e:	f7fd fd1f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8003192:	2093      	movs	r0, #147	@ 0x93
 8003194:	f7fd fd1c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003198:	2000      	movs	r0, #0
 800319a:	f7fd fd19 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800319e:	20a2      	movs	r0, #162	@ 0xa2
 80031a0:	f7fd fd16 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031a4:	2000      	movs	r0, #0
 80031a6:	f7fd fd13 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 80031aa:	20b3      	movs	r0, #179	@ 0xb3
 80031ac:	f7fd fd10 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031b0:	2000      	movs	r0, #0
 80031b2:	f7fd fd0d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 80031b6:	20be      	movs	r0, #190	@ 0xbe
 80031b8:	f7fd fd0a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031bc:	2000      	movs	r0, #0
 80031be:	f7fd fd07 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80031c2:	20c4      	movs	r0, #196	@ 0xc4
 80031c4:	f7fd fd04 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c8:	2000      	movs	r0, #0
 80031ca:	f7fd fd01 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 80031ce:	20cd      	movs	r0, #205	@ 0xcd
 80031d0:	f7fd fcfe 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7fd fcfb 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80031da:	20d3      	movs	r0, #211	@ 0xd3
 80031dc:	f7fd fcf8 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031e0:	2000      	movs	r0, #0
 80031e2:	f7fd fcf5 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80031e6:	20dd      	movs	r0, #221	@ 0xdd
 80031e8:	f7fd fcf2 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ec:	2000      	movs	r0, #0
 80031ee:	f7fd fcef 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80031f2:	20f3      	movs	r0, #243	@ 0xf3
 80031f4:	f7fd fcec 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031f8:	2000      	movs	r0, #0
 80031fa:	f7fd fce9 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 80031fe:	20e5      	movs	r0, #229	@ 0xe5
 8003200:	f7fd fcc2 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003204:	2000      	movs	r0, #0
 8003206:	f7fd fce3 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800320a:	2000      	movs	r0, #0
 800320c:	f7fd fce0 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003210:	2000      	movs	r0, #0
 8003212:	f7fd fcdd 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003216:	2000      	movs	r0, #0
 8003218:	f7fd fcda 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800321c:	2002      	movs	r0, #2
 800321e:	f7fd fcd7 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003222:	2000      	movs	r0, #0
 8003224:	f7fd fcd4 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003228:	2029      	movs	r0, #41	@ 0x29
 800322a:	f7fd fcd1 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800322e:	2000      	movs	r0, #0
 8003230:	f7fd fcce 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8003234:	203c      	movs	r0, #60	@ 0x3c
 8003236:	f7fd fccb 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800323a:	2000      	movs	r0, #0
 800323c:	f7fd fcc8 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8003240:	204b      	movs	r0, #75	@ 0x4b
 8003242:	f7fd fcc5 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003246:	2000      	movs	r0, #0
 8003248:	f7fd fcc2 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800324c:	205d      	movs	r0, #93	@ 0x5d
 800324e:	f7fd fcbf 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003252:	2000      	movs	r0, #0
 8003254:	f7fd fcbc 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8003258:	2074      	movs	r0, #116	@ 0x74
 800325a:	f7fd fcb9 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800325e:	2000      	movs	r0, #0
 8003260:	f7fd fcb6 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8003264:	2084      	movs	r0, #132	@ 0x84
 8003266:	f7fd fcb3 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800326a:	2000      	movs	r0, #0
 800326c:	f7fd fcb0 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8003270:	2093      	movs	r0, #147	@ 0x93
 8003272:	f7fd fcad 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003276:	2000      	movs	r0, #0
 8003278:	f7fd fcaa 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800327c:	20a2      	movs	r0, #162	@ 0xa2
 800327e:	f7fd fca7 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003282:	2000      	movs	r0, #0
 8003284:	f7fd fca4 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8003288:	20b3      	movs	r0, #179	@ 0xb3
 800328a:	f7fd fca1 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800328e:	2000      	movs	r0, #0
 8003290:	f7fd fc9e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8003294:	20be      	movs	r0, #190	@ 0xbe
 8003296:	f7fd fc9b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800329a:	2000      	movs	r0, #0
 800329c:	f7fd fc98 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80032a0:	20c4      	movs	r0, #196	@ 0xc4
 80032a2:	f7fd fc95 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a6:	2000      	movs	r0, #0
 80032a8:	f7fd fc92 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 80032ac:	20cd      	movs	r0, #205	@ 0xcd
 80032ae:	f7fd fc8f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032b2:	2000      	movs	r0, #0
 80032b4:	f7fd fc8c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80032b8:	20d3      	movs	r0, #211	@ 0xd3
 80032ba:	f7fd fc89 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032be:	2000      	movs	r0, #0
 80032c0:	f7fd fc86 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80032c4:	20dc      	movs	r0, #220	@ 0xdc
 80032c6:	f7fd fc83 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ca:	2000      	movs	r0, #0
 80032cc:	f7fd fc80 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80032d0:	20f3      	movs	r0, #243	@ 0xf3
 80032d2:	f7fd fc7d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d6:	2000      	movs	r0, #0
 80032d8:	f7fd fc7a 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 80032dc:	20e6      	movs	r0, #230	@ 0xe6
 80032de:	f7fd fc53 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 80032e2:	2011      	movs	r0, #17
 80032e4:	f7fd fc74 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e8:	2000      	movs	r0, #0
 80032ea:	f7fd fc71 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80032ee:	2034      	movs	r0, #52	@ 0x34
 80032f0:	f7fd fc6e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032f4:	2000      	movs	r0, #0
 80032f6:	f7fd fc6b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80032fa:	2056      	movs	r0, #86	@ 0x56
 80032fc:	f7fd fc68 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003300:	2000      	movs	r0, #0
 8003302:	f7fd fc65 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003306:	2076      	movs	r0, #118	@ 0x76
 8003308:	f7fd fc62 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800330c:	2000      	movs	r0, #0
 800330e:	f7fd fc5f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003312:	2077      	movs	r0, #119	@ 0x77
 8003314:	f7fd fc5c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003318:	2000      	movs	r0, #0
 800331a:	f7fd fc59 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800331e:	2066      	movs	r0, #102	@ 0x66
 8003320:	f7fd fc56 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003324:	2000      	movs	r0, #0
 8003326:	f7fd fc53 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800332a:	2088      	movs	r0, #136	@ 0x88
 800332c:	f7fd fc50 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003330:	2000      	movs	r0, #0
 8003332:	f7fd fc4d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003336:	2099      	movs	r0, #153	@ 0x99
 8003338:	f7fd fc4a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800333c:	2000      	movs	r0, #0
 800333e:	f7fd fc47 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003342:	20bb      	movs	r0, #187	@ 0xbb
 8003344:	f7fd fc44 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003348:	2000      	movs	r0, #0
 800334a:	f7fd fc41 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800334e:	2099      	movs	r0, #153	@ 0x99
 8003350:	f7fd fc3e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003354:	2000      	movs	r0, #0
 8003356:	f7fd fc3b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800335a:	2066      	movs	r0, #102	@ 0x66
 800335c:	f7fd fc38 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003360:	2000      	movs	r0, #0
 8003362:	f7fd fc35 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003366:	2055      	movs	r0, #85	@ 0x55
 8003368:	f7fd fc32 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800336c:	2000      	movs	r0, #0
 800336e:	f7fd fc2f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003372:	2055      	movs	r0, #85	@ 0x55
 8003374:	f7fd fc2c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003378:	2000      	movs	r0, #0
 800337a:	f7fd fc29 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800337e:	2045      	movs	r0, #69	@ 0x45
 8003380:	f7fd fc26 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003384:	2000      	movs	r0, #0
 8003386:	f7fd fc23 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 800338a:	2043      	movs	r0, #67	@ 0x43
 800338c:	f7fd fc20 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003390:	2000      	movs	r0, #0
 8003392:	f7fd fc1d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003396:	2044      	movs	r0, #68	@ 0x44
 8003398:	f7fd fc1a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800339c:	2000      	movs	r0, #0
 800339e:	f7fd fc17 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 80033a2:	20e7      	movs	r0, #231	@ 0xe7
 80033a4:	f7fd fbf0 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 80033a8:	2032      	movs	r0, #50	@ 0x32
 80033aa:	f7fd fc11 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ae:	2000      	movs	r0, #0
 80033b0:	f7fd fc0e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80033b4:	2055      	movs	r0, #85	@ 0x55
 80033b6:	f7fd fc0b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ba:	2000      	movs	r0, #0
 80033bc:	f7fd fc08 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80033c0:	2076      	movs	r0, #118	@ 0x76
 80033c2:	f7fd fc05 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033c6:	2000      	movs	r0, #0
 80033c8:	f7fd fc02 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80033cc:	2066      	movs	r0, #102	@ 0x66
 80033ce:	f7fd fbff 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033d2:	2000      	movs	r0, #0
 80033d4:	f7fd fbfc 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80033d8:	2067      	movs	r0, #103	@ 0x67
 80033da:	f7fd fbf9 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033de:	2000      	movs	r0, #0
 80033e0:	f7fd fbf6 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80033e4:	2067      	movs	r0, #103	@ 0x67
 80033e6:	f7fd fbf3 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ea:	2000      	movs	r0, #0
 80033ec:	f7fd fbf0 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80033f0:	2087      	movs	r0, #135	@ 0x87
 80033f2:	f7fd fbed 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033f6:	2000      	movs	r0, #0
 80033f8:	f7fd fbea 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80033fc:	2099      	movs	r0, #153	@ 0x99
 80033fe:	f7fd fbe7 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003402:	2000      	movs	r0, #0
 8003404:	f7fd fbe4 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003408:	20bb      	movs	r0, #187	@ 0xbb
 800340a:	f7fd fbe1 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800340e:	2000      	movs	r0, #0
 8003410:	f7fd fbde 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003414:	2099      	movs	r0, #153	@ 0x99
 8003416:	f7fd fbdb 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800341a:	2000      	movs	r0, #0
 800341c:	f7fd fbd8 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003420:	2077      	movs	r0, #119	@ 0x77
 8003422:	f7fd fbd5 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003426:	2000      	movs	r0, #0
 8003428:	f7fd fbd2 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800342c:	2044      	movs	r0, #68	@ 0x44
 800342e:	f7fd fbcf 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003432:	2000      	movs	r0, #0
 8003434:	f7fd fbcc 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003438:	2056      	movs	r0, #86	@ 0x56
 800343a:	f7fd fbc9 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800343e:	2000      	movs	r0, #0
 8003440:	f7fd fbc6 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8003444:	2023      	movs	r0, #35	@ 0x23
 8003446:	f7fd fbc3 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800344a:	2000      	movs	r0, #0
 800344c:	f7fd fbc0 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003450:	2033      	movs	r0, #51	@ 0x33
 8003452:	f7fd fbbd 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003456:	2000      	movs	r0, #0
 8003458:	f7fd fbba 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800345c:	2045      	movs	r0, #69	@ 0x45
 800345e:	f7fd fbb7 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003462:	2000      	movs	r0, #0
 8003464:	f7fd fbb4 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8003468:	20e8      	movs	r0, #232	@ 0xe8
 800346a:	f7fd fb8d 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800346e:	2000      	movs	r0, #0
 8003470:	f7fd fbae 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003474:	2000      	movs	r0, #0
 8003476:	f7fd fbab 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800347a:	2099      	movs	r0, #153	@ 0x99
 800347c:	f7fd fba8 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003480:	2000      	movs	r0, #0
 8003482:	f7fd fba5 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003486:	2087      	movs	r0, #135	@ 0x87
 8003488:	f7fd fba2 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800348c:	2000      	movs	r0, #0
 800348e:	f7fd fb9f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003492:	2088      	movs	r0, #136	@ 0x88
 8003494:	f7fd fb9c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003498:	2000      	movs	r0, #0
 800349a:	f7fd fb99 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 800349e:	2077      	movs	r0, #119	@ 0x77
 80034a0:	f7fd fb96 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034a4:	2000      	movs	r0, #0
 80034a6:	f7fd fb93 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80034aa:	2066      	movs	r0, #102	@ 0x66
 80034ac:	f7fd fb90 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034b0:	2000      	movs	r0, #0
 80034b2:	f7fd fb8d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80034b6:	2088      	movs	r0, #136	@ 0x88
 80034b8:	f7fd fb8a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034bc:	2000      	movs	r0, #0
 80034be:	f7fd fb87 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 80034c2:	20aa      	movs	r0, #170	@ 0xaa
 80034c4:	f7fd fb84 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034c8:	2000      	movs	r0, #0
 80034ca:	f7fd fb81 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80034ce:	20bb      	movs	r0, #187	@ 0xbb
 80034d0:	f7fd fb7e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034d4:	2000      	movs	r0, #0
 80034d6:	f7fd fb7b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80034da:	2099      	movs	r0, #153	@ 0x99
 80034dc:	f7fd fb78 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034e0:	2000      	movs	r0, #0
 80034e2:	f7fd fb75 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80034e6:	2066      	movs	r0, #102	@ 0x66
 80034e8:	f7fd fb72 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034ec:	2000      	movs	r0, #0
 80034ee:	f7fd fb6f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80034f2:	2055      	movs	r0, #85	@ 0x55
 80034f4:	f7fd fb6c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034f8:	2000      	movs	r0, #0
 80034fa:	f7fd fb69 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80034fe:	2055      	movs	r0, #85	@ 0x55
 8003500:	f7fd fb66 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003504:	2000      	movs	r0, #0
 8003506:	f7fd fb63 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800350a:	2044      	movs	r0, #68	@ 0x44
 800350c:	f7fd fb60 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003510:	2000      	movs	r0, #0
 8003512:	f7fd fb5d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003516:	2044      	movs	r0, #68	@ 0x44
 8003518:	f7fd fb5a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800351c:	2000      	movs	r0, #0
 800351e:	f7fd fb57 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003522:	2055      	movs	r0, #85	@ 0x55
 8003524:	f7fd fb54 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003528:	2000      	movs	r0, #0
 800352a:	f7fd fb51 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 800352e:	20e9      	movs	r0, #233	@ 0xe9
 8003530:	f7fd fb2a 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003534:	20aa      	movs	r0, #170	@ 0xaa
 8003536:	f7fd fb4b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800353a:	2000      	movs	r0, #0
 800353c:	f7fd fb48 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003540:	2000      	movs	r0, #0
 8003542:	f7fd fb45 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003546:	2000      	movs	r0, #0
 8003548:	f7fd fb42 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 800354c:	2000      	movs	r0, #0
 800354e:	f7fd fb1b 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003552:	20aa      	movs	r0, #170	@ 0xaa
 8003554:	f7fd fb3c 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8003558:	20cf      	movs	r0, #207	@ 0xcf
 800355a:	f7fd fb15 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800355e:	2000      	movs	r0, #0
 8003560:	f7fd fb36 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003564:	2000      	movs	r0, #0
 8003566:	f7fd fb33 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800356a:	2000      	movs	r0, #0
 800356c:	f7fd fb30 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003570:	2000      	movs	r0, #0
 8003572:	f7fd fb2d 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003576:	2000      	movs	r0, #0
 8003578:	f7fd fb2a 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800357c:	2000      	movs	r0, #0
 800357e:	f7fd fb27 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003582:	2000      	movs	r0, #0
 8003584:	f7fd fb24 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003588:	2000      	movs	r0, #0
 800358a:	f7fd fb21 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800358e:	2000      	movs	r0, #0
 8003590:	f7fd fb1e 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003594:	2000      	movs	r0, #0
 8003596:	f7fd fb1b 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800359a:	2000      	movs	r0, #0
 800359c:	f7fd fb18 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035a0:	2000      	movs	r0, #0
 80035a2:	f7fd fb15 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035a6:	2000      	movs	r0, #0
 80035a8:	f7fd fb12 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035ac:	2000      	movs	r0, #0
 80035ae:	f7fd fb0f 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035b2:	2000      	movs	r0, #0
 80035b4:	f7fd fb0c 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035b8:	2000      	movs	r0, #0
 80035ba:	f7fd fb09 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035be:	2000      	movs	r0, #0
 80035c0:	f7fd fb06 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 80035c4:	20f0      	movs	r0, #240	@ 0xf0
 80035c6:	f7fd fadf 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80035ca:	2000      	movs	r0, #0
 80035cc:	f7fd fb00 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80035d0:	2050      	movs	r0, #80	@ 0x50
 80035d2:	f7fd fafd 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035d6:	2000      	movs	r0, #0
 80035d8:	f7fd fafa 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035dc:	2000      	movs	r0, #0
 80035de:	f7fd faf7 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035e2:	2000      	movs	r0, #0
 80035e4:	f7fd faf4 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 80035e8:	20f3      	movs	r0, #243	@ 0xf3
 80035ea:	f7fd facd 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80035ee:	2000      	movs	r0, #0
 80035f0:	f7fd faee 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 80035f4:	20f9      	movs	r0, #249	@ 0xf9
 80035f6:	f7fd fac7 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 80035fa:	2006      	movs	r0, #6
 80035fc:	f7fd fae8 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8003600:	2010      	movs	r0, #16
 8003602:	f7fd fae5 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003606:	2029      	movs	r0, #41	@ 0x29
 8003608:	f7fd fae2 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800360c:	2000      	movs	r0, #0
 800360e:	f7fd fadf 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8003612:	203a      	movs	r0, #58	@ 0x3a
 8003614:	f7fd fab8 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8003618:	2055      	movs	r0, #85	@ 0x55
 800361a:	f7fd fad9 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 800361e:	2011      	movs	r0, #17
 8003620:	f7fd fab2 	bl	8000b88 <LCD_WR_REG>
		HAL_Delay(100);
 8003624:	2064      	movs	r0, #100	@ 0x64
 8003626:	f003 fcab 	bl	8006f80 <HAL_Delay>
		LCD_WR_REG(0x29);
 800362a:	2029      	movs	r0, #41	@ 0x29
 800362c:	f7fd faac 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003630:	2035      	movs	r0, #53	@ 0x35
 8003632:	f7fd faa9 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003636:	2000      	movs	r0, #0
 8003638:	f7fd faca 	bl	8000bd0 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 800363c:	2051      	movs	r0, #81	@ 0x51
 800363e:	f7fd faa3 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8003642:	20ff      	movs	r0, #255	@ 0xff
 8003644:	f7fd fac4 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003648:	2053      	movs	r0, #83	@ 0x53
 800364a:	f7fd fa9d 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 800364e:	202c      	movs	r0, #44	@ 0x2c
 8003650:	f7fd fabe 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8003654:	2055      	movs	r0, #85	@ 0x55
 8003656:	f7fd fa97 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 800365a:	2082      	movs	r0, #130	@ 0x82
 800365c:	f7fd fab8 	bl	8000bd0 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8003660:	202c      	movs	r0, #44	@ 0x2c
 8003662:	f7fd fa91 	bl	8000b88 <LCD_WR_REG>
 8003666:	f002 bca1 	b.w	8005fac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 800366a:	4b04      	ldr	r3, [pc, #16]	@ (800367c <LCD_Init+0x1504>)
 800366c:	889b      	ldrh	r3, [r3, #4]
 800366e:	f245 5210 	movw	r2, #21776	@ 0x5510
 8003672:	4293      	cmp	r3, r2
 8003674:	f040 8782 	bne.w	800457c <LCD_Init+0x2404>
 8003678:	e002      	b.n	8003680 <LCD_Init+0x1508>
 800367a:	bf00      	nop
 800367c:	200000cc 	.word	0x200000cc
		LCD_WriteReg(0xF000, 0x55);
 8003680:	2155      	movs	r1, #85	@ 0x55
 8003682:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8003686:	f7fd fb0b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800368a:	21aa      	movs	r1, #170	@ 0xaa
 800368c:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8003690:	f7fd fb06 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8003694:	2152      	movs	r1, #82	@ 0x52
 8003696:	f24f 0002 	movw	r0, #61442	@ 0xf002
 800369a:	f7fd fb01 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 800369e:	2108      	movs	r1, #8
 80036a0:	f24f 0003 	movw	r0, #61443	@ 0xf003
 80036a4:	f7fd fafc 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 80036a8:	2101      	movs	r1, #1
 80036aa:	f24f 0004 	movw	r0, #61444	@ 0xf004
 80036ae:	f7fd faf7 	bl	8000ca0 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 80036b2:	210d      	movs	r1, #13
 80036b4:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 80036b8:	f7fd faf2 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 80036bc:	210d      	movs	r1, #13
 80036be:	f24b 0001 	movw	r0, #45057	@ 0xb001
 80036c2:	f7fd faed 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 80036c6:	210d      	movs	r1, #13
 80036c8:	f24b 0002 	movw	r0, #45058	@ 0xb002
 80036cc:	f7fd fae8 	bl	8000ca0 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 80036d0:	2134      	movs	r1, #52	@ 0x34
 80036d2:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 80036d6:	f7fd fae3 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 80036da:	2134      	movs	r1, #52	@ 0x34
 80036dc:	f24b 6001 	movw	r0, #46593	@ 0xb601
 80036e0:	f7fd fade 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 80036e4:	2134      	movs	r1, #52	@ 0x34
 80036e6:	f24b 6002 	movw	r0, #46594	@ 0xb602
 80036ea:	f7fd fad9 	bl	8000ca0 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 80036ee:	210d      	movs	r1, #13
 80036f0:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 80036f4:	f7fd fad4 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 80036f8:	210d      	movs	r1, #13
 80036fa:	f24b 1001 	movw	r0, #45313	@ 0xb101
 80036fe:	f7fd facf 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 8003702:	210d      	movs	r1, #13
 8003704:	f24b 1002 	movw	r0, #45314	@ 0xb102
 8003708:	f7fd faca 	bl	8000ca0 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 800370c:	2134      	movs	r1, #52	@ 0x34
 800370e:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8003712:	f7fd fac5 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8003716:	2134      	movs	r1, #52	@ 0x34
 8003718:	f24b 7001 	movw	r0, #46849	@ 0xb701
 800371c:	f7fd fac0 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8003720:	2134      	movs	r1, #52	@ 0x34
 8003722:	f24b 7002 	movw	r0, #46850	@ 0xb702
 8003726:	f7fd fabb 	bl	8000ca0 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 800372a:	2100      	movs	r1, #0
 800372c:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 8003730:	f7fd fab6 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8003734:	2100      	movs	r1, #0
 8003736:	f24b 2001 	movw	r0, #45569	@ 0xb201
 800373a:	f7fd fab1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 800373e:	2100      	movs	r1, #0
 8003740:	f24b 2002 	movw	r0, #45570	@ 0xb202
 8003744:	f7fd faac 	bl	8000ca0 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8003748:	2124      	movs	r1, #36	@ 0x24
 800374a:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 800374e:	f7fd faa7 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 8003752:	2124      	movs	r1, #36	@ 0x24
 8003754:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8003758:	f7fd faa2 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 800375c:	2124      	movs	r1, #36	@ 0x24
 800375e:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8003762:	f7fd fa9d 	bl	8000ca0 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 8003766:	2101      	movs	r1, #1
 8003768:	f44f 403f 	mov.w	r0, #48896	@ 0xbf00
 800376c:	f7fd fa98 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8003770:	210f      	movs	r1, #15
 8003772:	f44f 4033 	mov.w	r0, #45824	@ 0xb300
 8003776:	f7fd fa93 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 800377a:	210f      	movs	r1, #15
 800377c:	f24b 3001 	movw	r0, #45825	@ 0xb301
 8003780:	f7fd fa8e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 8003784:	210f      	movs	r1, #15
 8003786:	f24b 3002 	movw	r0, #45826	@ 0xb302
 800378a:	f7fd fa89 	bl	8000ca0 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 800378e:	2134      	movs	r1, #52	@ 0x34
 8003790:	f44f 4039 	mov.w	r0, #47360	@ 0xb900
 8003794:	f7fd fa84 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8003798:	2134      	movs	r1, #52	@ 0x34
 800379a:	f64b 1001 	movw	r0, #47361	@ 0xb901
 800379e:	f7fd fa7f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 80037a2:	2134      	movs	r1, #52	@ 0x34
 80037a4:	f64b 1002 	movw	r0, #47362	@ 0xb902
 80037a8:	f7fd fa7a 	bl	8000ca0 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 80037ac:	2108      	movs	r1, #8
 80037ae:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 80037b2:	f7fd fa75 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 80037b6:	2108      	movs	r1, #8
 80037b8:	f24b 5001 	movw	r0, #46337	@ 0xb501
 80037bc:	f7fd fa70 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 80037c0:	2108      	movs	r1, #8
 80037c2:	f24b 5002 	movw	r0, #46338	@ 0xb502
 80037c6:	f7fd fa6b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 80037ca:	2103      	movs	r1, #3
 80037cc:	f44f 4042 	mov.w	r0, #49664	@ 0xc200
 80037d0:	f7fd fa66 	bl	8000ca0 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 80037d4:	2124      	movs	r1, #36	@ 0x24
 80037d6:	f44f 403a 	mov.w	r0, #47616	@ 0xba00
 80037da:	f7fd fa61 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 80037de:	2124      	movs	r1, #36	@ 0x24
 80037e0:	f64b 2001 	movw	r0, #47617	@ 0xba01
 80037e4:	f7fd fa5c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 80037e8:	2124      	movs	r1, #36	@ 0x24
 80037ea:	f64b 2002 	movw	r0, #47618	@ 0xba02
 80037ee:	f7fd fa57 	bl	8000ca0 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 80037f2:	2100      	movs	r1, #0
 80037f4:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 80037f8:	f7fd fa52 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 80037fc:	2178      	movs	r1, #120	@ 0x78
 80037fe:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 8003802:	f7fd fa4d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8003806:	2100      	movs	r1, #0
 8003808:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 800380c:	f7fd fa48 	bl	8000ca0 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8003810:	2100      	movs	r1, #0
 8003812:	f44f 403d 	mov.w	r0, #48384	@ 0xbd00
 8003816:	f7fd fa43 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 800381a:	2178      	movs	r1, #120	@ 0x78
 800381c:	f64b 5001 	movw	r0, #48385	@ 0xbd01
 8003820:	f7fd fa3e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 8003824:	2100      	movs	r1, #0
 8003826:	f64b 5002 	movw	r0, #48386	@ 0xbd02
 800382a:	f7fd fa39 	bl	8000ca0 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 800382e:	2100      	movs	r1, #0
 8003830:	f44f 403e 	mov.w	r0, #48640	@ 0xbe00
 8003834:	f7fd fa34 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003838:	2164      	movs	r1, #100	@ 0x64
 800383a:	f64b 6001 	movw	r0, #48641	@ 0xbe01
 800383e:	f7fd fa2f 	bl	8000ca0 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 8003842:	2100      	movs	r1, #0
 8003844:	f44f 4051 	mov.w	r0, #53504	@ 0xd100
 8003848:	f7fd fa2a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 800384c:	2133      	movs	r1, #51	@ 0x33
 800384e:	f24d 1001 	movw	r0, #53505	@ 0xd101
 8003852:	f7fd fa25 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 8003856:	2100      	movs	r1, #0
 8003858:	f24d 1002 	movw	r0, #53506	@ 0xd102
 800385c:	f7fd fa20 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8003860:	2134      	movs	r1, #52	@ 0x34
 8003862:	f24d 1003 	movw	r0, #53507	@ 0xd103
 8003866:	f7fd fa1b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 800386a:	2100      	movs	r1, #0
 800386c:	f24d 1004 	movw	r0, #53508	@ 0xd104
 8003870:	f7fd fa16 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 8003874:	213a      	movs	r1, #58	@ 0x3a
 8003876:	f24d 1005 	movw	r0, #53509	@ 0xd105
 800387a:	f7fd fa11 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 800387e:	2100      	movs	r1, #0
 8003880:	f24d 1006 	movw	r0, #53510	@ 0xd106
 8003884:	f7fd fa0c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8003888:	214a      	movs	r1, #74	@ 0x4a
 800388a:	f24d 1007 	movw	r0, #53511	@ 0xd107
 800388e:	f7fd fa07 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 8003892:	2100      	movs	r1, #0
 8003894:	f24d 1008 	movw	r0, #53512	@ 0xd108
 8003898:	f7fd fa02 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 800389c:	215c      	movs	r1, #92	@ 0x5c
 800389e:	f24d 1009 	movw	r0, #53513	@ 0xd109
 80038a2:	f7fd f9fd 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 80038a6:	2100      	movs	r1, #0
 80038a8:	f24d 100a 	movw	r0, #53514	@ 0xd10a
 80038ac:	f7fd f9f8 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 80038b0:	2181      	movs	r1, #129	@ 0x81
 80038b2:	f24d 100b 	movw	r0, #53515	@ 0xd10b
 80038b6:	f7fd f9f3 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 80038ba:	2100      	movs	r1, #0
 80038bc:	f24d 100c 	movw	r0, #53516	@ 0xd10c
 80038c0:	f7fd f9ee 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 80038c4:	21a6      	movs	r1, #166	@ 0xa6
 80038c6:	f24d 100d 	movw	r0, #53517	@ 0xd10d
 80038ca:	f7fd f9e9 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 80038ce:	2100      	movs	r1, #0
 80038d0:	f24d 100e 	movw	r0, #53518	@ 0xd10e
 80038d4:	f7fd f9e4 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 80038d8:	21e5      	movs	r1, #229	@ 0xe5
 80038da:	f24d 100f 	movw	r0, #53519	@ 0xd10f
 80038de:	f7fd f9df 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 80038e2:	2101      	movs	r1, #1
 80038e4:	f24d 1010 	movw	r0, #53520	@ 0xd110
 80038e8:	f7fd f9da 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 80038ec:	2113      	movs	r1, #19
 80038ee:	f24d 1011 	movw	r0, #53521	@ 0xd111
 80038f2:	f7fd f9d5 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 80038f6:	2101      	movs	r1, #1
 80038f8:	f24d 1012 	movw	r0, #53522	@ 0xd112
 80038fc:	f7fd f9d0 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8003900:	2154      	movs	r1, #84	@ 0x54
 8003902:	f24d 1013 	movw	r0, #53523	@ 0xd113
 8003906:	f7fd f9cb 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 800390a:	2101      	movs	r1, #1
 800390c:	f24d 1014 	movw	r0, #53524	@ 0xd114
 8003910:	f7fd f9c6 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8003914:	2182      	movs	r1, #130	@ 0x82
 8003916:	f24d 1015 	movw	r0, #53525	@ 0xd115
 800391a:	f7fd f9c1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 800391e:	2101      	movs	r1, #1
 8003920:	f24d 1016 	movw	r0, #53526	@ 0xd116
 8003924:	f7fd f9bc 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8003928:	21ca      	movs	r1, #202	@ 0xca
 800392a:	f24d 1017 	movw	r0, #53527	@ 0xd117
 800392e:	f7fd f9b7 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8003932:	2102      	movs	r1, #2
 8003934:	f24d 1018 	movw	r0, #53528	@ 0xd118
 8003938:	f7fd f9b2 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 800393c:	2100      	movs	r1, #0
 800393e:	f24d 1019 	movw	r0, #53529	@ 0xd119
 8003942:	f7fd f9ad 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 8003946:	2102      	movs	r1, #2
 8003948:	f24d 101a 	movw	r0, #53530	@ 0xd11a
 800394c:	f7fd f9a8 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8003950:	2101      	movs	r1, #1
 8003952:	f24d 101b 	movw	r0, #53531	@ 0xd11b
 8003956:	f7fd f9a3 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 800395a:	2102      	movs	r1, #2
 800395c:	f24d 101c 	movw	r0, #53532	@ 0xd11c
 8003960:	f7fd f99e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 8003964:	2134      	movs	r1, #52	@ 0x34
 8003966:	f24d 101d 	movw	r0, #53533	@ 0xd11d
 800396a:	f7fd f999 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 800396e:	2102      	movs	r1, #2
 8003970:	f24d 101e 	movw	r0, #53534	@ 0xd11e
 8003974:	f7fd f994 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8003978:	2167      	movs	r1, #103	@ 0x67
 800397a:	f24d 101f 	movw	r0, #53535	@ 0xd11f
 800397e:	f7fd f98f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 8003982:	2102      	movs	r1, #2
 8003984:	f24d 1020 	movw	r0, #53536	@ 0xd120
 8003988:	f7fd f98a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 800398c:	2184      	movs	r1, #132	@ 0x84
 800398e:	f24d 1021 	movw	r0, #53537	@ 0xd121
 8003992:	f7fd f985 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 8003996:	2102      	movs	r1, #2
 8003998:	f24d 1022 	movw	r0, #53538	@ 0xd122
 800399c:	f7fd f980 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 80039a0:	21a4      	movs	r1, #164	@ 0xa4
 80039a2:	f24d 1023 	movw	r0, #53539	@ 0xd123
 80039a6:	f7fd f97b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 80039aa:	2102      	movs	r1, #2
 80039ac:	f24d 1024 	movw	r0, #53540	@ 0xd124
 80039b0:	f7fd f976 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 80039b4:	21b7      	movs	r1, #183	@ 0xb7
 80039b6:	f24d 1025 	movw	r0, #53541	@ 0xd125
 80039ba:	f7fd f971 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 80039be:	2102      	movs	r1, #2
 80039c0:	f24d 1026 	movw	r0, #53542	@ 0xd126
 80039c4:	f7fd f96c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 80039c8:	21cf      	movs	r1, #207	@ 0xcf
 80039ca:	f24d 1027 	movw	r0, #53543	@ 0xd127
 80039ce:	f7fd f967 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 80039d2:	2102      	movs	r1, #2
 80039d4:	f24d 1028 	movw	r0, #53544	@ 0xd128
 80039d8:	f7fd f962 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 80039dc:	21de      	movs	r1, #222	@ 0xde
 80039de:	f24d 1029 	movw	r0, #53545	@ 0xd129
 80039e2:	f7fd f95d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 80039e6:	2102      	movs	r1, #2
 80039e8:	f24d 102a 	movw	r0, #53546	@ 0xd12a
 80039ec:	f7fd f958 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 80039f0:	21f2      	movs	r1, #242	@ 0xf2
 80039f2:	f24d 102b 	movw	r0, #53547	@ 0xd12b
 80039f6:	f7fd f953 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 80039fa:	2102      	movs	r1, #2
 80039fc:	f24d 102c 	movw	r0, #53548	@ 0xd12c
 8003a00:	f7fd f94e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 8003a04:	21fe      	movs	r1, #254	@ 0xfe
 8003a06:	f24d 102d 	movw	r0, #53549	@ 0xd12d
 8003a0a:	f7fd f949 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 8003a0e:	2103      	movs	r1, #3
 8003a10:	f24d 102e 	movw	r0, #53550	@ 0xd12e
 8003a14:	f7fd f944 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8003a18:	2110      	movs	r1, #16
 8003a1a:	f24d 102f 	movw	r0, #53551	@ 0xd12f
 8003a1e:	f7fd f93f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8003a22:	2103      	movs	r1, #3
 8003a24:	f24d 1030 	movw	r0, #53552	@ 0xd130
 8003a28:	f7fd f93a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 8003a2c:	2133      	movs	r1, #51	@ 0x33
 8003a2e:	f24d 1031 	movw	r0, #53553	@ 0xd131
 8003a32:	f7fd f935 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8003a36:	2103      	movs	r1, #3
 8003a38:	f24d 1032 	movw	r0, #53554	@ 0xd132
 8003a3c:	f7fd f930 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8003a40:	216d      	movs	r1, #109	@ 0x6d
 8003a42:	f24d 1033 	movw	r0, #53555	@ 0xd133
 8003a46:	f7fd f92b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	f44f 4052 	mov.w	r0, #53760	@ 0xd200
 8003a50:	f7fd f926 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 8003a54:	2133      	movs	r1, #51	@ 0x33
 8003a56:	f24d 2001 	movw	r0, #53761	@ 0xd201
 8003a5a:	f7fd f921 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 8003a5e:	2100      	movs	r1, #0
 8003a60:	f24d 2002 	movw	r0, #53762	@ 0xd202
 8003a64:	f7fd f91c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8003a68:	2134      	movs	r1, #52	@ 0x34
 8003a6a:	f24d 2003 	movw	r0, #53763	@ 0xd203
 8003a6e:	f7fd f917 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 8003a72:	2100      	movs	r1, #0
 8003a74:	f24d 2004 	movw	r0, #53764	@ 0xd204
 8003a78:	f7fd f912 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 8003a7c:	213a      	movs	r1, #58	@ 0x3a
 8003a7e:	f24d 2005 	movw	r0, #53765	@ 0xd205
 8003a82:	f7fd f90d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 8003a86:	2100      	movs	r1, #0
 8003a88:	f24d 2006 	movw	r0, #53766	@ 0xd206
 8003a8c:	f7fd f908 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8003a90:	214a      	movs	r1, #74	@ 0x4a
 8003a92:	f24d 2007 	movw	r0, #53767	@ 0xd207
 8003a96:	f7fd f903 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	f24d 2008 	movw	r0, #53768	@ 0xd208
 8003aa0:	f7fd f8fe 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 8003aa4:	215c      	movs	r1, #92	@ 0x5c
 8003aa6:	f24d 2009 	movw	r0, #53769	@ 0xd209
 8003aaa:	f7fd f8f9 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 8003aae:	2100      	movs	r1, #0
 8003ab0:	f24d 200a 	movw	r0, #53770	@ 0xd20a
 8003ab4:	f7fd f8f4 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8003ab8:	2181      	movs	r1, #129	@ 0x81
 8003aba:	f24d 200b 	movw	r0, #53771	@ 0xd20b
 8003abe:	f7fd f8ef 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	f24d 200c 	movw	r0, #53772	@ 0xd20c
 8003ac8:	f7fd f8ea 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 8003acc:	21a6      	movs	r1, #166	@ 0xa6
 8003ace:	f24d 200d 	movw	r0, #53773	@ 0xd20d
 8003ad2:	f7fd f8e5 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	f24d 200e 	movw	r0, #53774	@ 0xd20e
 8003adc:	f7fd f8e0 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8003ae0:	21e5      	movs	r1, #229	@ 0xe5
 8003ae2:	f24d 200f 	movw	r0, #53775	@ 0xd20f
 8003ae6:	f7fd f8db 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 8003aea:	2101      	movs	r1, #1
 8003aec:	f24d 2010 	movw	r0, #53776	@ 0xd210
 8003af0:	f7fd f8d6 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8003af4:	2113      	movs	r1, #19
 8003af6:	f24d 2011 	movw	r0, #53777	@ 0xd211
 8003afa:	f7fd f8d1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 8003afe:	2101      	movs	r1, #1
 8003b00:	f24d 2012 	movw	r0, #53778	@ 0xd212
 8003b04:	f7fd f8cc 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8003b08:	2154      	movs	r1, #84	@ 0x54
 8003b0a:	f24d 2013 	movw	r0, #53779	@ 0xd213
 8003b0e:	f7fd f8c7 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8003b12:	2101      	movs	r1, #1
 8003b14:	f24d 2014 	movw	r0, #53780	@ 0xd214
 8003b18:	f7fd f8c2 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 8003b1c:	2182      	movs	r1, #130	@ 0x82
 8003b1e:	f24d 2015 	movw	r0, #53781	@ 0xd215
 8003b22:	f7fd f8bd 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8003b26:	2101      	movs	r1, #1
 8003b28:	f24d 2016 	movw	r0, #53782	@ 0xd216
 8003b2c:	f7fd f8b8 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003b30:	21ca      	movs	r1, #202	@ 0xca
 8003b32:	f24d 2017 	movw	r0, #53783	@ 0xd217
 8003b36:	f7fd f8b3 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 8003b3a:	2102      	movs	r1, #2
 8003b3c:	f24d 2018 	movw	r0, #53784	@ 0xd218
 8003b40:	f7fd f8ae 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8003b44:	2100      	movs	r1, #0
 8003b46:	f24d 2019 	movw	r0, #53785	@ 0xd219
 8003b4a:	f7fd f8a9 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 8003b4e:	2102      	movs	r1, #2
 8003b50:	f24d 201a 	movw	r0, #53786	@ 0xd21a
 8003b54:	f7fd f8a4 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003b58:	2101      	movs	r1, #1
 8003b5a:	f24d 201b 	movw	r0, #53787	@ 0xd21b
 8003b5e:	f7fd f89f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8003b62:	2102      	movs	r1, #2
 8003b64:	f24d 201c 	movw	r0, #53788	@ 0xd21c
 8003b68:	f7fd f89a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 8003b6c:	2134      	movs	r1, #52	@ 0x34
 8003b6e:	f24d 201d 	movw	r0, #53789	@ 0xd21d
 8003b72:	f7fd f895 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8003b76:	2102      	movs	r1, #2
 8003b78:	f24d 201e 	movw	r0, #53790	@ 0xd21e
 8003b7c:	f7fd f890 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8003b80:	2167      	movs	r1, #103	@ 0x67
 8003b82:	f24d 201f 	movw	r0, #53791	@ 0xd21f
 8003b86:	f7fd f88b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8003b8a:	2102      	movs	r1, #2
 8003b8c:	f24d 2020 	movw	r0, #53792	@ 0xd220
 8003b90:	f7fd f886 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8003b94:	2184      	movs	r1, #132	@ 0x84
 8003b96:	f24d 2021 	movw	r0, #53793	@ 0xd221
 8003b9a:	f7fd f881 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 8003b9e:	2102      	movs	r1, #2
 8003ba0:	f24d 2022 	movw	r0, #53794	@ 0xd222
 8003ba4:	f7fd f87c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8003ba8:	21a4      	movs	r1, #164	@ 0xa4
 8003baa:	f24d 2023 	movw	r0, #53795	@ 0xd223
 8003bae:	f7fd f877 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8003bb2:	2102      	movs	r1, #2
 8003bb4:	f24d 2024 	movw	r0, #53796	@ 0xd224
 8003bb8:	f7fd f872 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 8003bbc:	21b7      	movs	r1, #183	@ 0xb7
 8003bbe:	f24d 2025 	movw	r0, #53797	@ 0xd225
 8003bc2:	f7fd f86d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8003bc6:	2102      	movs	r1, #2
 8003bc8:	f24d 2026 	movw	r0, #53798	@ 0xd226
 8003bcc:	f7fd f868 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8003bd0:	21cf      	movs	r1, #207	@ 0xcf
 8003bd2:	f24d 2027 	movw	r0, #53799	@ 0xd227
 8003bd6:	f7fd f863 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 8003bda:	2102      	movs	r1, #2
 8003bdc:	f24d 2028 	movw	r0, #53800	@ 0xd228
 8003be0:	f7fd f85e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8003be4:	21de      	movs	r1, #222	@ 0xde
 8003be6:	f24d 2029 	movw	r0, #53801	@ 0xd229
 8003bea:	f7fd f859 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 8003bee:	2102      	movs	r1, #2
 8003bf0:	f24d 202a 	movw	r0, #53802	@ 0xd22a
 8003bf4:	f7fd f854 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8003bf8:	21f2      	movs	r1, #242	@ 0xf2
 8003bfa:	f24d 202b 	movw	r0, #53803	@ 0xd22b
 8003bfe:	f7fd f84f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8003c02:	2102      	movs	r1, #2
 8003c04:	f24d 202c 	movw	r0, #53804	@ 0xd22c
 8003c08:	f7fd f84a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 8003c0c:	21fe      	movs	r1, #254	@ 0xfe
 8003c0e:	f24d 202d 	movw	r0, #53805	@ 0xd22d
 8003c12:	f7fd f845 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8003c16:	2103      	movs	r1, #3
 8003c18:	f24d 202e 	movw	r0, #53806	@ 0xd22e
 8003c1c:	f7fd f840 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8003c20:	2110      	movs	r1, #16
 8003c22:	f24d 202f 	movw	r0, #53807	@ 0xd22f
 8003c26:	f7fd f83b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8003c2a:	2103      	movs	r1, #3
 8003c2c:	f24d 2030 	movw	r0, #53808	@ 0xd230
 8003c30:	f7fd f836 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003c34:	2133      	movs	r1, #51	@ 0x33
 8003c36:	f24d 2031 	movw	r0, #53809	@ 0xd231
 8003c3a:	f7fd f831 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8003c3e:	2103      	movs	r1, #3
 8003c40:	f24d 2032 	movw	r0, #53810	@ 0xd232
 8003c44:	f7fd f82c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003c48:	216d      	movs	r1, #109	@ 0x6d
 8003c4a:	f24d 2033 	movw	r0, #53811	@ 0xd233
 8003c4e:	f7fd f827 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8003c52:	2100      	movs	r1, #0
 8003c54:	f44f 4053 	mov.w	r0, #54016	@ 0xd300
 8003c58:	f7fd f822 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8003c5c:	2133      	movs	r1, #51	@ 0x33
 8003c5e:	f24d 3001 	movw	r0, #54017	@ 0xd301
 8003c62:	f7fd f81d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8003c66:	2100      	movs	r1, #0
 8003c68:	f24d 3002 	movw	r0, #54018	@ 0xd302
 8003c6c:	f7fd f818 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8003c70:	2134      	movs	r1, #52	@ 0x34
 8003c72:	f24d 3003 	movw	r0, #54019	@ 0xd303
 8003c76:	f7fd f813 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	f24d 3004 	movw	r0, #54020	@ 0xd304
 8003c80:	f7fd f80e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8003c84:	213a      	movs	r1, #58	@ 0x3a
 8003c86:	f24d 3005 	movw	r0, #54021	@ 0xd305
 8003c8a:	f7fd f809 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8003c8e:	2100      	movs	r1, #0
 8003c90:	f24d 3006 	movw	r0, #54022	@ 0xd306
 8003c94:	f7fd f804 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003c98:	214a      	movs	r1, #74	@ 0x4a
 8003c9a:	f24d 3007 	movw	r0, #54023	@ 0xd307
 8003c9e:	f7fc ffff 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	f24d 3008 	movw	r0, #54024	@ 0xd308
 8003ca8:	f7fc fffa 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8003cac:	215c      	movs	r1, #92	@ 0x5c
 8003cae:	f24d 3009 	movw	r0, #54025	@ 0xd309
 8003cb2:	f7fc fff5 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	f24d 300a 	movw	r0, #54026	@ 0xd30a
 8003cbc:	f7fc fff0 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003cc0:	2181      	movs	r1, #129	@ 0x81
 8003cc2:	f24d 300b 	movw	r0, #54027	@ 0xd30b
 8003cc6:	f7fc ffeb 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8003cca:	2100      	movs	r1, #0
 8003ccc:	f24d 300c 	movw	r0, #54028	@ 0xd30c
 8003cd0:	f7fc ffe6 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003cd4:	21a6      	movs	r1, #166	@ 0xa6
 8003cd6:	f24d 300d 	movw	r0, #54029	@ 0xd30d
 8003cda:	f7fc ffe1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8003cde:	2100      	movs	r1, #0
 8003ce0:	f24d 300e 	movw	r0, #54030	@ 0xd30e
 8003ce4:	f7fc ffdc 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003ce8:	21e5      	movs	r1, #229	@ 0xe5
 8003cea:	f24d 300f 	movw	r0, #54031	@ 0xd30f
 8003cee:	f7fc ffd7 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	f24d 3010 	movw	r0, #54032	@ 0xd310
 8003cf8:	f7fc ffd2 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8003cfc:	2113      	movs	r1, #19
 8003cfe:	f24d 3011 	movw	r0, #54033	@ 0xd311
 8003d02:	f7fc ffcd 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8003d06:	2101      	movs	r1, #1
 8003d08:	f24d 3012 	movw	r0, #54034	@ 0xd312
 8003d0c:	f7fc ffc8 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003d10:	2154      	movs	r1, #84	@ 0x54
 8003d12:	f24d 3013 	movw	r0, #54035	@ 0xd313
 8003d16:	f7fc ffc3 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	f24d 3014 	movw	r0, #54036	@ 0xd314
 8003d20:	f7fc ffbe 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003d24:	2182      	movs	r1, #130	@ 0x82
 8003d26:	f24d 3015 	movw	r0, #54037	@ 0xd315
 8003d2a:	f7fc ffb9 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8003d2e:	2101      	movs	r1, #1
 8003d30:	f24d 3016 	movw	r0, #54038	@ 0xd316
 8003d34:	f7fc ffb4 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003d38:	21ca      	movs	r1, #202	@ 0xca
 8003d3a:	f24d 3017 	movw	r0, #54039	@ 0xd317
 8003d3e:	f7fc ffaf 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003d42:	2102      	movs	r1, #2
 8003d44:	f24d 3018 	movw	r0, #54040	@ 0xd318
 8003d48:	f7fc ffaa 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	f24d 3019 	movw	r0, #54041	@ 0xd319
 8003d52:	f7fc ffa5 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003d56:	2102      	movs	r1, #2
 8003d58:	f24d 301a 	movw	r0, #54042	@ 0xd31a
 8003d5c:	f7fc ffa0 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003d60:	2101      	movs	r1, #1
 8003d62:	f24d 301b 	movw	r0, #54043	@ 0xd31b
 8003d66:	f7fc ff9b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003d6a:	2102      	movs	r1, #2
 8003d6c:	f24d 301c 	movw	r0, #54044	@ 0xd31c
 8003d70:	f7fc ff96 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003d74:	2134      	movs	r1, #52	@ 0x34
 8003d76:	f24d 301d 	movw	r0, #54045	@ 0xd31d
 8003d7a:	f7fc ff91 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003d7e:	2102      	movs	r1, #2
 8003d80:	f24d 301e 	movw	r0, #54046	@ 0xd31e
 8003d84:	f7fc ff8c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003d88:	2167      	movs	r1, #103	@ 0x67
 8003d8a:	f24d 301f 	movw	r0, #54047	@ 0xd31f
 8003d8e:	f7fc ff87 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003d92:	2102      	movs	r1, #2
 8003d94:	f24d 3020 	movw	r0, #54048	@ 0xd320
 8003d98:	f7fc ff82 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003d9c:	2184      	movs	r1, #132	@ 0x84
 8003d9e:	f24d 3021 	movw	r0, #54049	@ 0xd321
 8003da2:	f7fc ff7d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003da6:	2102      	movs	r1, #2
 8003da8:	f24d 3022 	movw	r0, #54050	@ 0xd322
 8003dac:	f7fc ff78 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003db0:	21a4      	movs	r1, #164	@ 0xa4
 8003db2:	f24d 3023 	movw	r0, #54051	@ 0xd323
 8003db6:	f7fc ff73 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003dba:	2102      	movs	r1, #2
 8003dbc:	f24d 3024 	movw	r0, #54052	@ 0xd324
 8003dc0:	f7fc ff6e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003dc4:	21b7      	movs	r1, #183	@ 0xb7
 8003dc6:	f24d 3025 	movw	r0, #54053	@ 0xd325
 8003dca:	f7fc ff69 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003dce:	2102      	movs	r1, #2
 8003dd0:	f24d 3026 	movw	r0, #54054	@ 0xd326
 8003dd4:	f7fc ff64 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003dd8:	21cf      	movs	r1, #207	@ 0xcf
 8003dda:	f24d 3027 	movw	r0, #54055	@ 0xd327
 8003dde:	f7fc ff5f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003de2:	2102      	movs	r1, #2
 8003de4:	f24d 3028 	movw	r0, #54056	@ 0xd328
 8003de8:	f7fc ff5a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003dec:	21de      	movs	r1, #222	@ 0xde
 8003dee:	f24d 3029 	movw	r0, #54057	@ 0xd329
 8003df2:	f7fc ff55 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003df6:	2102      	movs	r1, #2
 8003df8:	f24d 302a 	movw	r0, #54058	@ 0xd32a
 8003dfc:	f7fc ff50 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003e00:	21f2      	movs	r1, #242	@ 0xf2
 8003e02:	f24d 302b 	movw	r0, #54059	@ 0xd32b
 8003e06:	f7fc ff4b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003e0a:	2102      	movs	r1, #2
 8003e0c:	f24d 302c 	movw	r0, #54060	@ 0xd32c
 8003e10:	f7fc ff46 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003e14:	21fe      	movs	r1, #254	@ 0xfe
 8003e16:	f24d 302d 	movw	r0, #54061	@ 0xd32d
 8003e1a:	f7fc ff41 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8003e1e:	2103      	movs	r1, #3
 8003e20:	f24d 302e 	movw	r0, #54062	@ 0xd32e
 8003e24:	f7fc ff3c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003e28:	2110      	movs	r1, #16
 8003e2a:	f24d 302f 	movw	r0, #54063	@ 0xd32f
 8003e2e:	f7fc ff37 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003e32:	2103      	movs	r1, #3
 8003e34:	f24d 3030 	movw	r0, #54064	@ 0xd330
 8003e38:	f7fc ff32 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8003e3c:	2133      	movs	r1, #51	@ 0x33
 8003e3e:	f24d 3031 	movw	r0, #54065	@ 0xd331
 8003e42:	f7fc ff2d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003e46:	2103      	movs	r1, #3
 8003e48:	f24d 3032 	movw	r0, #54066	@ 0xd332
 8003e4c:	f7fc ff28 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003e50:	216d      	movs	r1, #109	@ 0x6d
 8003e52:	f24d 3033 	movw	r0, #54067	@ 0xd333
 8003e56:	f7fc ff23 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	f44f 4054 	mov.w	r0, #54272	@ 0xd400
 8003e60:	f7fc ff1e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8003e64:	2133      	movs	r1, #51	@ 0x33
 8003e66:	f24d 4001 	movw	r0, #54273	@ 0xd401
 8003e6a:	f7fc ff19 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003e6e:	2100      	movs	r1, #0
 8003e70:	f24d 4002 	movw	r0, #54274	@ 0xd402
 8003e74:	f7fc ff14 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003e78:	2134      	movs	r1, #52	@ 0x34
 8003e7a:	f24d 4003 	movw	r0, #54275	@ 0xd403
 8003e7e:	f7fc ff0f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8003e82:	2100      	movs	r1, #0
 8003e84:	f24d 4004 	movw	r0, #54276	@ 0xd404
 8003e88:	f7fc ff0a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003e8c:	213a      	movs	r1, #58	@ 0x3a
 8003e8e:	f24d 4005 	movw	r0, #54277	@ 0xd405
 8003e92:	f7fc ff05 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8003e96:	2100      	movs	r1, #0
 8003e98:	f24d 4006 	movw	r0, #54278	@ 0xd406
 8003e9c:	f7fc ff00 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003ea0:	214a      	movs	r1, #74	@ 0x4a
 8003ea2:	f24d 4007 	movw	r0, #54279	@ 0xd407
 8003ea6:	f7fc fefb 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003eaa:	2100      	movs	r1, #0
 8003eac:	f24d 4008 	movw	r0, #54280	@ 0xd408
 8003eb0:	f7fc fef6 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003eb4:	215c      	movs	r1, #92	@ 0x5c
 8003eb6:	f24d 4009 	movw	r0, #54281	@ 0xd409
 8003eba:	f7fc fef1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	f24d 400a 	movw	r0, #54282	@ 0xd40a
 8003ec4:	f7fc feec 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003ec8:	2181      	movs	r1, #129	@ 0x81
 8003eca:	f24d 400b 	movw	r0, #54283	@ 0xd40b
 8003ece:	f7fc fee7 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	f24d 400c 	movw	r0, #54284	@ 0xd40c
 8003ed8:	f7fc fee2 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003edc:	21a6      	movs	r1, #166	@ 0xa6
 8003ede:	f24d 400d 	movw	r0, #54285	@ 0xd40d
 8003ee2:	f7fc fedd 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	f24d 400e 	movw	r0, #54286	@ 0xd40e
 8003eec:	f7fc fed8 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003ef0:	21e5      	movs	r1, #229	@ 0xe5
 8003ef2:	f24d 400f 	movw	r0, #54287	@ 0xd40f
 8003ef6:	f7fc fed3 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003efa:	2101      	movs	r1, #1
 8003efc:	f24d 4010 	movw	r0, #54288	@ 0xd410
 8003f00:	f7fc fece 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003f04:	2113      	movs	r1, #19
 8003f06:	f24d 4011 	movw	r0, #54289	@ 0xd411
 8003f0a:	f7fc fec9 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8003f0e:	2101      	movs	r1, #1
 8003f10:	f24d 4012 	movw	r0, #54290	@ 0xd412
 8003f14:	f7fc fec4 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003f18:	2154      	movs	r1, #84	@ 0x54
 8003f1a:	f24d 4013 	movw	r0, #54291	@ 0xd413
 8003f1e:	f7fc febf 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003f22:	2101      	movs	r1, #1
 8003f24:	f24d 4014 	movw	r0, #54292	@ 0xd414
 8003f28:	f7fc feba 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8003f2c:	2182      	movs	r1, #130	@ 0x82
 8003f2e:	f24d 4015 	movw	r0, #54293	@ 0xd415
 8003f32:	f7fc feb5 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003f36:	2101      	movs	r1, #1
 8003f38:	f24d 4016 	movw	r0, #54294	@ 0xd416
 8003f3c:	f7fc feb0 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003f40:	21ca      	movs	r1, #202	@ 0xca
 8003f42:	f24d 4017 	movw	r0, #54295	@ 0xd417
 8003f46:	f7fc feab 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8003f4a:	2102      	movs	r1, #2
 8003f4c:	f24d 4018 	movw	r0, #54296	@ 0xd418
 8003f50:	f7fc fea6 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003f54:	2100      	movs	r1, #0
 8003f56:	f24d 4019 	movw	r0, #54297	@ 0xd419
 8003f5a:	f7fc fea1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8003f5e:	2102      	movs	r1, #2
 8003f60:	f24d 401a 	movw	r0, #54298	@ 0xd41a
 8003f64:	f7fc fe9c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003f68:	2101      	movs	r1, #1
 8003f6a:	f24d 401b 	movw	r0, #54299	@ 0xd41b
 8003f6e:	f7fc fe97 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003f72:	2102      	movs	r1, #2
 8003f74:	f24d 401c 	movw	r0, #54300	@ 0xd41c
 8003f78:	f7fc fe92 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003f7c:	2134      	movs	r1, #52	@ 0x34
 8003f7e:	f24d 401d 	movw	r0, #54301	@ 0xd41d
 8003f82:	f7fc fe8d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003f86:	2102      	movs	r1, #2
 8003f88:	f24d 401e 	movw	r0, #54302	@ 0xd41e
 8003f8c:	f7fc fe88 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003f90:	2167      	movs	r1, #103	@ 0x67
 8003f92:	f24d 401f 	movw	r0, #54303	@ 0xd41f
 8003f96:	f7fc fe83 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003f9a:	2102      	movs	r1, #2
 8003f9c:	f24d 4020 	movw	r0, #54304	@ 0xd420
 8003fa0:	f7fc fe7e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003fa4:	2184      	movs	r1, #132	@ 0x84
 8003fa6:	f24d 4021 	movw	r0, #54305	@ 0xd421
 8003faa:	f7fc fe79 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003fae:	2102      	movs	r1, #2
 8003fb0:	f24d 4022 	movw	r0, #54306	@ 0xd422
 8003fb4:	f7fc fe74 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003fb8:	21a4      	movs	r1, #164	@ 0xa4
 8003fba:	f24d 4023 	movw	r0, #54307	@ 0xd423
 8003fbe:	f7fc fe6f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003fc2:	2102      	movs	r1, #2
 8003fc4:	f24d 4024 	movw	r0, #54308	@ 0xd424
 8003fc8:	f7fc fe6a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003fcc:	21b7      	movs	r1, #183	@ 0xb7
 8003fce:	f24d 4025 	movw	r0, #54309	@ 0xd425
 8003fd2:	f7fc fe65 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003fd6:	2102      	movs	r1, #2
 8003fd8:	f24d 4026 	movw	r0, #54310	@ 0xd426
 8003fdc:	f7fc fe60 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003fe0:	21cf      	movs	r1, #207	@ 0xcf
 8003fe2:	f24d 4027 	movw	r0, #54311	@ 0xd427
 8003fe6:	f7fc fe5b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8003fea:	2102      	movs	r1, #2
 8003fec:	f24d 4028 	movw	r0, #54312	@ 0xd428
 8003ff0:	f7fc fe56 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8003ff4:	21de      	movs	r1, #222	@ 0xde
 8003ff6:	f24d 4029 	movw	r0, #54313	@ 0xd429
 8003ffa:	f7fc fe51 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8003ffe:	2102      	movs	r1, #2
 8004000:	f24d 402a 	movw	r0, #54314	@ 0xd42a
 8004004:	f7fc fe4c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8004008:	21f2      	movs	r1, #242	@ 0xf2
 800400a:	f24d 402b 	movw	r0, #54315	@ 0xd42b
 800400e:	f7fc fe47 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8004012:	2102      	movs	r1, #2
 8004014:	f24d 402c 	movw	r0, #54316	@ 0xd42c
 8004018:	f7fc fe42 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 800401c:	21fe      	movs	r1, #254	@ 0xfe
 800401e:	f24d 402d 	movw	r0, #54317	@ 0xd42d
 8004022:	f7fc fe3d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8004026:	2103      	movs	r1, #3
 8004028:	f24d 402e 	movw	r0, #54318	@ 0xd42e
 800402c:	f7fc fe38 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8004030:	2110      	movs	r1, #16
 8004032:	f24d 402f 	movw	r0, #54319	@ 0xd42f
 8004036:	f7fc fe33 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 800403a:	2103      	movs	r1, #3
 800403c:	f24d 4030 	movw	r0, #54320	@ 0xd430
 8004040:	f7fc fe2e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8004044:	2133      	movs	r1, #51	@ 0x33
 8004046:	f24d 4031 	movw	r0, #54321	@ 0xd431
 800404a:	f7fc fe29 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 800404e:	2103      	movs	r1, #3
 8004050:	f24d 4032 	movw	r0, #54322	@ 0xd432
 8004054:	f7fc fe24 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8004058:	216d      	movs	r1, #109	@ 0x6d
 800405a:	f24d 4033 	movw	r0, #54323	@ 0xd433
 800405e:	f7fc fe1f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8004062:	2100      	movs	r1, #0
 8004064:	f44f 4055 	mov.w	r0, #54528	@ 0xd500
 8004068:	f7fc fe1a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 800406c:	2133      	movs	r1, #51	@ 0x33
 800406e:	f24d 5001 	movw	r0, #54529	@ 0xd501
 8004072:	f7fc fe15 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8004076:	2100      	movs	r1, #0
 8004078:	f24d 5002 	movw	r0, #54530	@ 0xd502
 800407c:	f7fc fe10 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8004080:	2134      	movs	r1, #52	@ 0x34
 8004082:	f24d 5003 	movw	r0, #54531	@ 0xd503
 8004086:	f7fc fe0b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 800408a:	2100      	movs	r1, #0
 800408c:	f24d 5004 	movw	r0, #54532	@ 0xd504
 8004090:	f7fc fe06 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8004094:	213a      	movs	r1, #58	@ 0x3a
 8004096:	f24d 5005 	movw	r0, #54533	@ 0xd505
 800409a:	f7fc fe01 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 800409e:	2100      	movs	r1, #0
 80040a0:	f24d 5006 	movw	r0, #54534	@ 0xd506
 80040a4:	f7fc fdfc 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 80040a8:	214a      	movs	r1, #74	@ 0x4a
 80040aa:	f24d 5007 	movw	r0, #54535	@ 0xd507
 80040ae:	f7fc fdf7 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 80040b2:	2100      	movs	r1, #0
 80040b4:	f24d 5008 	movw	r0, #54536	@ 0xd508
 80040b8:	f7fc fdf2 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 80040bc:	215c      	movs	r1, #92	@ 0x5c
 80040be:	f24d 5009 	movw	r0, #54537	@ 0xd509
 80040c2:	f7fc fded 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 80040c6:	2100      	movs	r1, #0
 80040c8:	f24d 500a 	movw	r0, #54538	@ 0xd50a
 80040cc:	f7fc fde8 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 80040d0:	2181      	movs	r1, #129	@ 0x81
 80040d2:	f24d 500b 	movw	r0, #54539	@ 0xd50b
 80040d6:	f7fc fde3 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 80040da:	2100      	movs	r1, #0
 80040dc:	f24d 500c 	movw	r0, #54540	@ 0xd50c
 80040e0:	f7fc fdde 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 80040e4:	21a6      	movs	r1, #166	@ 0xa6
 80040e6:	f24d 500d 	movw	r0, #54541	@ 0xd50d
 80040ea:	f7fc fdd9 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 80040ee:	2100      	movs	r1, #0
 80040f0:	f24d 500e 	movw	r0, #54542	@ 0xd50e
 80040f4:	f7fc fdd4 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 80040f8:	21e5      	movs	r1, #229	@ 0xe5
 80040fa:	f24d 500f 	movw	r0, #54543	@ 0xd50f
 80040fe:	f7fc fdcf 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8004102:	2101      	movs	r1, #1
 8004104:	f24d 5010 	movw	r0, #54544	@ 0xd510
 8004108:	f7fc fdca 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 800410c:	2113      	movs	r1, #19
 800410e:	f24d 5011 	movw	r0, #54545	@ 0xd511
 8004112:	f7fc fdc5 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8004116:	2101      	movs	r1, #1
 8004118:	f24d 5012 	movw	r0, #54546	@ 0xd512
 800411c:	f7fc fdc0 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8004120:	2154      	movs	r1, #84	@ 0x54
 8004122:	f24d 5013 	movw	r0, #54547	@ 0xd513
 8004126:	f7fc fdbb 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 800412a:	2101      	movs	r1, #1
 800412c:	f24d 5014 	movw	r0, #54548	@ 0xd514
 8004130:	f7fc fdb6 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8004134:	2182      	movs	r1, #130	@ 0x82
 8004136:	f24d 5015 	movw	r0, #54549	@ 0xd515
 800413a:	f7fc fdb1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 800413e:	2101      	movs	r1, #1
 8004140:	f24d 5016 	movw	r0, #54550	@ 0xd516
 8004144:	f7fc fdac 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8004148:	21ca      	movs	r1, #202	@ 0xca
 800414a:	f24d 5017 	movw	r0, #54551	@ 0xd517
 800414e:	f7fc fda7 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8004152:	2102      	movs	r1, #2
 8004154:	f24d 5018 	movw	r0, #54552	@ 0xd518
 8004158:	f7fc fda2 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 800415c:	2100      	movs	r1, #0
 800415e:	f24d 5019 	movw	r0, #54553	@ 0xd519
 8004162:	f7fc fd9d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8004166:	2102      	movs	r1, #2
 8004168:	f24d 501a 	movw	r0, #54554	@ 0xd51a
 800416c:	f7fc fd98 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8004170:	2101      	movs	r1, #1
 8004172:	f24d 501b 	movw	r0, #54555	@ 0xd51b
 8004176:	f7fc fd93 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 800417a:	2102      	movs	r1, #2
 800417c:	f24d 501c 	movw	r0, #54556	@ 0xd51c
 8004180:	f7fc fd8e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8004184:	2134      	movs	r1, #52	@ 0x34
 8004186:	f24d 501d 	movw	r0, #54557	@ 0xd51d
 800418a:	f7fc fd89 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 800418e:	2102      	movs	r1, #2
 8004190:	f24d 501e 	movw	r0, #54558	@ 0xd51e
 8004194:	f7fc fd84 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8004198:	2167      	movs	r1, #103	@ 0x67
 800419a:	f24d 501f 	movw	r0, #54559	@ 0xd51f
 800419e:	f7fc fd7f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 80041a2:	2102      	movs	r1, #2
 80041a4:	f24d 5020 	movw	r0, #54560	@ 0xd520
 80041a8:	f7fc fd7a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 80041ac:	2184      	movs	r1, #132	@ 0x84
 80041ae:	f24d 5021 	movw	r0, #54561	@ 0xd521
 80041b2:	f7fc fd75 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 80041b6:	2102      	movs	r1, #2
 80041b8:	f24d 5022 	movw	r0, #54562	@ 0xd522
 80041bc:	f7fc fd70 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 80041c0:	21a4      	movs	r1, #164	@ 0xa4
 80041c2:	f24d 5023 	movw	r0, #54563	@ 0xd523
 80041c6:	f7fc fd6b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 80041ca:	2102      	movs	r1, #2
 80041cc:	f24d 5024 	movw	r0, #54564	@ 0xd524
 80041d0:	f7fc fd66 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 80041d4:	21b7      	movs	r1, #183	@ 0xb7
 80041d6:	f24d 5025 	movw	r0, #54565	@ 0xd525
 80041da:	f7fc fd61 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 80041de:	2102      	movs	r1, #2
 80041e0:	f24d 5026 	movw	r0, #54566	@ 0xd526
 80041e4:	f7fc fd5c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 80041e8:	21cf      	movs	r1, #207	@ 0xcf
 80041ea:	f24d 5027 	movw	r0, #54567	@ 0xd527
 80041ee:	f7fc fd57 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 80041f2:	2102      	movs	r1, #2
 80041f4:	f24d 5028 	movw	r0, #54568	@ 0xd528
 80041f8:	f7fc fd52 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 80041fc:	21de      	movs	r1, #222	@ 0xde
 80041fe:	f24d 5029 	movw	r0, #54569	@ 0xd529
 8004202:	f7fc fd4d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8004206:	2102      	movs	r1, #2
 8004208:	f24d 502a 	movw	r0, #54570	@ 0xd52a
 800420c:	f7fc fd48 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8004210:	21f2      	movs	r1, #242	@ 0xf2
 8004212:	f24d 502b 	movw	r0, #54571	@ 0xd52b
 8004216:	f7fc fd43 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 800421a:	2102      	movs	r1, #2
 800421c:	f24d 502c 	movw	r0, #54572	@ 0xd52c
 8004220:	f7fc fd3e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8004224:	21fe      	movs	r1, #254	@ 0xfe
 8004226:	f24d 502d 	movw	r0, #54573	@ 0xd52d
 800422a:	f7fc fd39 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 800422e:	2103      	movs	r1, #3
 8004230:	f24d 502e 	movw	r0, #54574	@ 0xd52e
 8004234:	f7fc fd34 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8004238:	2110      	movs	r1, #16
 800423a:	f24d 502f 	movw	r0, #54575	@ 0xd52f
 800423e:	f7fc fd2f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8004242:	2103      	movs	r1, #3
 8004244:	f24d 5030 	movw	r0, #54576	@ 0xd530
 8004248:	f7fc fd2a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 800424c:	2133      	movs	r1, #51	@ 0x33
 800424e:	f24d 5031 	movw	r0, #54577	@ 0xd531
 8004252:	f7fc fd25 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8004256:	2103      	movs	r1, #3
 8004258:	f24d 5032 	movw	r0, #54578	@ 0xd532
 800425c:	f7fc fd20 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8004260:	216d      	movs	r1, #109	@ 0x6d
 8004262:	f24d 5033 	movw	r0, #54579	@ 0xd533
 8004266:	f7fc fd1b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 800426a:	2100      	movs	r1, #0
 800426c:	f44f 4056 	mov.w	r0, #54784	@ 0xd600
 8004270:	f7fc fd16 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8004274:	2133      	movs	r1, #51	@ 0x33
 8004276:	f24d 6001 	movw	r0, #54785	@ 0xd601
 800427a:	f7fc fd11 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 800427e:	2100      	movs	r1, #0
 8004280:	f24d 6002 	movw	r0, #54786	@ 0xd602
 8004284:	f7fc fd0c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8004288:	2134      	movs	r1, #52	@ 0x34
 800428a:	f24d 6003 	movw	r0, #54787	@ 0xd603
 800428e:	f7fc fd07 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8004292:	2100      	movs	r1, #0
 8004294:	f24d 6004 	movw	r0, #54788	@ 0xd604
 8004298:	f7fc fd02 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 800429c:	213a      	movs	r1, #58	@ 0x3a
 800429e:	f24d 6005 	movw	r0, #54789	@ 0xd605
 80042a2:	f7fc fcfd 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 80042a6:	2100      	movs	r1, #0
 80042a8:	f24d 6006 	movw	r0, #54790	@ 0xd606
 80042ac:	f7fc fcf8 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 80042b0:	214a      	movs	r1, #74	@ 0x4a
 80042b2:	f24d 6007 	movw	r0, #54791	@ 0xd607
 80042b6:	f7fc fcf3 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 80042ba:	2100      	movs	r1, #0
 80042bc:	f24d 6008 	movw	r0, #54792	@ 0xd608
 80042c0:	f7fc fcee 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 80042c4:	215c      	movs	r1, #92	@ 0x5c
 80042c6:	f24d 6009 	movw	r0, #54793	@ 0xd609
 80042ca:	f7fc fce9 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 80042ce:	2100      	movs	r1, #0
 80042d0:	f24d 600a 	movw	r0, #54794	@ 0xd60a
 80042d4:	f7fc fce4 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 80042d8:	2181      	movs	r1, #129	@ 0x81
 80042da:	f24d 600b 	movw	r0, #54795	@ 0xd60b
 80042de:	f7fc fcdf 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 80042e2:	2100      	movs	r1, #0
 80042e4:	f24d 600c 	movw	r0, #54796	@ 0xd60c
 80042e8:	f7fc fcda 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 80042ec:	21a6      	movs	r1, #166	@ 0xa6
 80042ee:	f24d 600d 	movw	r0, #54797	@ 0xd60d
 80042f2:	f7fc fcd5 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 80042f6:	2100      	movs	r1, #0
 80042f8:	f24d 600e 	movw	r0, #54798	@ 0xd60e
 80042fc:	f7fc fcd0 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8004300:	21e5      	movs	r1, #229	@ 0xe5
 8004302:	f24d 600f 	movw	r0, #54799	@ 0xd60f
 8004306:	f7fc fccb 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 800430a:	2101      	movs	r1, #1
 800430c:	f24d 6010 	movw	r0, #54800	@ 0xd610
 8004310:	f7fc fcc6 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8004314:	2113      	movs	r1, #19
 8004316:	f24d 6011 	movw	r0, #54801	@ 0xd611
 800431a:	f7fc fcc1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 800431e:	2101      	movs	r1, #1
 8004320:	f24d 6012 	movw	r0, #54802	@ 0xd612
 8004324:	f7fc fcbc 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8004328:	2154      	movs	r1, #84	@ 0x54
 800432a:	f24d 6013 	movw	r0, #54803	@ 0xd613
 800432e:	f7fc fcb7 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8004332:	2101      	movs	r1, #1
 8004334:	f24d 6014 	movw	r0, #54804	@ 0xd614
 8004338:	f7fc fcb2 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 800433c:	2182      	movs	r1, #130	@ 0x82
 800433e:	f24d 6015 	movw	r0, #54805	@ 0xd615
 8004342:	f7fc fcad 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8004346:	2101      	movs	r1, #1
 8004348:	f24d 6016 	movw	r0, #54806	@ 0xd616
 800434c:	f7fc fca8 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8004350:	21ca      	movs	r1, #202	@ 0xca
 8004352:	f24d 6017 	movw	r0, #54807	@ 0xd617
 8004356:	f7fc fca3 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 800435a:	2102      	movs	r1, #2
 800435c:	f24d 6018 	movw	r0, #54808	@ 0xd618
 8004360:	f7fc fc9e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8004364:	2100      	movs	r1, #0
 8004366:	f24d 6019 	movw	r0, #54809	@ 0xd619
 800436a:	f7fc fc99 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 800436e:	2102      	movs	r1, #2
 8004370:	f24d 601a 	movw	r0, #54810	@ 0xd61a
 8004374:	f7fc fc94 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8004378:	2101      	movs	r1, #1
 800437a:	f24d 601b 	movw	r0, #54811	@ 0xd61b
 800437e:	f7fc fc8f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8004382:	2102      	movs	r1, #2
 8004384:	f24d 601c 	movw	r0, #54812	@ 0xd61c
 8004388:	f7fc fc8a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 800438c:	2134      	movs	r1, #52	@ 0x34
 800438e:	f24d 601d 	movw	r0, #54813	@ 0xd61d
 8004392:	f7fc fc85 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8004396:	2102      	movs	r1, #2
 8004398:	f24d 601e 	movw	r0, #54814	@ 0xd61e
 800439c:	f7fc fc80 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 80043a0:	2167      	movs	r1, #103	@ 0x67
 80043a2:	f24d 601f 	movw	r0, #54815	@ 0xd61f
 80043a6:	f7fc fc7b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 80043aa:	2102      	movs	r1, #2
 80043ac:	f24d 6020 	movw	r0, #54816	@ 0xd620
 80043b0:	f7fc fc76 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 80043b4:	2184      	movs	r1, #132	@ 0x84
 80043b6:	f24d 6021 	movw	r0, #54817	@ 0xd621
 80043ba:	f7fc fc71 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 80043be:	2102      	movs	r1, #2
 80043c0:	f24d 6022 	movw	r0, #54818	@ 0xd622
 80043c4:	f7fc fc6c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 80043c8:	21a4      	movs	r1, #164	@ 0xa4
 80043ca:	f24d 6023 	movw	r0, #54819	@ 0xd623
 80043ce:	f7fc fc67 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 80043d2:	2102      	movs	r1, #2
 80043d4:	f24d 6024 	movw	r0, #54820	@ 0xd624
 80043d8:	f7fc fc62 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 80043dc:	21b7      	movs	r1, #183	@ 0xb7
 80043de:	f24d 6025 	movw	r0, #54821	@ 0xd625
 80043e2:	f7fc fc5d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 80043e6:	2102      	movs	r1, #2
 80043e8:	f24d 6026 	movw	r0, #54822	@ 0xd626
 80043ec:	f7fc fc58 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 80043f0:	21cf      	movs	r1, #207	@ 0xcf
 80043f2:	f24d 6027 	movw	r0, #54823	@ 0xd627
 80043f6:	f7fc fc53 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 80043fa:	2102      	movs	r1, #2
 80043fc:	f24d 6028 	movw	r0, #54824	@ 0xd628
 8004400:	f7fc fc4e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 8004404:	21de      	movs	r1, #222	@ 0xde
 8004406:	f24d 6029 	movw	r0, #54825	@ 0xd629
 800440a:	f7fc fc49 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 800440e:	2102      	movs	r1, #2
 8004410:	f24d 602a 	movw	r0, #54826	@ 0xd62a
 8004414:	f7fc fc44 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8004418:	21f2      	movs	r1, #242	@ 0xf2
 800441a:	f24d 602b 	movw	r0, #54827	@ 0xd62b
 800441e:	f7fc fc3f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8004422:	2102      	movs	r1, #2
 8004424:	f24d 602c 	movw	r0, #54828	@ 0xd62c
 8004428:	f7fc fc3a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 800442c:	21fe      	movs	r1, #254	@ 0xfe
 800442e:	f24d 602d 	movw	r0, #54829	@ 0xd62d
 8004432:	f7fc fc35 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8004436:	2103      	movs	r1, #3
 8004438:	f24d 602e 	movw	r0, #54830	@ 0xd62e
 800443c:	f7fc fc30 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8004440:	2110      	movs	r1, #16
 8004442:	f24d 602f 	movw	r0, #54831	@ 0xd62f
 8004446:	f7fc fc2b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 800444a:	2103      	movs	r1, #3
 800444c:	f24d 6030 	movw	r0, #54832	@ 0xd630
 8004450:	f7fc fc26 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8004454:	2133      	movs	r1, #51	@ 0x33
 8004456:	f24d 6031 	movw	r0, #54833	@ 0xd631
 800445a:	f7fc fc21 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 800445e:	2103      	movs	r1, #3
 8004460:	f24d 6032 	movw	r0, #54834	@ 0xd632
 8004464:	f7fc fc1c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8004468:	216d      	movs	r1, #109	@ 0x6d
 800446a:	f24d 6033 	movw	r0, #54835	@ 0xd633
 800446e:	f7fc fc17 	bl	8000ca0 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8004472:	2155      	movs	r1, #85	@ 0x55
 8004474:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8004478:	f7fc fc12 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800447c:	21aa      	movs	r1, #170	@ 0xaa
 800447e:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8004482:	f7fc fc0d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8004486:	2152      	movs	r1, #82	@ 0x52
 8004488:	f24f 0002 	movw	r0, #61442	@ 0xf002
 800448c:	f7fc fc08 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8004490:	2108      	movs	r1, #8
 8004492:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8004496:	f7fc fc03 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 800449a:	2100      	movs	r1, #0
 800449c:	f24f 0004 	movw	r0, #61444	@ 0xf004
 80044a0:	f7fc fbfe 	bl	8000ca0 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 80044a4:	21cc      	movs	r1, #204	@ 0xcc
 80044a6:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 80044aa:	f7fc fbf9 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 80044ae:	2100      	movs	r1, #0
 80044b0:	f24b 1001 	movw	r0, #45313	@ 0xb101
 80044b4:	f7fc fbf4 	bl	8000ca0 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 80044b8:	2105      	movs	r1, #5
 80044ba:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 80044be:	f7fc fbef 	bl	8000ca0 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 80044c2:	2170      	movs	r1, #112	@ 0x70
 80044c4:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 80044c8:	f7fc fbea 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 80044cc:	2170      	movs	r1, #112	@ 0x70
 80044ce:	f24b 7001 	movw	r0, #46849	@ 0xb701
 80044d2:	f7fc fbe5 	bl	8000ca0 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 80044d6:	2101      	movs	r1, #1
 80044d8:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 80044dc:	f7fc fbe0 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 80044e0:	2103      	movs	r1, #3
 80044e2:	f64b 0001 	movw	r0, #47105	@ 0xb801
 80044e6:	f7fc fbdb 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 80044ea:	2103      	movs	r1, #3
 80044ec:	f64b 0002 	movw	r0, #47106	@ 0xb802
 80044f0:	f7fc fbd6 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 80044f4:	2103      	movs	r1, #3
 80044f6:	f64b 0003 	movw	r0, #47107	@ 0xb803
 80044fa:	f7fc fbd1 	bl	8000ca0 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 80044fe:	2102      	movs	r1, #2
 8004500:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8004504:	f7fc fbcc 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8004508:	2100      	movs	r1, #0
 800450a:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 800450e:	f7fc fbc7 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8004512:	2100      	movs	r1, #0
 8004514:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8004518:	f7fc fbc2 	bl	8000ca0 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 800451c:	21d0      	movs	r1, #208	@ 0xd0
 800451e:	f44f 4049 	mov.w	r0, #51456	@ 0xc900
 8004522:	f7fc fbbd 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8004526:	2102      	movs	r1, #2
 8004528:	f64c 1001 	movw	r0, #51457	@ 0xc901
 800452c:	f7fc fbb8 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8004530:	2150      	movs	r1, #80	@ 0x50
 8004532:	f64c 1002 	movw	r0, #51458	@ 0xc902
 8004536:	f7fc fbb3 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 800453a:	2150      	movs	r1, #80	@ 0x50
 800453c:	f64c 1003 	movw	r0, #51459	@ 0xc903
 8004540:	f7fc fbae 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8004544:	2150      	movs	r1, #80	@ 0x50
 8004546:	f64c 1004 	movw	r0, #51460	@ 0xc904
 800454a:	f7fc fba9 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 800454e:	2100      	movs	r1, #0
 8004550:	f44f 5054 	mov.w	r0, #13568	@ 0x3500
 8004554:	f7fc fba4 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8004558:	2155      	movs	r1, #85	@ 0x55
 800455a:	f44f 5068 	mov.w	r0, #14848	@ 0x3a00
 800455e:	f7fc fb9f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8004562:	f44f 5088 	mov.w	r0, #4352	@ 0x1100
 8004566:	f7fc fb0f 	bl	8000b88 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 800456a:	2001      	movs	r0, #1
 800456c:	f002 fd08 	bl	8006f80 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8004570:	f44f 5024 	mov.w	r0, #10496	@ 0x2900
 8004574:	f7fc fb08 	bl	8000b88 <LCD_WR_REG>
 8004578:	f001 bd18 	b.w	8005fac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 800457c:	4bec      	ldr	r3, [pc, #944]	@ (8004930 <LCD_Init+0x27b8>)
 800457e:	889b      	ldrh	r3, [r3, #4]
 8004580:	f249 3225 	movw	r2, #37669	@ 0x9325
 8004584:	4293      	cmp	r3, r2
 8004586:	f040 80d7 	bne.w	8004738 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 800458a:	f647 01f0 	movw	r1, #30960	@ 0x78f0
 800458e:	20e5      	movs	r0, #229	@ 0xe5
 8004590:	f7fc fb86 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8004594:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004598:	2001      	movs	r0, #1
 800459a:	f7fc fb81 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 800459e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80045a2:	2002      	movs	r0, #2
 80045a4:	f7fc fb7c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80045a8:	f241 0130 	movw	r1, #4144	@ 0x1030
 80045ac:	2003      	movs	r0, #3
 80045ae:	f7fc fb77 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80045b2:	2100      	movs	r1, #0
 80045b4:	2004      	movs	r0, #4
 80045b6:	f7fc fb73 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80045ba:	f240 2102 	movw	r1, #514	@ 0x202
 80045be:	2008      	movs	r0, #8
 80045c0:	f7fc fb6e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80045c4:	2100      	movs	r1, #0
 80045c6:	2009      	movs	r0, #9
 80045c8:	f7fc fb6a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 80045cc:	2100      	movs	r1, #0
 80045ce:	200a      	movs	r0, #10
 80045d0:	f7fc fb66 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80045d4:	2100      	movs	r1, #0
 80045d6:	200c      	movs	r0, #12
 80045d8:	f7fc fb62 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 80045dc:	2100      	movs	r1, #0
 80045de:	200d      	movs	r0, #13
 80045e0:	f7fc fb5e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80045e4:	2100      	movs	r1, #0
 80045e6:	200f      	movs	r0, #15
 80045e8:	f7fc fb5a 	bl	8000ca0 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 80045ec:	2100      	movs	r1, #0
 80045ee:	2010      	movs	r0, #16
 80045f0:	f7fc fb56 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80045f4:	2107      	movs	r1, #7
 80045f6:	2011      	movs	r0, #17
 80045f8:	f7fc fb52 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80045fc:	2100      	movs	r1, #0
 80045fe:	2012      	movs	r0, #18
 8004600:	f7fc fb4e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004604:	2100      	movs	r1, #0
 8004606:	2013      	movs	r0, #19
 8004608:	f7fc fb4a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 800460c:	2100      	movs	r1, #0
 800460e:	2007      	movs	r0, #7
 8004610:	f7fc fb46 	bl	8000ca0 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8004614:	f241 6190 	movw	r1, #5776	@ 0x1690
 8004618:	2010      	movs	r0, #16
 800461a:	f7fc fb41 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800461e:	f240 2127 	movw	r1, #551	@ 0x227
 8004622:	2011      	movs	r0, #17
 8004624:	f7fc fb3c 	bl	8000ca0 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8004628:	219d      	movs	r1, #157	@ 0x9d
 800462a:	2012      	movs	r0, #18
 800462c:	f7fc fb38 	bl	8000ca0 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8004630:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 8004634:	2013      	movs	r0, #19
 8004636:	f7fc fb33 	bl	8000ca0 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 800463a:	2125      	movs	r1, #37	@ 0x25
 800463c:	2029      	movs	r0, #41	@ 0x29
 800463e:	f7fc fb2f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8004642:	210d      	movs	r1, #13
 8004644:	202b      	movs	r0, #43	@ 0x2b
 8004646:	f7fc fb2b 	bl	8000ca0 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 800464a:	2107      	movs	r1, #7
 800464c:	2030      	movs	r0, #48	@ 0x30
 800464e:	f7fc fb27 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8004652:	f240 3103 	movw	r1, #771	@ 0x303
 8004656:	2031      	movs	r0, #49	@ 0x31
 8004658:	f7fc fb22 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 800465c:	2103      	movs	r1, #3
 800465e:	2032      	movs	r0, #50	@ 0x32
 8004660:	f7fc fb1e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8004664:	f240 2106 	movw	r1, #518	@ 0x206
 8004668:	2035      	movs	r0, #53	@ 0x35
 800466a:	f7fc fb19 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 800466e:	2108      	movs	r1, #8
 8004670:	2036      	movs	r0, #54	@ 0x36
 8004672:	f7fc fb15 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 8004676:	f240 4106 	movw	r1, #1030	@ 0x406
 800467a:	2037      	movs	r0, #55	@ 0x37
 800467c:	f7fc fb10 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8004680:	f44f 7141 	mov.w	r1, #772	@ 0x304
 8004684:	2038      	movs	r0, #56	@ 0x38
 8004686:	f7fc fb0b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 800468a:	2107      	movs	r1, #7
 800468c:	2039      	movs	r0, #57	@ 0x39
 800468e:	f7fc fb07 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 8004692:	f240 6102 	movw	r1, #1538	@ 0x602
 8004696:	203c      	movs	r0, #60	@ 0x3c
 8004698:	f7fc fb02 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 800469c:	2108      	movs	r1, #8
 800469e:	203d      	movs	r0, #61	@ 0x3d
 80046a0:	f7fc fafe 	bl	8000ca0 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 80046a4:	2100      	movs	r1, #0
 80046a6:	2050      	movs	r0, #80	@ 0x50
 80046a8:	f7fc fafa 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 80046ac:	21ef      	movs	r1, #239	@ 0xef
 80046ae:	2051      	movs	r0, #81	@ 0x51
 80046b0:	f7fc faf6 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80046b4:	2100      	movs	r1, #0
 80046b6:	2052      	movs	r0, #82	@ 0x52
 80046b8:	f7fc faf2 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80046bc:	f240 113f 	movw	r1, #319	@ 0x13f
 80046c0:	2053      	movs	r0, #83	@ 0x53
 80046c2:	f7fc faed 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 80046c6:	f44f 4127 	mov.w	r1, #42752	@ 0xa700
 80046ca:	2060      	movs	r0, #96	@ 0x60
 80046cc:	f7fc fae8 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80046d0:	2101      	movs	r1, #1
 80046d2:	2061      	movs	r0, #97	@ 0x61
 80046d4:	f7fc fae4 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80046d8:	2100      	movs	r1, #0
 80046da:	206a      	movs	r0, #106	@ 0x6a
 80046dc:	f7fc fae0 	bl	8000ca0 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 80046e0:	2100      	movs	r1, #0
 80046e2:	2080      	movs	r0, #128	@ 0x80
 80046e4:	f7fc fadc 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80046e8:	2100      	movs	r1, #0
 80046ea:	2081      	movs	r0, #129	@ 0x81
 80046ec:	f7fc fad8 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80046f0:	2100      	movs	r1, #0
 80046f2:	2082      	movs	r0, #130	@ 0x82
 80046f4:	f7fc fad4 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80046f8:	2100      	movs	r1, #0
 80046fa:	2083      	movs	r0, #131	@ 0x83
 80046fc:	f7fc fad0 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004700:	2100      	movs	r1, #0
 8004702:	2084      	movs	r0, #132	@ 0x84
 8004704:	f7fc facc 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004708:	2100      	movs	r1, #0
 800470a:	2085      	movs	r0, #133	@ 0x85
 800470c:	f7fc fac8 	bl	8000ca0 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8004710:	2110      	movs	r1, #16
 8004712:	2090      	movs	r0, #144	@ 0x90
 8004714:	f7fc fac4 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004718:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800471c:	2092      	movs	r0, #146	@ 0x92
 800471e:	f7fc fabf 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8004722:	f240 1133 	movw	r1, #307	@ 0x133
 8004726:	2007      	movs	r0, #7
 8004728:	f7fc faba 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 800472c:	2122      	movs	r1, #34	@ 0x22
 800472e:	2000      	movs	r0, #0
 8004730:	f7fc fab6 	bl	8000ca0 <LCD_WriteReg>
 8004734:	f001 bc3a 	b.w	8005fac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004738:	4b7d      	ldr	r3, [pc, #500]	@ (8004930 <LCD_Init+0x27b8>)
 800473a:	889b      	ldrh	r3, [r3, #4]
 800473c:	f249 3228 	movw	r2, #37672	@ 0x9328
 8004740:	4293      	cmp	r3, r2
 8004742:	f040 80f7 	bne.w	8004934 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 8004746:	f241 018f 	movw	r1, #4239	@ 0x108f
 800474a:	20ec      	movs	r0, #236	@ 0xec
 800474c:	f7fc faa8 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8004750:	f241 2134 	movw	r1, #4660	@ 0x1234
 8004754:	20ef      	movs	r0, #239	@ 0xef
 8004756:	f7fc faa3 	bl	8000ca0 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 800475a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800475e:	2001      	movs	r0, #1
 8004760:	f7fc fa9e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 8004764:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8004768:	2002      	movs	r0, #2
 800476a:	f7fc fa99 	bl	8000ca0 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 800476e:	f241 0130 	movw	r1, #4144	@ 0x1030
 8004772:	2003      	movs	r0, #3
 8004774:	f7fc fa94 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004778:	2100      	movs	r1, #0
 800477a:	2004      	movs	r0, #4
 800477c:	f7fc fa90 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004780:	f240 2102 	movw	r1, #514	@ 0x202
 8004784:	2008      	movs	r0, #8
 8004786:	f7fc fa8b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 800478a:	2100      	movs	r1, #0
 800478c:	2009      	movs	r0, #9
 800478e:	f7fc fa87 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 8004792:	2100      	movs	r1, #0
 8004794:	200a      	movs	r0, #10
 8004796:	f7fc fa83 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 800479a:	2101      	movs	r1, #1
 800479c:	200c      	movs	r0, #12
 800479e:	f7fc fa7f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 80047a2:	2100      	movs	r1, #0
 80047a4:	200d      	movs	r0, #13
 80047a6:	f7fc fa7b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 80047aa:	2100      	movs	r1, #0
 80047ac:	200f      	movs	r0, #15
 80047ae:	f7fc fa77 	bl	8000ca0 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 80047b2:	2100      	movs	r1, #0
 80047b4:	2010      	movs	r0, #16
 80047b6:	f7fc fa73 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80047ba:	2107      	movs	r1, #7
 80047bc:	2011      	movs	r0, #17
 80047be:	f7fc fa6f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80047c2:	2100      	movs	r1, #0
 80047c4:	2012      	movs	r0, #18
 80047c6:	f7fc fa6b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80047ca:	2100      	movs	r1, #0
 80047cc:	2013      	movs	r0, #19
 80047ce:	f7fc fa67 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 80047d2:	2101      	movs	r1, #1
 80047d4:	2007      	movs	r0, #7
 80047d6:	f7fc fa63 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(50);
 80047da:	2032      	movs	r0, #50	@ 0x32
 80047dc:	f002 fbd0 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 80047e0:	f241 4190 	movw	r1, #5264	@ 0x1490
 80047e4:	2010      	movs	r0, #16
 80047e6:	f7fc fa5b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80047ea:	f240 2127 	movw	r1, #551	@ 0x227
 80047ee:	2011      	movs	r0, #17
 80047f0:	f7fc fa56 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(50);
 80047f4:	2032      	movs	r0, #50	@ 0x32
 80047f6:	f002 fbc3 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 80047fa:	218a      	movs	r1, #138	@ 0x8a
 80047fc:	2012      	movs	r0, #18
 80047fe:	f7fc fa4f 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(50);
 8004802:	2032      	movs	r0, #50	@ 0x32
 8004804:	f002 fbbc 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8004808:	f44f 51d0 	mov.w	r1, #6656	@ 0x1a00
 800480c:	2013      	movs	r0, #19
 800480e:	f7fc fa47 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 8004812:	2106      	movs	r1, #6
 8004814:	2029      	movs	r0, #41	@ 0x29
 8004816:	f7fc fa43 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 800481a:	210d      	movs	r1, #13
 800481c:	202b      	movs	r0, #43	@ 0x2b
 800481e:	f7fc fa3f 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(50);
 8004822:	2032      	movs	r0, #50	@ 0x32
 8004824:	f002 fbac 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8004828:	2100      	movs	r1, #0
 800482a:	2020      	movs	r0, #32
 800482c:	f7fc fa38 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004830:	2100      	movs	r1, #0
 8004832:	2021      	movs	r0, #33	@ 0x21
 8004834:	f7fc fa34 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(50);
 8004838:	2032      	movs	r0, #50	@ 0x32
 800483a:	f002 fba1 	bl	8006f80 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 800483e:	2100      	movs	r1, #0
 8004840:	2030      	movs	r0, #48	@ 0x30
 8004842:	f7fc fa2d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 8004846:	f240 6104 	movw	r1, #1540	@ 0x604
 800484a:	2031      	movs	r0, #49	@ 0x31
 800484c:	f7fc fa28 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8004850:	f240 3105 	movw	r1, #773	@ 0x305
 8004854:	2032      	movs	r0, #50	@ 0x32
 8004856:	f7fc fa23 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 800485a:	2100      	movs	r1, #0
 800485c:	2035      	movs	r0, #53	@ 0x35
 800485e:	f7fc fa1f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 8004862:	f640 4109 	movw	r1, #3081	@ 0xc09
 8004866:	2036      	movs	r0, #54	@ 0x36
 8004868:	f7fc fa1a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 800486c:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8004870:	2037      	movs	r0, #55	@ 0x37
 8004872:	f7fc fa15 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 8004876:	f240 3101 	movw	r1, #769	@ 0x301
 800487a:	2038      	movs	r0, #56	@ 0x38
 800487c:	f7fc fa10 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004880:	f240 7107 	movw	r1, #1799	@ 0x707
 8004884:	2039      	movs	r0, #57	@ 0x39
 8004886:	f7fc fa0b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 800488a:	2100      	movs	r1, #0
 800488c:	203c      	movs	r0, #60	@ 0x3c
 800488e:	f7fc fa07 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 8004892:	f640 210a 	movw	r1, #2570	@ 0xa0a
 8004896:	203d      	movs	r0, #61	@ 0x3d
 8004898:	f7fc fa02 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(50);
 800489c:	2032      	movs	r0, #50	@ 0x32
 800489e:	f002 fb6f 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 80048a2:	2100      	movs	r1, #0
 80048a4:	2050      	movs	r0, #80	@ 0x50
 80048a6:	f7fc f9fb 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 80048aa:	21ef      	movs	r1, #239	@ 0xef
 80048ac:	2051      	movs	r0, #81	@ 0x51
 80048ae:	f7fc f9f7 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 80048b2:	2100      	movs	r1, #0
 80048b4:	2052      	movs	r0, #82	@ 0x52
 80048b6:	f7fc f9f3 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 80048ba:	f240 113f 	movw	r1, #319	@ 0x13f
 80048be:	2053      	movs	r0, #83	@ 0x53
 80048c0:	f7fc f9ee 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 80048c4:	f44f 4127 	mov.w	r1, #42752	@ 0xa700
 80048c8:	2060      	movs	r0, #96	@ 0x60
 80048ca:	f7fc f9e9 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80048ce:	2101      	movs	r1, #1
 80048d0:	2061      	movs	r0, #97	@ 0x61
 80048d2:	f7fc f9e5 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 80048d6:	2100      	movs	r1, #0
 80048d8:	206a      	movs	r0, #106	@ 0x6a
 80048da:	f7fc f9e1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80048de:	2100      	movs	r1, #0
 80048e0:	2080      	movs	r0, #128	@ 0x80
 80048e2:	f7fc f9dd 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80048e6:	2100      	movs	r1, #0
 80048e8:	2081      	movs	r0, #129	@ 0x81
 80048ea:	f7fc f9d9 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80048ee:	2100      	movs	r1, #0
 80048f0:	2082      	movs	r0, #130	@ 0x82
 80048f2:	f7fc f9d5 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80048f6:	2100      	movs	r1, #0
 80048f8:	2083      	movs	r0, #131	@ 0x83
 80048fa:	f7fc f9d1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80048fe:	2100      	movs	r1, #0
 8004900:	2084      	movs	r0, #132	@ 0x84
 8004902:	f7fc f9cd 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004906:	2100      	movs	r1, #0
 8004908:	2085      	movs	r0, #133	@ 0x85
 800490a:	f7fc f9c9 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 800490e:	2110      	movs	r1, #16
 8004910:	2090      	movs	r0, #144	@ 0x90
 8004912:	f7fc f9c5 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004916:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800491a:	2092      	movs	r0, #146	@ 0x92
 800491c:	f7fc f9c0 	bl	8000ca0 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8004920:	f240 1133 	movw	r1, #307	@ 0x133
 8004924:	2007      	movs	r0, #7
 8004926:	f7fc f9bb 	bl	8000ca0 <LCD_WriteReg>
 800492a:	f001 bb3f 	b.w	8005fac <LCD_Init+0x3e34>
 800492e:	bf00      	nop
 8004930:	200000cc 	.word	0x200000cc
	} else if (lcddev.id == 0x9320) //测试OK.
 8004934:	4bce      	ldr	r3, [pc, #824]	@ (8004c70 <LCD_Init+0x2af8>)
 8004936:	889b      	ldrh	r3, [r3, #4]
 8004938:	f249 3220 	movw	r2, #37664	@ 0x9320
 800493c:	4293      	cmp	r3, r2
 800493e:	f040 80ad 	bne.w	8004a9c <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 8004942:	2100      	movs	r1, #0
 8004944:	2000      	movs	r0, #0
 8004946:	f7fc f9ab 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 800494a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800494e:	2001      	movs	r0, #1
 8004950:	f7fc f9a6 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 8004954:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8004958:	2002      	movs	r0, #2
 800495a:	f7fc f9a1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 800495e:	f241 0130 	movw	r1, #4144	@ 0x1030
 8004962:	2003      	movs	r0, #3
 8004964:	f7fc f99c 	bl	8000ca0 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8004968:	2100      	movs	r1, #0
 800496a:	2004      	movs	r0, #4
 800496c:	f7fc f998 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8004970:	f240 2102 	movw	r1, #514	@ 0x202
 8004974:	2008      	movs	r0, #8
 8004976:	f7fc f993 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 800497a:	2100      	movs	r1, #0
 800497c:	2009      	movs	r0, #9
 800497e:	f7fc f98f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 8004982:	2100      	movs	r1, #0
 8004984:	200a      	movs	r0, #10
 8004986:	f7fc f98b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 800498a:	2101      	movs	r1, #1
 800498c:	200c      	movs	r0, #12
 800498e:	f7fc f987 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 8004992:	2100      	movs	r1, #0
 8004994:	200d      	movs	r0, #13
 8004996:	f7fc f983 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 800499a:	2100      	movs	r1, #0
 800499c:	200f      	movs	r0, #15
 800499e:	f7fc f97f 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(50);
 80049a2:	2032      	movs	r0, #50	@ 0x32
 80049a4:	f002 faec 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 80049a8:	f240 1101 	movw	r1, #257	@ 0x101
 80049ac:	2007      	movs	r0, #7
 80049ae:	f7fc f977 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(50);
 80049b2:	2032      	movs	r0, #50	@ 0x32
 80049b4:	f002 fae4 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 80049b8:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 80049bc:	2010      	movs	r0, #16
 80049be:	f7fc f96f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 80049c2:	2107      	movs	r1, #7
 80049c4:	2011      	movs	r0, #17
 80049c6:	f7fc f96b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 80049ca:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80049ce:	2012      	movs	r0, #18
 80049d0:	f7fc f966 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 80049d4:	f44f 6130 	mov.w	r1, #2816	@ 0xb00
 80049d8:	2013      	movs	r0, #19
 80049da:	f7fc f961 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 80049de:	2100      	movs	r1, #0
 80049e0:	2029      	movs	r0, #41	@ 0x29
 80049e2:	f7fc f95d 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 80049e6:	f244 0110 	movw	r1, #16400	@ 0x4010
 80049ea:	202b      	movs	r0, #43	@ 0x2b
 80049ec:	f7fc f958 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 80049f0:	2100      	movs	r1, #0
 80049f2:	2050      	movs	r0, #80	@ 0x50
 80049f4:	f7fc f954 	bl	8000ca0 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 80049f8:	21ef      	movs	r1, #239	@ 0xef
 80049fa:	2051      	movs	r0, #81	@ 0x51
 80049fc:	f7fc f950 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8004a00:	2100      	movs	r1, #0
 8004a02:	2052      	movs	r0, #82	@ 0x52
 8004a04:	f7fc f94c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8004a08:	f240 113f 	movw	r1, #319	@ 0x13f
 8004a0c:	2053      	movs	r0, #83	@ 0x53
 8004a0e:	f7fc f947 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8004a12:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8004a16:	2060      	movs	r0, #96	@ 0x60
 8004a18:	f7fc f942 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	2061      	movs	r0, #97	@ 0x61
 8004a20:	f7fc f93e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8004a24:	2100      	movs	r1, #0
 8004a26:	206a      	movs	r0, #106	@ 0x6a
 8004a28:	f7fc f93a 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	2080      	movs	r0, #128	@ 0x80
 8004a30:	f7fc f936 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8004a34:	2100      	movs	r1, #0
 8004a36:	2081      	movs	r0, #129	@ 0x81
 8004a38:	f7fc f932 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	2082      	movs	r0, #130	@ 0x82
 8004a40:	f7fc f92e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8004a44:	2100      	movs	r1, #0
 8004a46:	2083      	movs	r0, #131	@ 0x83
 8004a48:	f7fc f92a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	2084      	movs	r0, #132	@ 0x84
 8004a50:	f7fc f926 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 8004a54:	2100      	movs	r1, #0
 8004a56:	2085      	movs	r0, #133	@ 0x85
 8004a58:	f7fc f922 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 8004a5c:	2110      	movs	r1, #16
 8004a5e:	2090      	movs	r0, #144	@ 0x90
 8004a60:	f7fc f91e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 8004a64:	2100      	movs	r1, #0
 8004a66:	2092      	movs	r0, #146	@ 0x92
 8004a68:	f7fc f91a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	2093      	movs	r0, #147	@ 0x93
 8004a70:	f7fc f916 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 8004a74:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8004a78:	2095      	movs	r0, #149	@ 0x95
 8004a7a:	f7fc f911 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 8004a7e:	2100      	movs	r1, #0
 8004a80:	2097      	movs	r0, #151	@ 0x97
 8004a82:	f7fc f90d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 8004a86:	2100      	movs	r1, #0
 8004a88:	2098      	movs	r0, #152	@ 0x98
 8004a8a:	f7fc f909 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 8004a8e:	f240 1173 	movw	r1, #371	@ 0x173
 8004a92:	2007      	movs	r0, #7
 8004a94:	f7fc f904 	bl	8000ca0 <LCD_WriteReg>
 8004a98:	f001 ba88 	b.w	8005fac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 8004a9c:	4b74      	ldr	r3, [pc, #464]	@ (8004c70 <LCD_Init+0x2af8>)
 8004a9e:	889b      	ldrh	r3, [r3, #4]
 8004aa0:	f249 3231 	movw	r2, #37681	@ 0x9331
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	f040 80e5 	bne.w	8004c74 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 8004aaa:	f241 0114 	movw	r1, #4116	@ 0x1014
 8004aae:	20e7      	movs	r0, #231	@ 0xe7
 8004ab0:	f7fc f8f6 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8004ab4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004ab8:	2001      	movs	r0, #1
 8004aba:	f7fc f8f1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8004abe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004ac2:	2002      	movs	r0, #2
 8004ac4:	f7fc f8ec 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8004ac8:	f241 0138 	movw	r1, #4152	@ 0x1038
 8004acc:	2003      	movs	r0, #3
 8004ace:	f7fc f8e7 	bl	8000ca0 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8004ad2:	f240 2102 	movw	r1, #514	@ 0x202
 8004ad6:	2008      	movs	r0, #8
 8004ad8:	f7fc f8e2 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8004adc:	2100      	movs	r1, #0
 8004ade:	2009      	movs	r0, #9
 8004ae0:	f7fc f8de 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	200a      	movs	r0, #10
 8004ae8:	f7fc f8da 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8004aec:	2100      	movs	r1, #0
 8004aee:	200c      	movs	r0, #12
 8004af0:	f7fc f8d6 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8004af4:	2100      	movs	r1, #0
 8004af6:	200d      	movs	r0, #13
 8004af8:	f7fc f8d2 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8004afc:	2100      	movs	r1, #0
 8004afe:	200f      	movs	r0, #15
 8004b00:	f7fc f8ce 	bl	8000ca0 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004b04:	2100      	movs	r1, #0
 8004b06:	2010      	movs	r0, #16
 8004b08:	f7fc f8ca 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8004b0c:	2107      	movs	r1, #7
 8004b0e:	2011      	movs	r0, #17
 8004b10:	f7fc f8c6 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004b14:	2100      	movs	r1, #0
 8004b16:	2012      	movs	r0, #18
 8004b18:	f7fc f8c2 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	2013      	movs	r0, #19
 8004b20:	f7fc f8be 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004b24:	20c8      	movs	r0, #200	@ 0xc8
 8004b26:	f002 fa2b 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004b2a:	f241 6190 	movw	r1, #5776	@ 0x1690
 8004b2e:	2010      	movs	r0, #16
 8004b30:	f7fc f8b6 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004b34:	f240 2127 	movw	r1, #551	@ 0x227
 8004b38:	2011      	movs	r0, #17
 8004b3a:	f7fc f8b1 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004b3e:	2032      	movs	r0, #50	@ 0x32
 8004b40:	f002 fa1e 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004b44:	210c      	movs	r1, #12
 8004b46:	2012      	movs	r0, #18
 8004b48:	f7fc f8aa 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004b4c:	2032      	movs	r0, #50	@ 0x32
 8004b4e:	f002 fa17 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004b52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004b56:	2013      	movs	r0, #19
 8004b58:	f7fc f8a2 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8004b5c:	2111      	movs	r1, #17
 8004b5e:	2029      	movs	r0, #41	@ 0x29
 8004b60:	f7fc f89e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004b64:	210b      	movs	r1, #11
 8004b66:	202b      	movs	r0, #43	@ 0x2b
 8004b68:	f7fc f89a 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004b6c:	2032      	movs	r0, #50	@ 0x32
 8004b6e:	f002 fa07 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8004b72:	2100      	movs	r1, #0
 8004b74:	2020      	movs	r0, #32
 8004b76:	f7fc f893 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8004b7a:	f240 113f 	movw	r1, #319	@ 0x13f
 8004b7e:	2021      	movs	r0, #33	@ 0x21
 8004b80:	f7fc f88e 	bl	8000ca0 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8004b84:	2100      	movs	r1, #0
 8004b86:	2030      	movs	r0, #48	@ 0x30
 8004b88:	f7fc f88a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8004b8c:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8004b90:	2031      	movs	r0, #49	@ 0x31
 8004b92:	f7fc f885 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8004b96:	2100      	movs	r1, #0
 8004b98:	2032      	movs	r0, #50	@ 0x32
 8004b9a:	f7fc f881 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004b9e:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8004ba2:	2035      	movs	r0, #53	@ 0x35
 8004ba4:	f7fc f87c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004ba8:	f241 610a 	movw	r1, #5642	@ 0x160a
 8004bac:	2036      	movs	r0, #54	@ 0x36
 8004bae:	f7fc f877 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8004bb2:	f240 7107 	movw	r1, #1799	@ 0x707
 8004bb6:	2037      	movs	r0, #55	@ 0x37
 8004bb8:	f7fc f872 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8004bbc:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8004bc0:	2038      	movs	r0, #56	@ 0x38
 8004bc2:	f7fc f86d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004bc6:	f240 7107 	movw	r1, #1799	@ 0x707
 8004bca:	2039      	movs	r0, #57	@ 0x39
 8004bcc:	f7fc f868 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004bd0:	f240 4102 	movw	r1, #1026	@ 0x402
 8004bd4:	203c      	movs	r0, #60	@ 0x3c
 8004bd6:	f7fc f863 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8004bda:	f640 410f 	movw	r1, #3087	@ 0xc0f
 8004bde:	203d      	movs	r0, #61	@ 0x3d
 8004be0:	f7fc f85e 	bl	8000ca0 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004be4:	2100      	movs	r1, #0
 8004be6:	2050      	movs	r0, #80	@ 0x50
 8004be8:	f7fc f85a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8004bec:	21ef      	movs	r1, #239	@ 0xef
 8004bee:	2051      	movs	r0, #81	@ 0x51
 8004bf0:	f7fc f856 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	2052      	movs	r0, #82	@ 0x52
 8004bf8:	f7fc f852 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8004bfc:	f240 113f 	movw	r1, #319	@ 0x13f
 8004c00:	2053      	movs	r0, #83	@ 0x53
 8004c02:	f7fc f84d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004c06:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8004c0a:	2060      	movs	r0, #96	@ 0x60
 8004c0c:	f7fc f848 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8004c10:	2101      	movs	r1, #1
 8004c12:	2061      	movs	r0, #97	@ 0x61
 8004c14:	f7fc f844 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004c18:	2100      	movs	r1, #0
 8004c1a:	206a      	movs	r0, #106	@ 0x6a
 8004c1c:	f7fc f840 	bl	8000ca0 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004c20:	2100      	movs	r1, #0
 8004c22:	2080      	movs	r0, #128	@ 0x80
 8004c24:	f7fc f83c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004c28:	2100      	movs	r1, #0
 8004c2a:	2081      	movs	r0, #129	@ 0x81
 8004c2c:	f7fc f838 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004c30:	2100      	movs	r1, #0
 8004c32:	2082      	movs	r0, #130	@ 0x82
 8004c34:	f7fc f834 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004c38:	2100      	movs	r1, #0
 8004c3a:	2083      	movs	r0, #131	@ 0x83
 8004c3c:	f7fc f830 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004c40:	2100      	movs	r1, #0
 8004c42:	2084      	movs	r0, #132	@ 0x84
 8004c44:	f7fc f82c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004c48:	2100      	movs	r1, #0
 8004c4a:	2085      	movs	r0, #133	@ 0x85
 8004c4c:	f7fc f828 	bl	8000ca0 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004c50:	2110      	movs	r1, #16
 8004c52:	2090      	movs	r0, #144	@ 0x90
 8004c54:	f7fc f824 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004c58:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004c5c:	2092      	movs	r0, #146	@ 0x92
 8004c5e:	f7fc f81f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004c62:	f240 1133 	movw	r1, #307	@ 0x133
 8004c66:	2007      	movs	r0, #7
 8004c68:	f7fc f81a 	bl	8000ca0 <LCD_WriteReg>
 8004c6c:	f001 b99e 	b.w	8005fac <LCD_Init+0x3e34>
 8004c70:	200000cc 	.word	0x200000cc
	} else if (lcddev.id == 0x5408) {
 8004c74:	4be2      	ldr	r3, [pc, #904]	@ (8005000 <LCD_Init+0x2e88>)
 8004c76:	889b      	ldrh	r3, [r3, #4]
 8004c78:	f245 4208 	movw	r2, #21512	@ 0x5408
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	f040 80a3 	bne.w	8004dc8 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8004c82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c86:	2001      	movs	r0, #1
 8004c88:	f7fc f80a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8004c8c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8004c90:	2002      	movs	r0, #2
 8004c92:	f7fc f805 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8004c96:	f241 0130 	movw	r1, #4144	@ 0x1030
 8004c9a:	2003      	movs	r0, #3
 8004c9c:	f7fc f800 	bl	8000ca0 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	2004      	movs	r0, #4
 8004ca4:	f7fb fffc 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004ca8:	f240 2107 	movw	r1, #519	@ 0x207
 8004cac:	2008      	movs	r0, #8
 8004cae:	f7fb fff7 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	2009      	movs	r0, #9
 8004cb6:	f7fb fff3 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8004cba:	2100      	movs	r1, #0
 8004cbc:	200a      	movs	r0, #10
 8004cbe:	f7fb ffef 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	200c      	movs	r0, #12
 8004cc6:	f7fb ffeb 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004cca:	2100      	movs	r1, #0
 8004ccc:	200d      	movs	r0, #13
 8004cce:	f7fb ffe7 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	200f      	movs	r0, #15
 8004cd6:	f7fb ffe3 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(20);
 8004cda:	2014      	movs	r0, #20
 8004cdc:	f002 f950 	bl	8006f80 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004ce0:	f241 61b0 	movw	r1, #5808	@ 0x16b0
 8004ce4:	2010      	movs	r0, #16
 8004ce6:	f7fb ffdb 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004cea:	2101      	movs	r1, #1
 8004cec:	2011      	movs	r0, #17
 8004cee:	f7fb ffd7 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	2017      	movs	r0, #23
 8004cf6:	f7fb ffd3 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8004cfa:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8004cfe:	2012      	movs	r0, #18
 8004d00:	f7fb ffce 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004d04:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d08:	2013      	movs	r0, #19
 8004d0a:	f7fb ffc9 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8004d0e:	2109      	movs	r1, #9
 8004d10:	2029      	movs	r0, #41	@ 0x29
 8004d12:	f7fb ffc5 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004d16:	2109      	movs	r1, #9
 8004d18:	202a      	movs	r0, #42	@ 0x2a
 8004d1a:	f7fb ffc1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8004d1e:	2100      	movs	r1, #0
 8004d20:	20a4      	movs	r0, #164	@ 0xa4
 8004d22:	f7fb ffbd 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004d26:	2100      	movs	r1, #0
 8004d28:	2050      	movs	r0, #80	@ 0x50
 8004d2a:	f7fb ffb9 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8004d2e:	21ef      	movs	r1, #239	@ 0xef
 8004d30:	2051      	movs	r0, #81	@ 0x51
 8004d32:	f7fb ffb5 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004d36:	2100      	movs	r1, #0
 8004d38:	2052      	movs	r0, #82	@ 0x52
 8004d3a:	f7fb ffb1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8004d3e:	f240 113f 	movw	r1, #319	@ 0x13f
 8004d42:	2053      	movs	r0, #83	@ 0x53
 8004d44:	f7fb ffac 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004d48:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8004d4c:	2060      	movs	r0, #96	@ 0x60
 8004d4e:	f7fb ffa7 	bl	8000ca0 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004d52:	2101      	movs	r1, #1
 8004d54:	2061      	movs	r0, #97	@ 0x61
 8004d56:	f7fb ffa3 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	206a      	movs	r0, #106	@ 0x6a
 8004d5e:	f7fb ff9f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004d62:	2100      	movs	r1, #0
 8004d64:	2080      	movs	r0, #128	@ 0x80
 8004d66:	f7fb ff9b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	2081      	movs	r0, #129	@ 0x81
 8004d6e:	f7fb ff97 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004d72:	2100      	movs	r1, #0
 8004d74:	2082      	movs	r0, #130	@ 0x82
 8004d76:	f7fb ff93 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	2083      	movs	r0, #131	@ 0x83
 8004d7e:	f7fb ff8f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004d82:	2100      	movs	r1, #0
 8004d84:	2084      	movs	r0, #132	@ 0x84
 8004d86:	f7fb ff8b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	2085      	movs	r0, #133	@ 0x85
 8004d8e:	f7fb ff87 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004d92:	2113      	movs	r1, #19
 8004d94:	2090      	movs	r0, #144	@ 0x90
 8004d96:	f7fb ff83 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	2092      	movs	r0, #146	@ 0x92
 8004d9e:	f7fb ff7f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004da2:	2103      	movs	r1, #3
 8004da4:	2093      	movs	r0, #147	@ 0x93
 8004da6:	f7fb ff7b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004daa:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8004dae:	2095      	movs	r0, #149	@ 0x95
 8004db0:	f7fb ff76 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004db4:	f240 1173 	movw	r1, #371	@ 0x173
 8004db8:	2007      	movs	r0, #7
 8004dba:	f7fb ff71 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(50);
 8004dbe:	2032      	movs	r0, #50	@ 0x32
 8004dc0:	f002 f8de 	bl	8006f80 <HAL_Delay>
 8004dc4:	f001 b8f2 	b.w	8005fac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004dc8:	4b8d      	ldr	r3, [pc, #564]	@ (8005000 <LCD_Init+0x2e88>)
 8004dca:	889b      	ldrh	r3, [r3, #4]
 8004dcc:	f241 5205 	movw	r2, #5381	@ 0x1505
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	f040 8117 	bne.w	8005004 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	2007      	movs	r0, #7
 8004dda:	f7fb ff61 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(50);
 8004dde:	2032      	movs	r0, #50	@ 0x32
 8004de0:	f002 f8ce 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004de4:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8004de8:	2012      	movs	r0, #18
 8004dea:	f7fb ff59 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004dee:	2101      	movs	r1, #1
 8004df0:	20a4      	movs	r0, #164	@ 0xa4
 8004df2:	f7fb ff55 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004df6:	210f      	movs	r1, #15
 8004df8:	2008      	movs	r0, #8
 8004dfa:	f7fb ff51 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004dfe:	2108      	movs	r1, #8
 8004e00:	200a      	movs	r0, #10
 8004e02:	f7fb ff4d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004e06:	2108      	movs	r1, #8
 8004e08:	200d      	movs	r0, #13
 8004e0a:	f7fb ff49 	bl	8000ca0 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004e0e:	f240 7107 	movw	r1, #1799	@ 0x707
 8004e12:	2030      	movs	r0, #48	@ 0x30
 8004e14:	f7fb ff44 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004e18:	2107      	movs	r1, #7
 8004e1a:	2031      	movs	r0, #49	@ 0x31
 8004e1c:	f7fb ff40 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004e20:	f240 6103 	movw	r1, #1539	@ 0x603
 8004e24:	2032      	movs	r0, #50	@ 0x32
 8004e26:	f7fb ff3b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8004e2a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8004e2e:	2033      	movs	r0, #51	@ 0x33
 8004e30:	f7fb ff36 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004e34:	f240 2102 	movw	r1, #514	@ 0x202
 8004e38:	2034      	movs	r0, #52	@ 0x34
 8004e3a:	f7fb ff31 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004e3e:	2102      	movs	r1, #2
 8004e40:	2035      	movs	r0, #53	@ 0x35
 8004e42:	f7fb ff2d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004e46:	f641 710f 	movw	r1, #7951	@ 0x1f0f
 8004e4a:	2036      	movs	r0, #54	@ 0x36
 8004e4c:	f7fb ff28 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004e50:	f240 7107 	movw	r1, #1799	@ 0x707
 8004e54:	2037      	movs	r0, #55	@ 0x37
 8004e56:	f7fb ff23 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	2038      	movs	r0, #56	@ 0x38
 8004e5e:	f7fb ff1f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8004e62:	2100      	movs	r1, #0
 8004e64:	2039      	movs	r0, #57	@ 0x39
 8004e66:	f7fb ff1b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004e6a:	f240 7107 	movw	r1, #1799	@ 0x707
 8004e6e:	203a      	movs	r0, #58	@ 0x3a
 8004e70:	f7fb ff16 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004e74:	2100      	movs	r1, #0
 8004e76:	203b      	movs	r0, #59	@ 0x3b
 8004e78:	f7fb ff12 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004e7c:	2107      	movs	r1, #7
 8004e7e:	203c      	movs	r0, #60	@ 0x3c
 8004e80:	f7fb ff0e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004e84:	2100      	movs	r1, #0
 8004e86:	203d      	movs	r0, #61	@ 0x3d
 8004e88:	f7fb ff0a 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(50);
 8004e8c:	2032      	movs	r0, #50	@ 0x32
 8004e8e:	f002 f877 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8004e92:	2101      	movs	r1, #1
 8004e94:	2007      	movs	r0, #7
 8004e96:	f7fb ff03 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	2017      	movs	r0, #23
 8004e9e:	f7fb feff 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(50);
 8004ea2:	2032      	movs	r0, #50	@ 0x32
 8004ea4:	f002 f86c 	bl	8006f80 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004ea8:	f44f 51bd 	mov.w	r1, #6048	@ 0x17a0
 8004eac:	2010      	movs	r0, #16
 8004eae:	f7fb fef7 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004eb2:	f240 2117 	movw	r1, #535	@ 0x217
 8004eb6:	2011      	movs	r0, #17
 8004eb8:	f7fb fef2 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004ebc:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8004ec0:	2012      	movs	r0, #18
 8004ec2:	f7fb feed 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004ec6:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8004eca:	2013      	movs	r0, #19
 8004ecc:	f7fb fee8 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	202a      	movs	r0, #42	@ 0x2a
 8004ed4:	f7fb fee4 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004ed8:	210a      	movs	r1, #10
 8004eda:	2029      	movs	r0, #41	@ 0x29
 8004edc:	f7fb fee0 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004ee0:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 8004ee4:	2012      	movs	r0, #18
 8004ee6:	f7fb fedb 	bl	8000ca0 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004eea:	2100      	movs	r1, #0
 8004eec:	2050      	movs	r0, #80	@ 0x50
 8004eee:	f7fb fed7 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004ef2:	21ef      	movs	r1, #239	@ 0xef
 8004ef4:	2051      	movs	r0, #81	@ 0x51
 8004ef6:	f7fb fed3 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004efa:	2100      	movs	r1, #0
 8004efc:	2052      	movs	r0, #82	@ 0x52
 8004efe:	f7fb fecf 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004f02:	f240 113f 	movw	r1, #319	@ 0x13f
 8004f06:	2053      	movs	r0, #83	@ 0x53
 8004f08:	f7fb feca 	bl	8000ca0 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8004f0c:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8004f10:	2060      	movs	r0, #96	@ 0x60
 8004f12:	f7fb fec5 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004f16:	2101      	movs	r1, #1
 8004f18:	2061      	movs	r0, #97	@ 0x61
 8004f1a:	f7fb fec1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004f1e:	2100      	movs	r1, #0
 8004f20:	206a      	movs	r0, #106	@ 0x6a
 8004f22:	f7fb febd 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004f26:	2100      	movs	r1, #0
 8004f28:	2080      	movs	r0, #128	@ 0x80
 8004f2a:	f7fb feb9 	bl	8000ca0 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8004f2e:	2100      	movs	r1, #0
 8004f30:	2081      	movs	r0, #129	@ 0x81
 8004f32:	f7fb feb5 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004f36:	2100      	movs	r1, #0
 8004f38:	2082      	movs	r0, #130	@ 0x82
 8004f3a:	f7fb feb1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004f3e:	2100      	movs	r1, #0
 8004f40:	2083      	movs	r0, #131	@ 0x83
 8004f42:	f7fb fead 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004f46:	2100      	movs	r1, #0
 8004f48:	2084      	movs	r0, #132	@ 0x84
 8004f4a:	f7fb fea9 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004f4e:	2100      	movs	r1, #0
 8004f50:	2085      	movs	r0, #133	@ 0x85
 8004f52:	f7fb fea5 	bl	8000ca0 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004f56:	2113      	movs	r1, #19
 8004f58:	2090      	movs	r0, #144	@ 0x90
 8004f5a:	f7fb fea1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004f5e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8004f62:	2092      	movs	r0, #146	@ 0x92
 8004f64:	f7fb fe9c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004f68:	2105      	movs	r1, #5
 8004f6a:	2093      	movs	r0, #147	@ 0x93
 8004f6c:	f7fb fe98 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004f70:	2100      	movs	r1, #0
 8004f72:	2095      	movs	r0, #149	@ 0x95
 8004f74:	f7fb fe94 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004f78:	2100      	movs	r1, #0
 8004f7a:	2097      	movs	r0, #151	@ 0x97
 8004f7c:	f7fb fe90 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004f80:	2100      	movs	r1, #0
 8004f82:	2098      	movs	r0, #152	@ 0x98
 8004f84:	f7fb fe8c 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004f88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f8c:	2001      	movs	r0, #1
 8004f8e:	f7fb fe87 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004f92:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8004f96:	2002      	movs	r0, #2
 8004f98:	f7fb fe82 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004f9c:	f241 0138 	movw	r1, #4152	@ 0x1038
 8004fa0:	2003      	movs	r0, #3
 8004fa2:	f7fb fe7d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	2004      	movs	r0, #4
 8004faa:	f7fb fe79 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004fae:	2100      	movs	r1, #0
 8004fb0:	200c      	movs	r0, #12
 8004fb2:	f7fb fe75 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	200f      	movs	r0, #15
 8004fba:	f7fb fe71 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	2020      	movs	r0, #32
 8004fc2:	f7fb fe6d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	2021      	movs	r0, #33	@ 0x21
 8004fca:	f7fb fe69 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004fce:	2121      	movs	r1, #33	@ 0x21
 8004fd0:	2007      	movs	r0, #7
 8004fd2:	f7fb fe65 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(20);
 8004fd6:	2014      	movs	r0, #20
 8004fd8:	f001 ffd2 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004fdc:	2161      	movs	r1, #97	@ 0x61
 8004fde:	2007      	movs	r0, #7
 8004fe0:	f7fb fe5e 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(20);
 8004fe4:	2014      	movs	r0, #20
 8004fe6:	f001 ffcb 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8004fea:	f240 1173 	movw	r1, #371	@ 0x173
 8004fee:	2007      	movs	r0, #7
 8004ff0:	f7fb fe56 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(20);
 8004ff4:	2014      	movs	r0, #20
 8004ff6:	f001 ffc3 	bl	8006f80 <HAL_Delay>
 8004ffa:	f000 bfd7 	b.w	8005fac <LCD_Init+0x3e34>
 8004ffe:	bf00      	nop
 8005000:	200000cc 	.word	0x200000cc
	} else if (lcddev.id == 0xB505) {
 8005004:	4bf0      	ldr	r3, [pc, #960]	@ (80053c8 <LCD_Init+0x3250>)
 8005006:	889b      	ldrh	r3, [r3, #4]
 8005008:	f24b 5205 	movw	r2, #46341	@ 0xb505
 800500c:	4293      	cmp	r3, r2
 800500e:	f040 8103 	bne.w	8005218 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8005012:	2100      	movs	r1, #0
 8005014:	2000      	movs	r0, #0
 8005016:	f7fb fe43 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800501a:	2100      	movs	r1, #0
 800501c:	2000      	movs	r0, #0
 800501e:	f7fb fe3f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005022:	2100      	movs	r1, #0
 8005024:	2000      	movs	r0, #0
 8005026:	f7fb fe3b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800502a:	2100      	movs	r1, #0
 800502c:	2000      	movs	r0, #0
 800502e:	f7fb fe37 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8005032:	2101      	movs	r1, #1
 8005034:	20a4      	movs	r0, #164	@ 0xa4
 8005036:	f7fb fe33 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(20);
 800503a:	2014      	movs	r0, #20
 800503c:	f001 ffa0 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8005040:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8005044:	2060      	movs	r0, #96	@ 0x60
 8005046:	f7fb fe2b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 800504a:	f240 2102 	movw	r1, #514	@ 0x202
 800504e:	2008      	movs	r0, #8
 8005050:	f7fb fe26 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8005054:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8005058:	2030      	movs	r0, #48	@ 0x30
 800505a:	f7fb fe21 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 800505e:	f243 7115 	movw	r1, #14101	@ 0x3715
 8005062:	2031      	movs	r0, #49	@ 0x31
 8005064:	f7fb fe1c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8005068:	f240 6104 	movw	r1, #1540	@ 0x604
 800506c:	2032      	movs	r0, #50	@ 0x32
 800506e:	f7fb fe17 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8005072:	f640 6116 	movw	r1, #3606	@ 0xe16
 8005076:	2033      	movs	r0, #51	@ 0x33
 8005078:	f7fb fe12 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 800507c:	f242 2111 	movw	r1, #8721	@ 0x2211
 8005080:	2034      	movs	r0, #52	@ 0x34
 8005082:	f7fb fe0d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8005086:	f44f 51a8 	mov.w	r1, #5376	@ 0x1500
 800508a:	2035      	movs	r0, #53	@ 0x35
 800508c:	f7fb fe08 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8005090:	f248 5107 	movw	r1, #34055	@ 0x8507
 8005094:	2036      	movs	r0, #54	@ 0x36
 8005096:	f7fb fe03 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 800509a:	f241 4107 	movw	r1, #5127	@ 0x1407
 800509e:	2037      	movs	r0, #55	@ 0x37
 80050a0:	f7fb fdfe 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 80050a4:	f241 4103 	movw	r1, #5123	@ 0x1403
 80050a8:	2038      	movs	r0, #56	@ 0x38
 80050aa:	f7fb fdf9 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 80050ae:	2120      	movs	r1, #32
 80050b0:	2039      	movs	r0, #57	@ 0x39
 80050b2:	f7fb fdf5 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 80050b6:	211a      	movs	r1, #26
 80050b8:	2090      	movs	r0, #144	@ 0x90
 80050ba:	f7fb fdf1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 80050be:	2100      	movs	r1, #0
 80050c0:	2010      	movs	r0, #16
 80050c2:	f7fb fded 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80050c6:	2107      	movs	r1, #7
 80050c8:	2011      	movs	r0, #17
 80050ca:	f7fb fde9 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80050ce:	2100      	movs	r1, #0
 80050d0:	2012      	movs	r0, #18
 80050d2:	f7fb fde5 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80050d6:	2100      	movs	r1, #0
 80050d8:	2013      	movs	r0, #19
 80050da:	f7fb fde1 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(20);
 80050de:	2014      	movs	r0, #20
 80050e0:	f001 ff4e 	bl	8006f80 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 80050e4:	f44f 61e6 	mov.w	r1, #1840	@ 0x730
 80050e8:	2010      	movs	r0, #16
 80050ea:	f7fb fdd9 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 80050ee:	f240 1137 	movw	r1, #311	@ 0x137
 80050f2:	2011      	movs	r0, #17
 80050f4:	f7fb fdd4 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(20);
 80050f8:	2014      	movs	r0, #20
 80050fa:	f001 ff41 	bl	8006f80 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 80050fe:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 8005102:	2012      	movs	r0, #18
 8005104:	f7fb fdcc 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(20);
 8005108:	2014      	movs	r0, #20
 800510a:	f001 ff39 	bl	8006f80 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 800510e:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8005112:	2013      	movs	r0, #19
 8005114:	f7fb fdc4 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8005118:	2180      	movs	r1, #128	@ 0x80
 800511a:	202a      	movs	r0, #42	@ 0x2a
 800511c:	f7fb fdc0 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8005120:	2148      	movs	r1, #72	@ 0x48
 8005122:	2029      	movs	r0, #41	@ 0x29
 8005124:	f7fb fdbc 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(20);
 8005128:	2014      	movs	r0, #20
 800512a:	f001 ff29 	bl	8006f80 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 800512e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005132:	2001      	movs	r0, #1
 8005134:	f7fb fdb4 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8005138:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800513c:	2002      	movs	r0, #2
 800513e:	f7fb fdaf 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8005142:	f241 0138 	movw	r1, #4152	@ 0x1038
 8005146:	2003      	movs	r0, #3
 8005148:	f7fb fdaa 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 800514c:	f240 2102 	movw	r1, #514	@ 0x202
 8005150:	2008      	movs	r0, #8
 8005152:	f7fb fda5 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8005156:	2100      	movs	r1, #0
 8005158:	200a      	movs	r0, #10
 800515a:	f7fb fda1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 800515e:	2100      	movs	r1, #0
 8005160:	200c      	movs	r0, #12
 8005162:	f7fb fd9d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8005166:	2100      	movs	r1, #0
 8005168:	200d      	movs	r0, #13
 800516a:	f7fb fd99 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 800516e:	2130      	movs	r1, #48	@ 0x30
 8005170:	200e      	movs	r0, #14
 8005172:	f7fb fd95 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8005176:	2100      	movs	r1, #0
 8005178:	2050      	movs	r0, #80	@ 0x50
 800517a:	f7fb fd91 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 800517e:	21ef      	movs	r1, #239	@ 0xef
 8005180:	2051      	movs	r0, #81	@ 0x51
 8005182:	f7fb fd8d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8005186:	2100      	movs	r1, #0
 8005188:	2052      	movs	r0, #82	@ 0x52
 800518a:	f7fb fd89 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 800518e:	f240 113f 	movw	r1, #319	@ 0x13f
 8005192:	2053      	movs	r0, #83	@ 0x53
 8005194:	f7fb fd84 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8005198:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 800519c:	2060      	movs	r0, #96	@ 0x60
 800519e:	f7fb fd7f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80051a2:	2101      	movs	r1, #1
 80051a4:	2061      	movs	r0, #97	@ 0x61
 80051a6:	f7fb fd7b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 80051aa:	2100      	movs	r1, #0
 80051ac:	206a      	movs	r0, #106	@ 0x6a
 80051ae:	f7fb fd77 	bl	8000ca0 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 80051b2:	2111      	movs	r1, #17
 80051b4:	2090      	movs	r0, #144	@ 0x90
 80051b6:	f7fb fd73 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80051ba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80051be:	2092      	movs	r0, #146	@ 0x92
 80051c0:	f7fb fd6e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 80051c4:	f240 4102 	movw	r1, #1026	@ 0x402
 80051c8:	2093      	movs	r0, #147	@ 0x93
 80051ca:	f7fb fd69 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 80051ce:	2102      	movs	r1, #2
 80051d0:	2094      	movs	r0, #148	@ 0x94
 80051d2:	f7fb fd65 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(20);
 80051d6:	2014      	movs	r0, #20
 80051d8:	f001 fed2 	bl	8006f80 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 80051dc:	2101      	movs	r1, #1
 80051de:	2007      	movs	r0, #7
 80051e0:	f7fb fd5e 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(20);
 80051e4:	2014      	movs	r0, #20
 80051e6:	f001 fecb 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 80051ea:	2161      	movs	r1, #97	@ 0x61
 80051ec:	2007      	movs	r0, #7
 80051ee:	f7fb fd57 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 80051f2:	f240 1173 	movw	r1, #371	@ 0x173
 80051f6:	2007      	movs	r0, #7
 80051f8:	f7fb fd52 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 80051fc:	2100      	movs	r1, #0
 80051fe:	2020      	movs	r0, #32
 8005200:	f7fb fd4e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8005204:	2100      	movs	r1, #0
 8005206:	2021      	movs	r0, #33	@ 0x21
 8005208:	f7fb fd4a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 800520c:	2122      	movs	r1, #34	@ 0x22
 800520e:	2000      	movs	r0, #0
 8005210:	f7fb fd46 	bl	8000ca0 <LCD_WriteReg>
 8005214:	f000 beca 	b.w	8005fac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8005218:	4b6b      	ldr	r3, [pc, #428]	@ (80053c8 <LCD_Init+0x3250>)
 800521a:	889b      	ldrh	r3, [r3, #4]
 800521c:	f24c 5205 	movw	r2, #50437	@ 0xc505
 8005220:	4293      	cmp	r3, r2
 8005222:	f040 80d3 	bne.w	80053cc <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8005226:	2100      	movs	r1, #0
 8005228:	2000      	movs	r0, #0
 800522a:	f7fb fd39 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800522e:	2100      	movs	r1, #0
 8005230:	2000      	movs	r0, #0
 8005232:	f7fb fd35 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(20);
 8005236:	2014      	movs	r0, #20
 8005238:	f001 fea2 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 800523c:	2100      	movs	r1, #0
 800523e:	2000      	movs	r0, #0
 8005240:	f7fb fd2e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005244:	2100      	movs	r1, #0
 8005246:	2000      	movs	r0, #0
 8005248:	f7fb fd2a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800524c:	2100      	movs	r1, #0
 800524e:	2000      	movs	r0, #0
 8005250:	f7fb fd26 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005254:	2100      	movs	r1, #0
 8005256:	2000      	movs	r0, #0
 8005258:	f7fb fd22 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 800525c:	2101      	movs	r1, #1
 800525e:	20a4      	movs	r0, #164	@ 0xa4
 8005260:	f7fb fd1e 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(20);
 8005264:	2014      	movs	r0, #20
 8005266:	f001 fe8b 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 800526a:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 800526e:	2060      	movs	r0, #96	@ 0x60
 8005270:	f7fb fd16 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8005274:	f640 0106 	movw	r1, #2054	@ 0x806
 8005278:	2008      	movs	r0, #8
 800527a:	f7fb fd11 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 800527e:	f240 7103 	movw	r1, #1795	@ 0x703
 8005282:	2030      	movs	r0, #48	@ 0x30
 8005284:	f7fb fd0c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8005288:	2101      	movs	r1, #1
 800528a:	2031      	movs	r0, #49	@ 0x31
 800528c:	f7fb fd08 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8005290:	2104      	movs	r1, #4
 8005292:	2032      	movs	r0, #50	@ 0x32
 8005294:	f7fb fd04 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8005298:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800529c:	2033      	movs	r0, #51	@ 0x33
 800529e:	f7fb fcff 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 80052a2:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80052a6:	2034      	movs	r0, #52	@ 0x34
 80052a8:	f7fb fcfa 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 80052ac:	f240 1103 	movw	r1, #259	@ 0x103
 80052b0:	2035      	movs	r0, #53	@ 0x35
 80052b2:	f7fb fcf5 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 80052b6:	211f      	movs	r1, #31
 80052b8:	2036      	movs	r0, #54	@ 0x36
 80052ba:	f7fb fcf1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 80052be:	f240 7103 	movw	r1, #1795	@ 0x703
 80052c2:	2037      	movs	r0, #55	@ 0x37
 80052c4:	f7fb fcec 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 80052c8:	2101      	movs	r1, #1
 80052ca:	2038      	movs	r0, #56	@ 0x38
 80052cc:	f7fb fce8 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 80052d0:	2104      	movs	r1, #4
 80052d2:	2039      	movs	r0, #57	@ 0x39
 80052d4:	f7fb fce4 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80052d8:	2115      	movs	r1, #21
 80052da:	2090      	movs	r0, #144	@ 0x90
 80052dc:	f7fb fce0 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80052e0:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80052e4:	2010      	movs	r0, #16
 80052e6:	f7fb fcdb 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 80052ea:	f240 2147 	movw	r1, #583	@ 0x247
 80052ee:	2011      	movs	r0, #17
 80052f0:	f7fb fcd6 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 80052f4:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 80052f8:	2012      	movs	r0, #18
 80052fa:	f7fb fcd1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 80052fe:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8005302:	2013      	movs	r0, #19
 8005304:	f7fb fccc 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(120);
 8005308:	2078      	movs	r0, #120	@ 0x78
 800530a:	f001 fe39 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 800530e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005312:	2001      	movs	r0, #1
 8005314:	f7fb fcc4 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8005318:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800531c:	2002      	movs	r0, #2
 800531e:	f7fb fcbf 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8005322:	f241 0130 	movw	r1, #4144	@ 0x1030
 8005326:	2003      	movs	r0, #3
 8005328:	f7fb fcba 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 800532c:	2108      	movs	r1, #8
 800532e:	200a      	movs	r0, #10
 8005330:	f7fb fcb6 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005334:	2100      	movs	r1, #0
 8005336:	200c      	movs	r0, #12
 8005338:	f7fb fcb2 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 800533c:	2120      	movs	r1, #32
 800533e:	200e      	movs	r0, #14
 8005340:	f7fb fcae 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8005344:	2100      	movs	r1, #0
 8005346:	200f      	movs	r0, #15
 8005348:	f7fb fcaa 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 800534c:	2100      	movs	r1, #0
 800534e:	2020      	movs	r0, #32
 8005350:	f7fb fca6 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8005354:	2100      	movs	r1, #0
 8005356:	2021      	movs	r0, #33	@ 0x21
 8005358:	f7fb fca2 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 800535c:	213d      	movs	r1, #61	@ 0x3d
 800535e:	202a      	movs	r0, #42	@ 0x2a
 8005360:	f7fb fc9e 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(20);
 8005364:	2014      	movs	r0, #20
 8005366:	f001 fe0b 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 800536a:	212d      	movs	r1, #45	@ 0x2d
 800536c:	2029      	movs	r0, #41	@ 0x29
 800536e:	f7fb fc97 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8005372:	2100      	movs	r1, #0
 8005374:	2050      	movs	r0, #80	@ 0x50
 8005376:	f7fb fc93 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 800537a:	f24d 01ef 	movw	r1, #53487	@ 0xd0ef
 800537e:	2051      	movs	r0, #81	@ 0x51
 8005380:	f7fb fc8e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8005384:	2100      	movs	r1, #0
 8005386:	2052      	movs	r0, #82	@ 0x52
 8005388:	f7fb fc8a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800538c:	f240 113f 	movw	r1, #319	@ 0x13f
 8005390:	2053      	movs	r0, #83	@ 0x53
 8005392:	f7fb fc85 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8005396:	2100      	movs	r1, #0
 8005398:	2061      	movs	r0, #97	@ 0x61
 800539a:	f7fb fc81 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 800539e:	2100      	movs	r1, #0
 80053a0:	206a      	movs	r0, #106	@ 0x6a
 80053a2:	f7fb fc7d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 80053a6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80053aa:	2092      	movs	r0, #146	@ 0x92
 80053ac:	f7fb fc78 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 80053b0:	2105      	movs	r1, #5
 80053b2:	2093      	movs	r0, #147	@ 0x93
 80053b4:	f7fb fc74 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 80053b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80053bc:	2007      	movs	r0, #7
 80053be:	f7fb fc6f 	bl	8000ca0 <LCD_WriteReg>
 80053c2:	f000 bdf3 	b.w	8005fac <LCD_Init+0x3e34>
 80053c6:	bf00      	nop
 80053c8:	200000cc 	.word	0x200000cc
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 80053cc:	4bc2      	ldr	r3, [pc, #776]	@ (80056d8 <LCD_Init+0x3560>)
 80053ce:	889b      	ldrh	r3, [r3, #4]
 80053d0:	f648 1289 	movw	r2, #35209	@ 0x8989
 80053d4:	4293      	cmp	r3, r2
 80053d6:	f040 80bc 	bne.w	8005552 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 80053da:	2101      	movs	r1, #1
 80053dc:	2000      	movs	r0, #0
 80053de:	f7fb fc5f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 80053e2:	f64a 01a4 	movw	r1, #43172	@ 0xa8a4
 80053e6:	2003      	movs	r0, #3
 80053e8:	f7fb fc5a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80053ec:	2100      	movs	r1, #0
 80053ee:	200c      	movs	r0, #12
 80053f0:	f7fb fc56 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 80053f4:	f640 010c 	movw	r1, #2060	@ 0x80c
 80053f8:	200d      	movs	r0, #13
 80053fa:	f7fb fc51 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 80053fe:	f44f 512c 	mov.w	r1, #11008	@ 0x2b00
 8005402:	200e      	movs	r0, #14
 8005404:	f7fb fc4c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8005408:	21b0      	movs	r1, #176	@ 0xb0
 800540a:	201e      	movs	r0, #30
 800540c:	f7fb fc48 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8005410:	f642 313f 	movw	r1, #11071	@ 0x2b3f
 8005414:	2001      	movs	r0, #1
 8005416:	f7fb fc43 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 800541a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800541e:	2002      	movs	r0, #2
 8005420:	f7fb fc3e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8005424:	2100      	movs	r1, #0
 8005426:	2010      	movs	r0, #16
 8005428:	f7fb fc3a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 800542c:	f246 0178 	movw	r1, #24696	@ 0x6078
 8005430:	2011      	movs	r0, #17
 8005432:	f7fb fc35 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8005436:	2100      	movs	r1, #0
 8005438:	2005      	movs	r0, #5
 800543a:	f7fb fc31 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 800543e:	2100      	movs	r1, #0
 8005440:	2006      	movs	r0, #6
 8005442:	f7fb fc2d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8005446:	f64e 711c 	movw	r1, #61212	@ 0xef1c
 800544a:	2016      	movs	r0, #22
 800544c:	f7fb fc28 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8005450:	2103      	movs	r1, #3
 8005452:	2017      	movs	r0, #23
 8005454:	f7fb fc24 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8005458:	f240 2133 	movw	r1, #563	@ 0x233
 800545c:	2007      	movs	r0, #7
 800545e:	f7fb fc1f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8005462:	2100      	movs	r1, #0
 8005464:	200b      	movs	r0, #11
 8005466:	f7fb fc1b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 800546a:	2100      	movs	r1, #0
 800546c:	200f      	movs	r0, #15
 800546e:	f7fb fc17 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8005472:	2100      	movs	r1, #0
 8005474:	2041      	movs	r0, #65	@ 0x41
 8005476:	f7fb fc13 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 800547a:	2100      	movs	r1, #0
 800547c:	2042      	movs	r0, #66	@ 0x42
 800547e:	f7fb fc0f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8005482:	2100      	movs	r1, #0
 8005484:	2048      	movs	r0, #72	@ 0x48
 8005486:	f7fb fc0b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 800548a:	f240 113f 	movw	r1, #319	@ 0x13f
 800548e:	2049      	movs	r0, #73	@ 0x49
 8005490:	f7fb fc06 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8005494:	2100      	movs	r1, #0
 8005496:	204a      	movs	r0, #74	@ 0x4a
 8005498:	f7fb fc02 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 800549c:	2100      	movs	r1, #0
 800549e:	204b      	movs	r0, #75	@ 0x4b
 80054a0:	f7fb fbfe 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 80054a4:	f44f 416f 	mov.w	r1, #61184	@ 0xef00
 80054a8:	2044      	movs	r0, #68	@ 0x44
 80054aa:	f7fb fbf9 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 80054ae:	2100      	movs	r1, #0
 80054b0:	2045      	movs	r0, #69	@ 0x45
 80054b2:	f7fb fbf5 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 80054b6:	f240 113f 	movw	r1, #319	@ 0x13f
 80054ba:	2046      	movs	r0, #70	@ 0x46
 80054bc:	f7fb fbf0 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 80054c0:	f240 7107 	movw	r1, #1799	@ 0x707
 80054c4:	2030      	movs	r0, #48	@ 0x30
 80054c6:	f7fb fbeb 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 80054ca:	f44f 7101 	mov.w	r1, #516	@ 0x204
 80054ce:	2031      	movs	r0, #49	@ 0x31
 80054d0:	f7fb fbe6 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 80054d4:	f44f 7101 	mov.w	r1, #516	@ 0x204
 80054d8:	2032      	movs	r0, #50	@ 0x32
 80054da:	f7fb fbe1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 80054de:	f240 5102 	movw	r1, #1282	@ 0x502
 80054e2:	2033      	movs	r0, #51	@ 0x33
 80054e4:	f7fb fbdc 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 80054e8:	f240 5107 	movw	r1, #1287	@ 0x507
 80054ec:	2034      	movs	r0, #52	@ 0x34
 80054ee:	f7fb fbd7 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80054f2:	f44f 7101 	mov.w	r1, #516	@ 0x204
 80054f6:	2035      	movs	r0, #53	@ 0x35
 80054f8:	f7fb fbd2 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 80054fc:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8005500:	2036      	movs	r0, #54	@ 0x36
 8005502:	f7fb fbcd 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 8005506:	f240 5102 	movw	r1, #1282	@ 0x502
 800550a:	2037      	movs	r0, #55	@ 0x37
 800550c:	f7fb fbc8 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8005510:	f240 3102 	movw	r1, #770	@ 0x302
 8005514:	203a      	movs	r0, #58	@ 0x3a
 8005516:	f7fb fbc3 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 800551a:	f240 3102 	movw	r1, #770	@ 0x302
 800551e:	203b      	movs	r0, #59	@ 0x3b
 8005520:	f7fb fbbe 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8005524:	2100      	movs	r1, #0
 8005526:	2023      	movs	r0, #35	@ 0x23
 8005528:	f7fb fbba 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 800552c:	2100      	movs	r1, #0
 800552e:	2024      	movs	r0, #36	@ 0x24
 8005530:	f7fb fbb6 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8005534:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005538:	2025      	movs	r0, #37	@ 0x25
 800553a:	f7fb fbb1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 800553e:	2100      	movs	r1, #0
 8005540:	204f      	movs	r0, #79	@ 0x4f
 8005542:	f7fb fbad 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8005546:	2100      	movs	r1, #0
 8005548:	204e      	movs	r0, #78	@ 0x4e
 800554a:	f7fb fba9 	bl	8000ca0 <LCD_WriteReg>
 800554e:	f000 bd2d 	b.w	8005fac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8005552:	4b61      	ldr	r3, [pc, #388]	@ (80056d8 <LCD_Init+0x3560>)
 8005554:	889b      	ldrh	r3, [r3, #4]
 8005556:	f244 5231 	movw	r2, #17713	@ 0x4531
 800555a:	4293      	cmp	r3, r2
 800555c:	f040 80be 	bne.w	80056dc <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8005560:	2101      	movs	r1, #1
 8005562:	2000      	movs	r0, #0
 8005564:	f7fb fb9c 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(10);
 8005568:	200a      	movs	r0, #10
 800556a:	f001 fd09 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 800556e:	f241 6128 	movw	r1, #5672	@ 0x1628
 8005572:	2010      	movs	r0, #16
 8005574:	f7fb fb94 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8005578:	210e      	movs	r1, #14
 800557a:	2012      	movs	r0, #18
 800557c:	f7fb fb90 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8005580:	f640 2139 	movw	r1, #2617	@ 0xa39
 8005584:	2013      	movs	r0, #19
 8005586:	f7fb fb8b 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(10);
 800558a:	200a      	movs	r0, #10
 800558c:	f001 fcf8 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8005590:	2140      	movs	r1, #64	@ 0x40
 8005592:	2011      	movs	r0, #17
 8005594:	f7fb fb84 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8005598:	2150      	movs	r1, #80	@ 0x50
 800559a:	2015      	movs	r0, #21
 800559c:	f7fb fb80 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(10);
 80055a0:	200a      	movs	r0, #10
 80055a2:	f001 fced 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 80055a6:	211e      	movs	r1, #30
 80055a8:	2012      	movs	r0, #18
 80055aa:	f7fb fb79 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(10);
 80055ae:	200a      	movs	r0, #10
 80055b0:	f001 fce6 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 80055b4:	f44f 51b1 	mov.w	r1, #5664	@ 0x1620
 80055b8:	2010      	movs	r0, #16
 80055ba:	f7fb fb71 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 80055be:	f642 2139 	movw	r1, #10809	@ 0x2a39
 80055c2:	2013      	movs	r0, #19
 80055c4:	f7fb fb6c 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(10);
 80055c8:	200a      	movs	r0, #10
 80055ca:	f001 fcd9 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 80055ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80055d2:	2001      	movs	r0, #1
 80055d4:	f7fb fb64 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80055d8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80055dc:	2002      	movs	r0, #2
 80055de:	f7fb fb5f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 80055e2:	f241 0138 	movw	r1, #4152	@ 0x1038
 80055e6:	2003      	movs	r0, #3
 80055e8:	f7fb fb5a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 80055ec:	f240 2102 	movw	r1, #514	@ 0x202
 80055f0:	2008      	movs	r0, #8
 80055f2:	f7fb fb55 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80055f6:	2108      	movs	r1, #8
 80055f8:	200a      	movs	r0, #10
 80055fa:	f7fb fb51 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 80055fe:	2100      	movs	r1, #0
 8005600:	2030      	movs	r0, #48	@ 0x30
 8005602:	f7fb fb4d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8005606:	f240 4102 	movw	r1, #1026	@ 0x402
 800560a:	2031      	movs	r0, #49	@ 0x31
 800560c:	f7fb fb48 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8005610:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8005614:	2032      	movs	r0, #50	@ 0x32
 8005616:	f7fb fb43 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 800561a:	f240 5103 	movw	r1, #1283	@ 0x503
 800561e:	2033      	movs	r0, #51	@ 0x33
 8005620:	f7fb fb3e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8005624:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8005628:	2034      	movs	r0, #52	@ 0x34
 800562a:	f7fb fb39 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 800562e:	f240 3101 	movw	r1, #769	@ 0x301
 8005632:	2035      	movs	r0, #53	@ 0x35
 8005634:	f7fb fb34 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005638:	f240 7107 	movw	r1, #1799	@ 0x707
 800563c:	2036      	movs	r0, #54	@ 0x36
 800563e:	f7fb fb2f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005642:	f240 3105 	movw	r1, #773	@ 0x305
 8005646:	2037      	movs	r0, #55	@ 0x37
 8005648:	f7fb fb2a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 800564c:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8005650:	2038      	movs	r0, #56	@ 0x38
 8005652:	f7fb fb25 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8005656:	f640 710b 	movw	r1, #3851	@ 0xf0b
 800565a:	2039      	movs	r0, #57	@ 0x39
 800565c:	f7fb fb20 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8005660:	2102      	movs	r1, #2
 8005662:	2041      	movs	r0, #65	@ 0x41
 8005664:	f7fb fb1c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005668:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 800566c:	2060      	movs	r0, #96	@ 0x60
 800566e:	f7fb fb17 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8005672:	2101      	movs	r1, #1
 8005674:	2061      	movs	r0, #97	@ 0x61
 8005676:	f7fb fb13 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 800567a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800567e:	2090      	movs	r0, #144	@ 0x90
 8005680:	f7fb fb0e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 8005684:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8005688:	2092      	movs	r0, #146	@ 0x92
 800568a:	f7fb fb09 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 800568e:	2104      	movs	r1, #4
 8005690:	2093      	movs	r0, #147	@ 0x93
 8005692:	f7fb fb05 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 8005696:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800569a:	20a0      	movs	r0, #160	@ 0xa0
 800569c:	f7fb fb00 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80056a0:	2101      	movs	r1, #1
 80056a2:	2007      	movs	r0, #7
 80056a4:	f7fb fafc 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80056a8:	2121      	movs	r1, #33	@ 0x21
 80056aa:	2007      	movs	r0, #7
 80056ac:	f7fb faf8 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80056b0:	2123      	movs	r1, #35	@ 0x23
 80056b2:	2007      	movs	r0, #7
 80056b4:	f7fb faf4 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80056b8:	2133      	movs	r1, #51	@ 0x33
 80056ba:	2007      	movs	r0, #7
 80056bc:	f7fb faf0 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80056c0:	f240 1133 	movw	r1, #307	@ 0x133
 80056c4:	2007      	movs	r0, #7
 80056c6:	f7fb faeb 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 80056ca:	2100      	movs	r1, #0
 80056cc:	20a0      	movs	r0, #160	@ 0xa0
 80056ce:	f7fb fae7 	bl	8000ca0 <LCD_WriteReg>
 80056d2:	f000 bc6b 	b.w	8005fac <LCD_Init+0x3e34>
 80056d6:	bf00      	nop
 80056d8:	200000cc 	.word	0x200000cc
	} else if (lcddev.id == 0x4535) {
 80056dc:	4b5b      	ldr	r3, [pc, #364]	@ (800584c <LCD_Init+0x36d4>)
 80056de:	889b      	ldrh	r3, [r3, #4]
 80056e0:	f244 5235 	movw	r2, #17717	@ 0x4535
 80056e4:	4293      	cmp	r3, r2
 80056e6:	f040 80b3 	bne.w	8005850 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 80056ea:	2130      	movs	r1, #48	@ 0x30
 80056ec:	2015      	movs	r0, #21
 80056ee:	f7fb fad7 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 80056f2:	2110      	movs	r1, #16
 80056f4:	209a      	movs	r0, #154	@ 0x9a
 80056f6:	f7fb fad3 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 80056fa:	2120      	movs	r1, #32
 80056fc:	2011      	movs	r0, #17
 80056fe:	f7fb facf 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 8005702:	f243 4128 	movw	r1, #13352	@ 0x3428
 8005706:	2010      	movs	r0, #16
 8005708:	f7fb faca 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 800570c:	2102      	movs	r1, #2
 800570e:	2012      	movs	r0, #18
 8005710:	f7fb fac6 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8005714:	f241 0138 	movw	r1, #4152	@ 0x1038
 8005718:	2013      	movs	r0, #19
 800571a:	f7fb fac1 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(40);
 800571e:	2028      	movs	r0, #40	@ 0x28
 8005720:	f001 fc2e 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8005724:	2112      	movs	r1, #18
 8005726:	2012      	movs	r0, #18
 8005728:	f7fb faba 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(40);
 800572c:	2028      	movs	r0, #40	@ 0x28
 800572e:	f001 fc27 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8005732:	f243 4120 	movw	r1, #13344	@ 0x3420
 8005736:	2010      	movs	r0, #16
 8005738:	f7fb fab2 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 800573c:	f243 0138 	movw	r1, #12344	@ 0x3038
 8005740:	2013      	movs	r0, #19
 8005742:	f7fb faad 	bl	8000ca0 <LCD_WriteReg>
		HAL_Delay(70);
 8005746:	2046      	movs	r0, #70	@ 0x46
 8005748:	f001 fc1a 	bl	8006f80 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 800574c:	2100      	movs	r1, #0
 800574e:	2030      	movs	r0, #48	@ 0x30
 8005750:	f7fb faa6 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8005754:	f240 4102 	movw	r1, #1026	@ 0x402
 8005758:	2031      	movs	r0, #49	@ 0x31
 800575a:	f7fb faa1 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 800575e:	f240 3107 	movw	r1, #775	@ 0x307
 8005762:	2032      	movs	r0, #50	@ 0x32
 8005764:	f7fb fa9c 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8005768:	f44f 7141 	mov.w	r1, #772	@ 0x304
 800576c:	2033      	movs	r0, #51	@ 0x33
 800576e:	f7fb fa97 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 8005772:	2104      	movs	r1, #4
 8005774:	2034      	movs	r0, #52	@ 0x34
 8005776:	f7fb fa93 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 800577a:	f240 4101 	movw	r1, #1025	@ 0x401
 800577e:	2035      	movs	r0, #53	@ 0x35
 8005780:	f7fb fa8e 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005784:	f240 7107 	movw	r1, #1799	@ 0x707
 8005788:	2036      	movs	r0, #54	@ 0x36
 800578a:	f7fb fa89 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 800578e:	f240 3105 	movw	r1, #773	@ 0x305
 8005792:	2037      	movs	r0, #55	@ 0x37
 8005794:	f7fb fa84 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8005798:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 800579c:	2038      	movs	r0, #56	@ 0x38
 800579e:	f7fb fa7f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 80057a2:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 80057a6:	2039      	movs	r0, #57	@ 0x39
 80057a8:	f7fb fa7a 	bl	8000ca0 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 80057ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80057b0:	2001      	movs	r0, #1
 80057b2:	f7fb fa75 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80057b6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80057ba:	2002      	movs	r0, #2
 80057bc:	f7fb fa70 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 80057c0:	f241 0130 	movw	r1, #4144	@ 0x1030
 80057c4:	2003      	movs	r0, #3
 80057c6:	f7fb fa6b 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 80057ca:	f640 0108 	movw	r1, #2056	@ 0x808
 80057ce:	2008      	movs	r0, #8
 80057d0:	f7fb fa66 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80057d4:	2108      	movs	r1, #8
 80057d6:	200a      	movs	r0, #10
 80057d8:	f7fb fa62 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80057dc:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 80057e0:	2060      	movs	r0, #96	@ 0x60
 80057e2:	f7fb fa5d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80057e6:	2101      	movs	r1, #1
 80057e8:	2061      	movs	r0, #97	@ 0x61
 80057ea:	f7fb fa59 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 80057ee:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 80057f2:	2090      	movs	r0, #144	@ 0x90
 80057f4:	f7fb fa54 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 80057f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80057fc:	2092      	movs	r0, #146	@ 0x92
 80057fe:	f7fb fa4f 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 8005802:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005806:	2093      	movs	r0, #147	@ 0x93
 8005808:	f7fb fa4a 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 800580c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8005810:	20a0      	movs	r0, #160	@ 0xa0
 8005812:	f7fb fa45 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 8005816:	2110      	movs	r1, #16
 8005818:	20a3      	movs	r0, #163	@ 0xa3
 800581a:	f7fb fa41 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 800581e:	2101      	movs	r1, #1
 8005820:	2007      	movs	r0, #7
 8005822:	f7fb fa3d 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005826:	2121      	movs	r1, #33	@ 0x21
 8005828:	2007      	movs	r0, #7
 800582a:	f7fb fa39 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 800582e:	2123      	movs	r1, #35	@ 0x23
 8005830:	2007      	movs	r0, #7
 8005832:	f7fb fa35 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005836:	2133      	movs	r1, #51	@ 0x33
 8005838:	2007      	movs	r0, #7
 800583a:	f7fb fa31 	bl	8000ca0 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 800583e:	f240 1133 	movw	r1, #307	@ 0x133
 8005842:	2007      	movs	r0, #7
 8005844:	f7fb fa2c 	bl	8000ca0 <LCD_WriteReg>
 8005848:	e3b0      	b.n	8005fac <LCD_Init+0x3e34>
 800584a:	bf00      	nop
 800584c:	200000cc 	.word	0x200000cc
	} else if (lcddev.id == 0X1963) {
 8005850:	4ba8      	ldr	r3, [pc, #672]	@ (8005af4 <LCD_Init+0x397c>)
 8005852:	889b      	ldrh	r3, [r3, #4]
 8005854:	f641 1263 	movw	r2, #6499	@ 0x1963
 8005858:	4293      	cmp	r3, r2
 800585a:	f040 83a7 	bne.w	8005fac <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 800585e:	20e2      	movs	r0, #226	@ 0xe2
 8005860:	f7fb f992 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 8005864:	4ba4      	ldr	r3, [pc, #656]	@ (8005af8 <LCD_Init+0x3980>)
 8005866:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800586a:	611a      	str	r2, [r3, #16]
 800586c:	4ba2      	ldr	r3, [pc, #648]	@ (8005af8 <LCD_Init+0x3980>)
 800586e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005872:	615a      	str	r2, [r3, #20]
 8005874:	4ba1      	ldr	r3, [pc, #644]	@ (8005afc <LCD_Init+0x3984>)
 8005876:	221d      	movs	r2, #29
 8005878:	60da      	str	r2, [r3, #12]
 800587a:	4b9f      	ldr	r3, [pc, #636]	@ (8005af8 <LCD_Init+0x3980>)
 800587c:	2280      	movs	r2, #128	@ 0x80
 800587e:	615a      	str	r2, [r3, #20]
 8005880:	4b9d      	ldr	r3, [pc, #628]	@ (8005af8 <LCD_Init+0x3980>)
 8005882:	2280      	movs	r2, #128	@ 0x80
 8005884:	611a      	str	r2, [r3, #16]
 8005886:	4b9c      	ldr	r3, [pc, #624]	@ (8005af8 <LCD_Init+0x3980>)
 8005888:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800588c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 800588e:	4b9a      	ldr	r3, [pc, #616]	@ (8005af8 <LCD_Init+0x3980>)
 8005890:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005894:	611a      	str	r2, [r3, #16]
 8005896:	4b98      	ldr	r3, [pc, #608]	@ (8005af8 <LCD_Init+0x3980>)
 8005898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800589c:	615a      	str	r2, [r3, #20]
 800589e:	4b97      	ldr	r3, [pc, #604]	@ (8005afc <LCD_Init+0x3984>)
 80058a0:	2202      	movs	r2, #2
 80058a2:	60da      	str	r2, [r3, #12]
 80058a4:	4b94      	ldr	r3, [pc, #592]	@ (8005af8 <LCD_Init+0x3980>)
 80058a6:	2280      	movs	r2, #128	@ 0x80
 80058a8:	615a      	str	r2, [r3, #20]
 80058aa:	4b93      	ldr	r3, [pc, #588]	@ (8005af8 <LCD_Init+0x3980>)
 80058ac:	2280      	movs	r2, #128	@ 0x80
 80058ae:	611a      	str	r2, [r3, #16]
 80058b0:	4b91      	ldr	r3, [pc, #580]	@ (8005af8 <LCD_Init+0x3980>)
 80058b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058b6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 80058b8:	4b8f      	ldr	r3, [pc, #572]	@ (8005af8 <LCD_Init+0x3980>)
 80058ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058be:	611a      	str	r2, [r3, #16]
 80058c0:	4b8d      	ldr	r3, [pc, #564]	@ (8005af8 <LCD_Init+0x3980>)
 80058c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058c6:	615a      	str	r2, [r3, #20]
 80058c8:	4b8c      	ldr	r3, [pc, #560]	@ (8005afc <LCD_Init+0x3984>)
 80058ca:	2204      	movs	r2, #4
 80058cc:	60da      	str	r2, [r3, #12]
 80058ce:	4b8a      	ldr	r3, [pc, #552]	@ (8005af8 <LCD_Init+0x3980>)
 80058d0:	2280      	movs	r2, #128	@ 0x80
 80058d2:	615a      	str	r2, [r3, #20]
 80058d4:	4b88      	ldr	r3, [pc, #544]	@ (8005af8 <LCD_Init+0x3980>)
 80058d6:	2280      	movs	r2, #128	@ 0x80
 80058d8:	611a      	str	r2, [r3, #16]
 80058da:	4b87      	ldr	r3, [pc, #540]	@ (8005af8 <LCD_Init+0x3980>)
 80058dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058e0:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 80058e2:	2001      	movs	r0, #1
 80058e4:	f001 fb4c 	bl	8006f80 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 80058e8:	20e0      	movs	r0, #224	@ 0xe0
 80058ea:	f7fb f94d 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 80058ee:	4b82      	ldr	r3, [pc, #520]	@ (8005af8 <LCD_Init+0x3980>)
 80058f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058f4:	611a      	str	r2, [r3, #16]
 80058f6:	4b80      	ldr	r3, [pc, #512]	@ (8005af8 <LCD_Init+0x3980>)
 80058f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058fc:	615a      	str	r2, [r3, #20]
 80058fe:	4b7f      	ldr	r3, [pc, #508]	@ (8005afc <LCD_Init+0x3984>)
 8005900:	2201      	movs	r2, #1
 8005902:	60da      	str	r2, [r3, #12]
 8005904:	4b7c      	ldr	r3, [pc, #496]	@ (8005af8 <LCD_Init+0x3980>)
 8005906:	2280      	movs	r2, #128	@ 0x80
 8005908:	615a      	str	r2, [r3, #20]
 800590a:	4b7b      	ldr	r3, [pc, #492]	@ (8005af8 <LCD_Init+0x3980>)
 800590c:	2280      	movs	r2, #128	@ 0x80
 800590e:	611a      	str	r2, [r3, #16]
 8005910:	4b79      	ldr	r3, [pc, #484]	@ (8005af8 <LCD_Init+0x3980>)
 8005912:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005916:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8005918:	200a      	movs	r0, #10
 800591a:	f001 fb31 	bl	8006f80 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 800591e:	20e0      	movs	r0, #224	@ 0xe0
 8005920:	f7fb f932 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 8005924:	4b74      	ldr	r3, [pc, #464]	@ (8005af8 <LCD_Init+0x3980>)
 8005926:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800592a:	611a      	str	r2, [r3, #16]
 800592c:	4b72      	ldr	r3, [pc, #456]	@ (8005af8 <LCD_Init+0x3980>)
 800592e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005932:	615a      	str	r2, [r3, #20]
 8005934:	4b71      	ldr	r3, [pc, #452]	@ (8005afc <LCD_Init+0x3984>)
 8005936:	2203      	movs	r2, #3
 8005938:	60da      	str	r2, [r3, #12]
 800593a:	4b6f      	ldr	r3, [pc, #444]	@ (8005af8 <LCD_Init+0x3980>)
 800593c:	2280      	movs	r2, #128	@ 0x80
 800593e:	615a      	str	r2, [r3, #20]
 8005940:	4b6d      	ldr	r3, [pc, #436]	@ (8005af8 <LCD_Init+0x3980>)
 8005942:	2280      	movs	r2, #128	@ 0x80
 8005944:	611a      	str	r2, [r3, #16]
 8005946:	4b6c      	ldr	r3, [pc, #432]	@ (8005af8 <LCD_Init+0x3980>)
 8005948:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800594c:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 800594e:	200c      	movs	r0, #12
 8005950:	f001 fb16 	bl	8006f80 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8005954:	2001      	movs	r0, #1
 8005956:	f7fb f917 	bl	8000b88 <LCD_WR_REG>
		HAL_Delay(10);
 800595a:	200a      	movs	r0, #10
 800595c:	f001 fb10 	bl	8006f80 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005960:	20e6      	movs	r0, #230	@ 0xe6
 8005962:	f7fb f911 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8005966:	4b64      	ldr	r3, [pc, #400]	@ (8005af8 <LCD_Init+0x3980>)
 8005968:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800596c:	611a      	str	r2, [r3, #16]
 800596e:	4b62      	ldr	r3, [pc, #392]	@ (8005af8 <LCD_Init+0x3980>)
 8005970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005974:	615a      	str	r2, [r3, #20]
 8005976:	4b61      	ldr	r3, [pc, #388]	@ (8005afc <LCD_Init+0x3984>)
 8005978:	222f      	movs	r2, #47	@ 0x2f
 800597a:	60da      	str	r2, [r3, #12]
 800597c:	4b5e      	ldr	r3, [pc, #376]	@ (8005af8 <LCD_Init+0x3980>)
 800597e:	2280      	movs	r2, #128	@ 0x80
 8005980:	615a      	str	r2, [r3, #20]
 8005982:	4b5d      	ldr	r3, [pc, #372]	@ (8005af8 <LCD_Init+0x3980>)
 8005984:	2280      	movs	r2, #128	@ 0x80
 8005986:	611a      	str	r2, [r3, #16]
 8005988:	4b5b      	ldr	r3, [pc, #364]	@ (8005af8 <LCD_Init+0x3980>)
 800598a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800598e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005990:	4b59      	ldr	r3, [pc, #356]	@ (8005af8 <LCD_Init+0x3980>)
 8005992:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005996:	611a      	str	r2, [r3, #16]
 8005998:	4b57      	ldr	r3, [pc, #348]	@ (8005af8 <LCD_Init+0x3980>)
 800599a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800599e:	615a      	str	r2, [r3, #20]
 80059a0:	4b56      	ldr	r3, [pc, #344]	@ (8005afc <LCD_Init+0x3984>)
 80059a2:	22ff      	movs	r2, #255	@ 0xff
 80059a4:	60da      	str	r2, [r3, #12]
 80059a6:	4b54      	ldr	r3, [pc, #336]	@ (8005af8 <LCD_Init+0x3980>)
 80059a8:	2280      	movs	r2, #128	@ 0x80
 80059aa:	615a      	str	r2, [r3, #20]
 80059ac:	4b52      	ldr	r3, [pc, #328]	@ (8005af8 <LCD_Init+0x3980>)
 80059ae:	2280      	movs	r2, #128	@ 0x80
 80059b0:	611a      	str	r2, [r3, #16]
 80059b2:	4b51      	ldr	r3, [pc, #324]	@ (8005af8 <LCD_Init+0x3980>)
 80059b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059b8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80059ba:	4b4f      	ldr	r3, [pc, #316]	@ (8005af8 <LCD_Init+0x3980>)
 80059bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059c0:	611a      	str	r2, [r3, #16]
 80059c2:	4b4d      	ldr	r3, [pc, #308]	@ (8005af8 <LCD_Init+0x3980>)
 80059c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059c8:	615a      	str	r2, [r3, #20]
 80059ca:	4b4c      	ldr	r3, [pc, #304]	@ (8005afc <LCD_Init+0x3984>)
 80059cc:	22ff      	movs	r2, #255	@ 0xff
 80059ce:	60da      	str	r2, [r3, #12]
 80059d0:	4b49      	ldr	r3, [pc, #292]	@ (8005af8 <LCD_Init+0x3980>)
 80059d2:	2280      	movs	r2, #128	@ 0x80
 80059d4:	615a      	str	r2, [r3, #20]
 80059d6:	4b48      	ldr	r3, [pc, #288]	@ (8005af8 <LCD_Init+0x3980>)
 80059d8:	2280      	movs	r2, #128	@ 0x80
 80059da:	611a      	str	r2, [r3, #16]
 80059dc:	4b46      	ldr	r3, [pc, #280]	@ (8005af8 <LCD_Init+0x3980>)
 80059de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059e2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 80059e4:	20b0      	movs	r0, #176	@ 0xb0
 80059e6:	f7fb f8cf 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 80059ea:	4b43      	ldr	r3, [pc, #268]	@ (8005af8 <LCD_Init+0x3980>)
 80059ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059f0:	611a      	str	r2, [r3, #16]
 80059f2:	4b41      	ldr	r3, [pc, #260]	@ (8005af8 <LCD_Init+0x3980>)
 80059f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059f8:	615a      	str	r2, [r3, #20]
 80059fa:	4b40      	ldr	r3, [pc, #256]	@ (8005afc <LCD_Init+0x3984>)
 80059fc:	2220      	movs	r2, #32
 80059fe:	60da      	str	r2, [r3, #12]
 8005a00:	4b3d      	ldr	r3, [pc, #244]	@ (8005af8 <LCD_Init+0x3980>)
 8005a02:	2280      	movs	r2, #128	@ 0x80
 8005a04:	615a      	str	r2, [r3, #20]
 8005a06:	4b3c      	ldr	r3, [pc, #240]	@ (8005af8 <LCD_Init+0x3980>)
 8005a08:	2280      	movs	r2, #128	@ 0x80
 8005a0a:	611a      	str	r2, [r3, #16]
 8005a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8005af8 <LCD_Init+0x3980>)
 8005a0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a12:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8005a14:	4b38      	ldr	r3, [pc, #224]	@ (8005af8 <LCD_Init+0x3980>)
 8005a16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a1a:	611a      	str	r2, [r3, #16]
 8005a1c:	4b36      	ldr	r3, [pc, #216]	@ (8005af8 <LCD_Init+0x3980>)
 8005a1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a22:	615a      	str	r2, [r3, #20]
 8005a24:	4b35      	ldr	r3, [pc, #212]	@ (8005afc <LCD_Init+0x3984>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	60da      	str	r2, [r3, #12]
 8005a2a:	4b33      	ldr	r3, [pc, #204]	@ (8005af8 <LCD_Init+0x3980>)
 8005a2c:	2280      	movs	r2, #128	@ 0x80
 8005a2e:	615a      	str	r2, [r3, #20]
 8005a30:	4b31      	ldr	r3, [pc, #196]	@ (8005af8 <LCD_Init+0x3980>)
 8005a32:	2280      	movs	r2, #128	@ 0x80
 8005a34:	611a      	str	r2, [r3, #16]
 8005a36:	4b30      	ldr	r3, [pc, #192]	@ (8005af8 <LCD_Init+0x3980>)
 8005a38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a3c:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 8005a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8005af8 <LCD_Init+0x3980>)
 8005a40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a44:	611a      	str	r2, [r3, #16]
 8005a46:	4b2c      	ldr	r3, [pc, #176]	@ (8005af8 <LCD_Init+0x3980>)
 8005a48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a4c:	615a      	str	r2, [r3, #20]
 8005a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8005afc <LCD_Init+0x3984>)
 8005a50:	2203      	movs	r2, #3
 8005a52:	60da      	str	r2, [r3, #12]
 8005a54:	4b28      	ldr	r3, [pc, #160]	@ (8005af8 <LCD_Init+0x3980>)
 8005a56:	2280      	movs	r2, #128	@ 0x80
 8005a58:	615a      	str	r2, [r3, #20]
 8005a5a:	4b27      	ldr	r3, [pc, #156]	@ (8005af8 <LCD_Init+0x3980>)
 8005a5c:	2280      	movs	r2, #128	@ 0x80
 8005a5e:	611a      	str	r2, [r3, #16]
 8005a60:	4b25      	ldr	r3, [pc, #148]	@ (8005af8 <LCD_Init+0x3980>)
 8005a62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a66:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005a68:	4b23      	ldr	r3, [pc, #140]	@ (8005af8 <LCD_Init+0x3980>)
 8005a6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a6e:	611a      	str	r2, [r3, #16]
 8005a70:	4b21      	ldr	r3, [pc, #132]	@ (8005af8 <LCD_Init+0x3980>)
 8005a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a76:	615a      	str	r2, [r3, #20]
 8005a78:	4b20      	ldr	r3, [pc, #128]	@ (8005afc <LCD_Init+0x3984>)
 8005a7a:	f240 321f 	movw	r2, #799	@ 0x31f
 8005a7e:	60da      	str	r2, [r3, #12]
 8005a80:	4b1d      	ldr	r3, [pc, #116]	@ (8005af8 <LCD_Init+0x3980>)
 8005a82:	2280      	movs	r2, #128	@ 0x80
 8005a84:	615a      	str	r2, [r3, #20]
 8005a86:	4b1c      	ldr	r3, [pc, #112]	@ (8005af8 <LCD_Init+0x3980>)
 8005a88:	2280      	movs	r2, #128	@ 0x80
 8005a8a:	611a      	str	r2, [r3, #16]
 8005a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8005af8 <LCD_Init+0x3980>)
 8005a8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a92:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 8005a94:	4b18      	ldr	r3, [pc, #96]	@ (8005af8 <LCD_Init+0x3980>)
 8005a96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a9a:	611a      	str	r2, [r3, #16]
 8005a9c:	4b16      	ldr	r3, [pc, #88]	@ (8005af8 <LCD_Init+0x3980>)
 8005a9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005aa2:	615a      	str	r2, [r3, #20]
 8005aa4:	4b15      	ldr	r3, [pc, #84]	@ (8005afc <LCD_Init+0x3984>)
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	60da      	str	r2, [r3, #12]
 8005aaa:	4b13      	ldr	r3, [pc, #76]	@ (8005af8 <LCD_Init+0x3980>)
 8005aac:	2280      	movs	r2, #128	@ 0x80
 8005aae:	615a      	str	r2, [r3, #20]
 8005ab0:	4b11      	ldr	r3, [pc, #68]	@ (8005af8 <LCD_Init+0x3980>)
 8005ab2:	2280      	movs	r2, #128	@ 0x80
 8005ab4:	611a      	str	r2, [r3, #16]
 8005ab6:	4b10      	ldr	r3, [pc, #64]	@ (8005af8 <LCD_Init+0x3980>)
 8005ab8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005abc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8005abe:	4b0e      	ldr	r3, [pc, #56]	@ (8005af8 <LCD_Init+0x3980>)
 8005ac0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ac4:	611a      	str	r2, [r3, #16]
 8005ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8005af8 <LCD_Init+0x3980>)
 8005ac8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005acc:	615a      	str	r2, [r3, #20]
 8005ace:	4b0b      	ldr	r3, [pc, #44]	@ (8005afc <LCD_Init+0x3984>)
 8005ad0:	f240 12df 	movw	r2, #479	@ 0x1df
 8005ad4:	60da      	str	r2, [r3, #12]
 8005ad6:	4b08      	ldr	r3, [pc, #32]	@ (8005af8 <LCD_Init+0x3980>)
 8005ad8:	2280      	movs	r2, #128	@ 0x80
 8005ada:	615a      	str	r2, [r3, #20]
 8005adc:	4b06      	ldr	r3, [pc, #24]	@ (8005af8 <LCD_Init+0x3980>)
 8005ade:	2280      	movs	r2, #128	@ 0x80
 8005ae0:	611a      	str	r2, [r3, #16]
 8005ae2:	4b05      	ldr	r3, [pc, #20]	@ (8005af8 <LCD_Init+0x3980>)
 8005ae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ae8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 8005aea:	4b03      	ldr	r3, [pc, #12]	@ (8005af8 <LCD_Init+0x3980>)
 8005aec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005af0:	e006      	b.n	8005b00 <LCD_Init+0x3988>
 8005af2:	bf00      	nop
 8005af4:	200000cc 	.word	0x200000cc
 8005af8:	40011000 	.word	0x40011000
 8005afc:	40010c00 	.word	0x40010c00
 8005b00:	611a      	str	r2, [r3, #16]
 8005b02:	4ba3      	ldr	r3, [pc, #652]	@ (8005d90 <LCD_Init+0x3c18>)
 8005b04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b08:	615a      	str	r2, [r3, #20]
 8005b0a:	4ba2      	ldr	r3, [pc, #648]	@ (8005d94 <LCD_Init+0x3c1c>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	60da      	str	r2, [r3, #12]
 8005b10:	4b9f      	ldr	r3, [pc, #636]	@ (8005d90 <LCD_Init+0x3c18>)
 8005b12:	2280      	movs	r2, #128	@ 0x80
 8005b14:	615a      	str	r2, [r3, #20]
 8005b16:	4b9e      	ldr	r3, [pc, #632]	@ (8005d90 <LCD_Init+0x3c18>)
 8005b18:	2280      	movs	r2, #128	@ 0x80
 8005b1a:	611a      	str	r2, [r3, #16]
 8005b1c:	4b9c      	ldr	r3, [pc, #624]	@ (8005d90 <LCD_Init+0x3c18>)
 8005b1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b22:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005b24:	20b4      	movs	r0, #180	@ 0xb4
 8005b26:	f7fb f82f 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8005b2a:	4b99      	ldr	r3, [pc, #612]	@ (8005d90 <LCD_Init+0x3c18>)
 8005b2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b30:	611a      	str	r2, [r3, #16]
 8005b32:	4b97      	ldr	r3, [pc, #604]	@ (8005d90 <LCD_Init+0x3c18>)
 8005b34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b38:	615a      	str	r2, [r3, #20]
 8005b3a:	4b96      	ldr	r3, [pc, #600]	@ (8005d94 <LCD_Init+0x3c1c>)
 8005b3c:	2204      	movs	r2, #4
 8005b3e:	60da      	str	r2, [r3, #12]
 8005b40:	4b93      	ldr	r3, [pc, #588]	@ (8005d90 <LCD_Init+0x3c18>)
 8005b42:	2280      	movs	r2, #128	@ 0x80
 8005b44:	615a      	str	r2, [r3, #20]
 8005b46:	4b92      	ldr	r3, [pc, #584]	@ (8005d90 <LCD_Init+0x3c18>)
 8005b48:	2280      	movs	r2, #128	@ 0x80
 8005b4a:	611a      	str	r2, [r3, #16]
 8005b4c:	4b90      	ldr	r3, [pc, #576]	@ (8005d90 <LCD_Init+0x3c18>)
 8005b4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b52:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8005b54:	4b8e      	ldr	r3, [pc, #568]	@ (8005d90 <LCD_Init+0x3c18>)
 8005b56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b5a:	611a      	str	r2, [r3, #16]
 8005b5c:	4b8c      	ldr	r3, [pc, #560]	@ (8005d90 <LCD_Init+0x3c18>)
 8005b5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b62:	615a      	str	r2, [r3, #20]
 8005b64:	4b8b      	ldr	r3, [pc, #556]	@ (8005d94 <LCD_Init+0x3c1c>)
 8005b66:	f240 421f 	movw	r2, #1055	@ 0x41f
 8005b6a:	60da      	str	r2, [r3, #12]
 8005b6c:	4b88      	ldr	r3, [pc, #544]	@ (8005d90 <LCD_Init+0x3c18>)
 8005b6e:	2280      	movs	r2, #128	@ 0x80
 8005b70:	615a      	str	r2, [r3, #20]
 8005b72:	4b87      	ldr	r3, [pc, #540]	@ (8005d90 <LCD_Init+0x3c18>)
 8005b74:	2280      	movs	r2, #128	@ 0x80
 8005b76:	611a      	str	r2, [r3, #16]
 8005b78:	4b85      	ldr	r3, [pc, #532]	@ (8005d90 <LCD_Init+0x3c18>)
 8005b7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b7e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8005b80:	4b83      	ldr	r3, [pc, #524]	@ (8005d90 <LCD_Init+0x3c18>)
 8005b82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b86:	611a      	str	r2, [r3, #16]
 8005b88:	4b81      	ldr	r3, [pc, #516]	@ (8005d90 <LCD_Init+0x3c18>)
 8005b8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b8e:	615a      	str	r2, [r3, #20]
 8005b90:	4b80      	ldr	r3, [pc, #512]	@ (8005d94 <LCD_Init+0x3c1c>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	60da      	str	r2, [r3, #12]
 8005b96:	4b7e      	ldr	r3, [pc, #504]	@ (8005d90 <LCD_Init+0x3c18>)
 8005b98:	2280      	movs	r2, #128	@ 0x80
 8005b9a:	615a      	str	r2, [r3, #20]
 8005b9c:	4b7c      	ldr	r3, [pc, #496]	@ (8005d90 <LCD_Init+0x3c18>)
 8005b9e:	2280      	movs	r2, #128	@ 0x80
 8005ba0:	611a      	str	r2, [r3, #16]
 8005ba2:	4b7b      	ldr	r3, [pc, #492]	@ (8005d90 <LCD_Init+0x3c18>)
 8005ba4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ba8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 8005baa:	4b79      	ldr	r3, [pc, #484]	@ (8005d90 <LCD_Init+0x3c18>)
 8005bac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005bb0:	611a      	str	r2, [r3, #16]
 8005bb2:	4b77      	ldr	r3, [pc, #476]	@ (8005d90 <LCD_Init+0x3c18>)
 8005bb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bb8:	615a      	str	r2, [r3, #20]
 8005bba:	4b76      	ldr	r3, [pc, #472]	@ (8005d94 <LCD_Init+0x3c1c>)
 8005bbc:	222e      	movs	r2, #46	@ 0x2e
 8005bbe:	60da      	str	r2, [r3, #12]
 8005bc0:	4b73      	ldr	r3, [pc, #460]	@ (8005d90 <LCD_Init+0x3c18>)
 8005bc2:	2280      	movs	r2, #128	@ 0x80
 8005bc4:	615a      	str	r2, [r3, #20]
 8005bc6:	4b72      	ldr	r3, [pc, #456]	@ (8005d90 <LCD_Init+0x3c18>)
 8005bc8:	2280      	movs	r2, #128	@ 0x80
 8005bca:	611a      	str	r2, [r3, #16]
 8005bcc:	4b70      	ldr	r3, [pc, #448]	@ (8005d90 <LCD_Init+0x3c18>)
 8005bce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bd2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8005bd4:	4b6e      	ldr	r3, [pc, #440]	@ (8005d90 <LCD_Init+0x3c18>)
 8005bd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005bda:	611a      	str	r2, [r3, #16]
 8005bdc:	4b6c      	ldr	r3, [pc, #432]	@ (8005d90 <LCD_Init+0x3c18>)
 8005bde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005be2:	615a      	str	r2, [r3, #20]
 8005be4:	4b6b      	ldr	r3, [pc, #428]	@ (8005d94 <LCD_Init+0x3c1c>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	60da      	str	r2, [r3, #12]
 8005bea:	4b69      	ldr	r3, [pc, #420]	@ (8005d90 <LCD_Init+0x3c18>)
 8005bec:	2280      	movs	r2, #128	@ 0x80
 8005bee:	615a      	str	r2, [r3, #20]
 8005bf0:	4b67      	ldr	r3, [pc, #412]	@ (8005d90 <LCD_Init+0x3c18>)
 8005bf2:	2280      	movs	r2, #128	@ 0x80
 8005bf4:	611a      	str	r2, [r3, #16]
 8005bf6:	4b66      	ldr	r3, [pc, #408]	@ (8005d90 <LCD_Init+0x3c18>)
 8005bf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bfc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005bfe:	4b64      	ldr	r3, [pc, #400]	@ (8005d90 <LCD_Init+0x3c18>)
 8005c00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c04:	611a      	str	r2, [r3, #16]
 8005c06:	4b62      	ldr	r3, [pc, #392]	@ (8005d90 <LCD_Init+0x3c18>)
 8005c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c0c:	615a      	str	r2, [r3, #20]
 8005c0e:	4b61      	ldr	r3, [pc, #388]	@ (8005d94 <LCD_Init+0x3c1c>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	60da      	str	r2, [r3, #12]
 8005c14:	4b5e      	ldr	r3, [pc, #376]	@ (8005d90 <LCD_Init+0x3c18>)
 8005c16:	2280      	movs	r2, #128	@ 0x80
 8005c18:	615a      	str	r2, [r3, #20]
 8005c1a:	4b5d      	ldr	r3, [pc, #372]	@ (8005d90 <LCD_Init+0x3c18>)
 8005c1c:	2280      	movs	r2, #128	@ 0x80
 8005c1e:	611a      	str	r2, [r3, #16]
 8005c20:	4b5b      	ldr	r3, [pc, #364]	@ (8005d90 <LCD_Init+0x3c18>)
 8005c22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c26:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005c28:	4b59      	ldr	r3, [pc, #356]	@ (8005d90 <LCD_Init+0x3c18>)
 8005c2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c2e:	611a      	str	r2, [r3, #16]
 8005c30:	4b57      	ldr	r3, [pc, #348]	@ (8005d90 <LCD_Init+0x3c18>)
 8005c32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c36:	615a      	str	r2, [r3, #20]
 8005c38:	4b56      	ldr	r3, [pc, #344]	@ (8005d94 <LCD_Init+0x3c1c>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	60da      	str	r2, [r3, #12]
 8005c3e:	4b54      	ldr	r3, [pc, #336]	@ (8005d90 <LCD_Init+0x3c18>)
 8005c40:	2280      	movs	r2, #128	@ 0x80
 8005c42:	615a      	str	r2, [r3, #20]
 8005c44:	4b52      	ldr	r3, [pc, #328]	@ (8005d90 <LCD_Init+0x3c18>)
 8005c46:	2280      	movs	r2, #128	@ 0x80
 8005c48:	611a      	str	r2, [r3, #16]
 8005c4a:	4b51      	ldr	r3, [pc, #324]	@ (8005d90 <LCD_Init+0x3c18>)
 8005c4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c50:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005c52:	4b4f      	ldr	r3, [pc, #316]	@ (8005d90 <LCD_Init+0x3c18>)
 8005c54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c58:	611a      	str	r2, [r3, #16]
 8005c5a:	4b4d      	ldr	r3, [pc, #308]	@ (8005d90 <LCD_Init+0x3c18>)
 8005c5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c60:	615a      	str	r2, [r3, #20]
 8005c62:	4b4c      	ldr	r3, [pc, #304]	@ (8005d94 <LCD_Init+0x3c1c>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	60da      	str	r2, [r3, #12]
 8005c68:	4b49      	ldr	r3, [pc, #292]	@ (8005d90 <LCD_Init+0x3c18>)
 8005c6a:	2280      	movs	r2, #128	@ 0x80
 8005c6c:	615a      	str	r2, [r3, #20]
 8005c6e:	4b48      	ldr	r3, [pc, #288]	@ (8005d90 <LCD_Init+0x3c18>)
 8005c70:	2280      	movs	r2, #128	@ 0x80
 8005c72:	611a      	str	r2, [r3, #16]
 8005c74:	4b46      	ldr	r3, [pc, #280]	@ (8005d90 <LCD_Init+0x3c18>)
 8005c76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c7a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8005c7c:	20b6      	movs	r0, #182	@ 0xb6
 8005c7e:	f7fa ff83 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8005c82:	4b43      	ldr	r3, [pc, #268]	@ (8005d90 <LCD_Init+0x3c18>)
 8005c84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c88:	611a      	str	r2, [r3, #16]
 8005c8a:	4b41      	ldr	r3, [pc, #260]	@ (8005d90 <LCD_Init+0x3c18>)
 8005c8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c90:	615a      	str	r2, [r3, #20]
 8005c92:	4b40      	ldr	r3, [pc, #256]	@ (8005d94 <LCD_Init+0x3c1c>)
 8005c94:	2202      	movs	r2, #2
 8005c96:	60da      	str	r2, [r3, #12]
 8005c98:	4b3d      	ldr	r3, [pc, #244]	@ (8005d90 <LCD_Init+0x3c18>)
 8005c9a:	2280      	movs	r2, #128	@ 0x80
 8005c9c:	615a      	str	r2, [r3, #20]
 8005c9e:	4b3c      	ldr	r3, [pc, #240]	@ (8005d90 <LCD_Init+0x3c18>)
 8005ca0:	2280      	movs	r2, #128	@ 0x80
 8005ca2:	611a      	str	r2, [r3, #16]
 8005ca4:	4b3a      	ldr	r3, [pc, #232]	@ (8005d90 <LCD_Init+0x3c18>)
 8005ca6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005caa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8005cac:	4b38      	ldr	r3, [pc, #224]	@ (8005d90 <LCD_Init+0x3c18>)
 8005cae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cb2:	611a      	str	r2, [r3, #16]
 8005cb4:	4b36      	ldr	r3, [pc, #216]	@ (8005d90 <LCD_Init+0x3c18>)
 8005cb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cba:	615a      	str	r2, [r3, #20]
 8005cbc:	4b35      	ldr	r3, [pc, #212]	@ (8005d94 <LCD_Init+0x3c1c>)
 8005cbe:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8005cc2:	60da      	str	r2, [r3, #12]
 8005cc4:	4b32      	ldr	r3, [pc, #200]	@ (8005d90 <LCD_Init+0x3c18>)
 8005cc6:	2280      	movs	r2, #128	@ 0x80
 8005cc8:	615a      	str	r2, [r3, #20]
 8005cca:	4b31      	ldr	r3, [pc, #196]	@ (8005d90 <LCD_Init+0x3c18>)
 8005ccc:	2280      	movs	r2, #128	@ 0x80
 8005cce:	611a      	str	r2, [r3, #16]
 8005cd0:	4b2f      	ldr	r3, [pc, #188]	@ (8005d90 <LCD_Init+0x3c18>)
 8005cd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cd6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8005d90 <LCD_Init+0x3c18>)
 8005cda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cde:	611a      	str	r2, [r3, #16]
 8005ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8005d90 <LCD_Init+0x3c18>)
 8005ce2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ce6:	615a      	str	r2, [r3, #20]
 8005ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8005d94 <LCD_Init+0x3c1c>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	60da      	str	r2, [r3, #12]
 8005cee:	4b28      	ldr	r3, [pc, #160]	@ (8005d90 <LCD_Init+0x3c18>)
 8005cf0:	2280      	movs	r2, #128	@ 0x80
 8005cf2:	615a      	str	r2, [r3, #20]
 8005cf4:	4b26      	ldr	r3, [pc, #152]	@ (8005d90 <LCD_Init+0x3c18>)
 8005cf6:	2280      	movs	r2, #128	@ 0x80
 8005cf8:	611a      	str	r2, [r3, #16]
 8005cfa:	4b25      	ldr	r3, [pc, #148]	@ (8005d90 <LCD_Init+0x3c18>)
 8005cfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d00:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8005d02:	4b23      	ldr	r3, [pc, #140]	@ (8005d90 <LCD_Init+0x3c18>)
 8005d04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d08:	611a      	str	r2, [r3, #16]
 8005d0a:	4b21      	ldr	r3, [pc, #132]	@ (8005d90 <LCD_Init+0x3c18>)
 8005d0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d10:	615a      	str	r2, [r3, #20]
 8005d12:	4b20      	ldr	r3, [pc, #128]	@ (8005d94 <LCD_Init+0x3c1c>)
 8005d14:	2217      	movs	r2, #23
 8005d16:	60da      	str	r2, [r3, #12]
 8005d18:	4b1d      	ldr	r3, [pc, #116]	@ (8005d90 <LCD_Init+0x3c18>)
 8005d1a:	2280      	movs	r2, #128	@ 0x80
 8005d1c:	615a      	str	r2, [r3, #20]
 8005d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8005d90 <LCD_Init+0x3c18>)
 8005d20:	2280      	movs	r2, #128	@ 0x80
 8005d22:	611a      	str	r2, [r3, #16]
 8005d24:	4b1a      	ldr	r3, [pc, #104]	@ (8005d90 <LCD_Init+0x3c18>)
 8005d26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d2a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8005d2c:	4b18      	ldr	r3, [pc, #96]	@ (8005d90 <LCD_Init+0x3c18>)
 8005d2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d32:	611a      	str	r2, [r3, #16]
 8005d34:	4b16      	ldr	r3, [pc, #88]	@ (8005d90 <LCD_Init+0x3c18>)
 8005d36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d3a:	615a      	str	r2, [r3, #20]
 8005d3c:	4b15      	ldr	r3, [pc, #84]	@ (8005d94 <LCD_Init+0x3c1c>)
 8005d3e:	2215      	movs	r2, #21
 8005d40:	60da      	str	r2, [r3, #12]
 8005d42:	4b13      	ldr	r3, [pc, #76]	@ (8005d90 <LCD_Init+0x3c18>)
 8005d44:	2280      	movs	r2, #128	@ 0x80
 8005d46:	615a      	str	r2, [r3, #20]
 8005d48:	4b11      	ldr	r3, [pc, #68]	@ (8005d90 <LCD_Init+0x3c18>)
 8005d4a:	2280      	movs	r2, #128	@ 0x80
 8005d4c:	611a      	str	r2, [r3, #16]
 8005d4e:	4b10      	ldr	r3, [pc, #64]	@ (8005d90 <LCD_Init+0x3c18>)
 8005d50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d54:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005d56:	4b0e      	ldr	r3, [pc, #56]	@ (8005d90 <LCD_Init+0x3c18>)
 8005d58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d5c:	611a      	str	r2, [r3, #16]
 8005d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d90 <LCD_Init+0x3c18>)
 8005d60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d64:	615a      	str	r2, [r3, #20]
 8005d66:	4b0b      	ldr	r3, [pc, #44]	@ (8005d94 <LCD_Init+0x3c1c>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	60da      	str	r2, [r3, #12]
 8005d6c:	4b08      	ldr	r3, [pc, #32]	@ (8005d90 <LCD_Init+0x3c18>)
 8005d6e:	2280      	movs	r2, #128	@ 0x80
 8005d70:	615a      	str	r2, [r3, #20]
 8005d72:	4b07      	ldr	r3, [pc, #28]	@ (8005d90 <LCD_Init+0x3c18>)
 8005d74:	2280      	movs	r2, #128	@ 0x80
 8005d76:	611a      	str	r2, [r3, #16]
 8005d78:	4b05      	ldr	r3, [pc, #20]	@ (8005d90 <LCD_Init+0x3c18>)
 8005d7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d7e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005d80:	4b03      	ldr	r3, [pc, #12]	@ (8005d90 <LCD_Init+0x3c18>)
 8005d82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d86:	611a      	str	r2, [r3, #16]
 8005d88:	4b01      	ldr	r3, [pc, #4]	@ (8005d90 <LCD_Init+0x3c18>)
 8005d8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d8e:	e003      	b.n	8005d98 <LCD_Init+0x3c20>
 8005d90:	40011000 	.word	0x40011000
 8005d94:	40010c00 	.word	0x40010c00
 8005d98:	615a      	str	r2, [r3, #20]
 8005d9a:	4b8b      	ldr	r3, [pc, #556]	@ (8005fc8 <LCD_Init+0x3e50>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	60da      	str	r2, [r3, #12]
 8005da0:	4b8a      	ldr	r3, [pc, #552]	@ (8005fcc <LCD_Init+0x3e54>)
 8005da2:	2280      	movs	r2, #128	@ 0x80
 8005da4:	615a      	str	r2, [r3, #20]
 8005da6:	4b89      	ldr	r3, [pc, #548]	@ (8005fcc <LCD_Init+0x3e54>)
 8005da8:	2280      	movs	r2, #128	@ 0x80
 8005daa:	611a      	str	r2, [r3, #16]
 8005dac:	4b87      	ldr	r3, [pc, #540]	@ (8005fcc <LCD_Init+0x3e54>)
 8005dae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005db2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005db4:	20f0      	movs	r0, #240	@ 0xf0
 8005db6:	f7fa fee7 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005dba:	4b84      	ldr	r3, [pc, #528]	@ (8005fcc <LCD_Init+0x3e54>)
 8005dbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005dc0:	611a      	str	r2, [r3, #16]
 8005dc2:	4b82      	ldr	r3, [pc, #520]	@ (8005fcc <LCD_Init+0x3e54>)
 8005dc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dc8:	615a      	str	r2, [r3, #20]
 8005dca:	4b7f      	ldr	r3, [pc, #508]	@ (8005fc8 <LCD_Init+0x3e50>)
 8005dcc:	2203      	movs	r2, #3
 8005dce:	60da      	str	r2, [r3, #12]
 8005dd0:	4b7e      	ldr	r3, [pc, #504]	@ (8005fcc <LCD_Init+0x3e54>)
 8005dd2:	2280      	movs	r2, #128	@ 0x80
 8005dd4:	615a      	str	r2, [r3, #20]
 8005dd6:	4b7d      	ldr	r3, [pc, #500]	@ (8005fcc <LCD_Init+0x3e54>)
 8005dd8:	2280      	movs	r2, #128	@ 0x80
 8005dda:	611a      	str	r2, [r3, #16]
 8005ddc:	4b7b      	ldr	r3, [pc, #492]	@ (8005fcc <LCD_Init+0x3e54>)
 8005dde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005de2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005de4:	2029      	movs	r0, #41	@ 0x29
 8005de6:	f7fa fecf 	bl	8000b88 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005dea:	20d0      	movs	r0, #208	@ 0xd0
 8005dec:	f7fa fecc 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005df0:	4b76      	ldr	r3, [pc, #472]	@ (8005fcc <LCD_Init+0x3e54>)
 8005df2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005df6:	611a      	str	r2, [r3, #16]
 8005df8:	4b74      	ldr	r3, [pc, #464]	@ (8005fcc <LCD_Init+0x3e54>)
 8005dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dfe:	615a      	str	r2, [r3, #20]
 8005e00:	4b71      	ldr	r3, [pc, #452]	@ (8005fc8 <LCD_Init+0x3e50>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	60da      	str	r2, [r3, #12]
 8005e06:	4b71      	ldr	r3, [pc, #452]	@ (8005fcc <LCD_Init+0x3e54>)
 8005e08:	2280      	movs	r2, #128	@ 0x80
 8005e0a:	615a      	str	r2, [r3, #20]
 8005e0c:	4b6f      	ldr	r3, [pc, #444]	@ (8005fcc <LCD_Init+0x3e54>)
 8005e0e:	2280      	movs	r2, #128	@ 0x80
 8005e10:	611a      	str	r2, [r3, #16]
 8005e12:	4b6e      	ldr	r3, [pc, #440]	@ (8005fcc <LCD_Init+0x3e54>)
 8005e14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e18:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005e1a:	20be      	movs	r0, #190	@ 0xbe
 8005e1c:	f7fa feb4 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005e20:	4b6a      	ldr	r3, [pc, #424]	@ (8005fcc <LCD_Init+0x3e54>)
 8005e22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e26:	611a      	str	r2, [r3, #16]
 8005e28:	4b68      	ldr	r3, [pc, #416]	@ (8005fcc <LCD_Init+0x3e54>)
 8005e2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e2e:	615a      	str	r2, [r3, #20]
 8005e30:	4b65      	ldr	r3, [pc, #404]	@ (8005fc8 <LCD_Init+0x3e50>)
 8005e32:	2205      	movs	r2, #5
 8005e34:	60da      	str	r2, [r3, #12]
 8005e36:	4b65      	ldr	r3, [pc, #404]	@ (8005fcc <LCD_Init+0x3e54>)
 8005e38:	2280      	movs	r2, #128	@ 0x80
 8005e3a:	615a      	str	r2, [r3, #20]
 8005e3c:	4b63      	ldr	r3, [pc, #396]	@ (8005fcc <LCD_Init+0x3e54>)
 8005e3e:	2280      	movs	r2, #128	@ 0x80
 8005e40:	611a      	str	r2, [r3, #16]
 8005e42:	4b62      	ldr	r3, [pc, #392]	@ (8005fcc <LCD_Init+0x3e54>)
 8005e44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e48:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005e4a:	4b60      	ldr	r3, [pc, #384]	@ (8005fcc <LCD_Init+0x3e54>)
 8005e4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e50:	611a      	str	r2, [r3, #16]
 8005e52:	4b5e      	ldr	r3, [pc, #376]	@ (8005fcc <LCD_Init+0x3e54>)
 8005e54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e58:	615a      	str	r2, [r3, #20]
 8005e5a:	4b5b      	ldr	r3, [pc, #364]	@ (8005fc8 <LCD_Init+0x3e50>)
 8005e5c:	22fe      	movs	r2, #254	@ 0xfe
 8005e5e:	60da      	str	r2, [r3, #12]
 8005e60:	4b5a      	ldr	r3, [pc, #360]	@ (8005fcc <LCD_Init+0x3e54>)
 8005e62:	2280      	movs	r2, #128	@ 0x80
 8005e64:	615a      	str	r2, [r3, #20]
 8005e66:	4b59      	ldr	r3, [pc, #356]	@ (8005fcc <LCD_Init+0x3e54>)
 8005e68:	2280      	movs	r2, #128	@ 0x80
 8005e6a:	611a      	str	r2, [r3, #16]
 8005e6c:	4b57      	ldr	r3, [pc, #348]	@ (8005fcc <LCD_Init+0x3e54>)
 8005e6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e72:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8005e74:	4b55      	ldr	r3, [pc, #340]	@ (8005fcc <LCD_Init+0x3e54>)
 8005e76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e7a:	611a      	str	r2, [r3, #16]
 8005e7c:	4b53      	ldr	r3, [pc, #332]	@ (8005fcc <LCD_Init+0x3e54>)
 8005e7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e82:	615a      	str	r2, [r3, #20]
 8005e84:	4b50      	ldr	r3, [pc, #320]	@ (8005fc8 <LCD_Init+0x3e50>)
 8005e86:	2201      	movs	r2, #1
 8005e88:	60da      	str	r2, [r3, #12]
 8005e8a:	4b50      	ldr	r3, [pc, #320]	@ (8005fcc <LCD_Init+0x3e54>)
 8005e8c:	2280      	movs	r2, #128	@ 0x80
 8005e8e:	615a      	str	r2, [r3, #20]
 8005e90:	4b4e      	ldr	r3, [pc, #312]	@ (8005fcc <LCD_Init+0x3e54>)
 8005e92:	2280      	movs	r2, #128	@ 0x80
 8005e94:	611a      	str	r2, [r3, #16]
 8005e96:	4b4d      	ldr	r3, [pc, #308]	@ (8005fcc <LCD_Init+0x3e54>)
 8005e98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e9c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005e9e:	4b4b      	ldr	r3, [pc, #300]	@ (8005fcc <LCD_Init+0x3e54>)
 8005ea0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ea4:	611a      	str	r2, [r3, #16]
 8005ea6:	4b49      	ldr	r3, [pc, #292]	@ (8005fcc <LCD_Init+0x3e54>)
 8005ea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eac:	615a      	str	r2, [r3, #20]
 8005eae:	4b46      	ldr	r3, [pc, #280]	@ (8005fc8 <LCD_Init+0x3e50>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	60da      	str	r2, [r3, #12]
 8005eb4:	4b45      	ldr	r3, [pc, #276]	@ (8005fcc <LCD_Init+0x3e54>)
 8005eb6:	2280      	movs	r2, #128	@ 0x80
 8005eb8:	615a      	str	r2, [r3, #20]
 8005eba:	4b44      	ldr	r3, [pc, #272]	@ (8005fcc <LCD_Init+0x3e54>)
 8005ebc:	2280      	movs	r2, #128	@ 0x80
 8005ebe:	611a      	str	r2, [r3, #16]
 8005ec0:	4b42      	ldr	r3, [pc, #264]	@ (8005fcc <LCD_Init+0x3e54>)
 8005ec2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ec6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005ec8:	4b40      	ldr	r3, [pc, #256]	@ (8005fcc <LCD_Init+0x3e54>)
 8005eca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ece:	611a      	str	r2, [r3, #16]
 8005ed0:	4b3e      	ldr	r3, [pc, #248]	@ (8005fcc <LCD_Init+0x3e54>)
 8005ed2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ed6:	615a      	str	r2, [r3, #20]
 8005ed8:	4b3b      	ldr	r3, [pc, #236]	@ (8005fc8 <LCD_Init+0x3e50>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	60da      	str	r2, [r3, #12]
 8005ede:	4b3b      	ldr	r3, [pc, #236]	@ (8005fcc <LCD_Init+0x3e54>)
 8005ee0:	2280      	movs	r2, #128	@ 0x80
 8005ee2:	615a      	str	r2, [r3, #20]
 8005ee4:	4b39      	ldr	r3, [pc, #228]	@ (8005fcc <LCD_Init+0x3e54>)
 8005ee6:	2280      	movs	r2, #128	@ 0x80
 8005ee8:	611a      	str	r2, [r3, #16]
 8005eea:	4b38      	ldr	r3, [pc, #224]	@ (8005fcc <LCD_Init+0x3e54>)
 8005eec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ef0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8005ef2:	4b36      	ldr	r3, [pc, #216]	@ (8005fcc <LCD_Init+0x3e54>)
 8005ef4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ef8:	611a      	str	r2, [r3, #16]
 8005efa:	4b34      	ldr	r3, [pc, #208]	@ (8005fcc <LCD_Init+0x3e54>)
 8005efc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f00:	615a      	str	r2, [r3, #20]
 8005f02:	4b31      	ldr	r3, [pc, #196]	@ (8005fc8 <LCD_Init+0x3e50>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	60da      	str	r2, [r3, #12]
 8005f08:	4b30      	ldr	r3, [pc, #192]	@ (8005fcc <LCD_Init+0x3e54>)
 8005f0a:	2280      	movs	r2, #128	@ 0x80
 8005f0c:	615a      	str	r2, [r3, #20]
 8005f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8005fcc <LCD_Init+0x3e54>)
 8005f10:	2280      	movs	r2, #128	@ 0x80
 8005f12:	611a      	str	r2, [r3, #16]
 8005f14:	4b2d      	ldr	r3, [pc, #180]	@ (8005fcc <LCD_Init+0x3e54>)
 8005f16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f1a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005f1c:	20b8      	movs	r0, #184	@ 0xb8
 8005f1e:	f7fa fe33 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005f22:	4b2a      	ldr	r3, [pc, #168]	@ (8005fcc <LCD_Init+0x3e54>)
 8005f24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f28:	611a      	str	r2, [r3, #16]
 8005f2a:	4b28      	ldr	r3, [pc, #160]	@ (8005fcc <LCD_Init+0x3e54>)
 8005f2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f30:	615a      	str	r2, [r3, #20]
 8005f32:	4b25      	ldr	r3, [pc, #148]	@ (8005fc8 <LCD_Init+0x3e50>)
 8005f34:	2203      	movs	r2, #3
 8005f36:	60da      	str	r2, [r3, #12]
 8005f38:	4b24      	ldr	r3, [pc, #144]	@ (8005fcc <LCD_Init+0x3e54>)
 8005f3a:	2280      	movs	r2, #128	@ 0x80
 8005f3c:	615a      	str	r2, [r3, #20]
 8005f3e:	4b23      	ldr	r3, [pc, #140]	@ (8005fcc <LCD_Init+0x3e54>)
 8005f40:	2280      	movs	r2, #128	@ 0x80
 8005f42:	611a      	str	r2, [r3, #16]
 8005f44:	4b21      	ldr	r3, [pc, #132]	@ (8005fcc <LCD_Init+0x3e54>)
 8005f46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f4a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8005f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8005fcc <LCD_Init+0x3e54>)
 8005f4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f52:	611a      	str	r2, [r3, #16]
 8005f54:	4b1d      	ldr	r3, [pc, #116]	@ (8005fcc <LCD_Init+0x3e54>)
 8005f56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f5a:	615a      	str	r2, [r3, #20]
 8005f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8005fc8 <LCD_Init+0x3e50>)
 8005f5e:	2201      	movs	r2, #1
 8005f60:	60da      	str	r2, [r3, #12]
 8005f62:	4b1a      	ldr	r3, [pc, #104]	@ (8005fcc <LCD_Init+0x3e54>)
 8005f64:	2280      	movs	r2, #128	@ 0x80
 8005f66:	615a      	str	r2, [r3, #20]
 8005f68:	4b18      	ldr	r3, [pc, #96]	@ (8005fcc <LCD_Init+0x3e54>)
 8005f6a:	2280      	movs	r2, #128	@ 0x80
 8005f6c:	611a      	str	r2, [r3, #16]
 8005f6e:	4b17      	ldr	r3, [pc, #92]	@ (8005fcc <LCD_Init+0x3e54>)
 8005f70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f74:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005f76:	20ba      	movs	r0, #186	@ 0xba
 8005f78:	f7fa fe06 	bl	8000b88 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005f7c:	4b13      	ldr	r3, [pc, #76]	@ (8005fcc <LCD_Init+0x3e54>)
 8005f7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f82:	611a      	str	r2, [r3, #16]
 8005f84:	4b11      	ldr	r3, [pc, #68]	@ (8005fcc <LCD_Init+0x3e54>)
 8005f86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f8a:	615a      	str	r2, [r3, #20]
 8005f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8005fc8 <LCD_Init+0x3e50>)
 8005f8e:	2201      	movs	r2, #1
 8005f90:	60da      	str	r2, [r3, #12]
 8005f92:	4b0e      	ldr	r3, [pc, #56]	@ (8005fcc <LCD_Init+0x3e54>)
 8005f94:	2280      	movs	r2, #128	@ 0x80
 8005f96:	615a      	str	r2, [r3, #20]
 8005f98:	4b0c      	ldr	r3, [pc, #48]	@ (8005fcc <LCD_Init+0x3e54>)
 8005f9a:	2280      	movs	r2, #128	@ 0x80
 8005f9c:	611a      	str	r2, [r3, #16]
 8005f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005fcc <LCD_Init+0x3e54>)
 8005fa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fa4:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005fa6:	2064      	movs	r0, #100	@ 0x64
 8005fa8:	f7fb ff36 	bl	8001e18 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005fac:	2000      	movs	r0, #0
 8005fae:	f7fb ffd7 	bl	8001f60 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005fb2:	4b07      	ldr	r3, [pc, #28]	@ (8005fd0 <LCD_Init+0x3e58>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005fb8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005fbc:	f000 f80a 	bl	8005fd4 <LCD_Clear>
}
 8005fc0:	bf00      	nop
 8005fc2:	3718      	adds	r7, #24
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	40010c00 	.word	0x40010c00
 8005fcc:	40011000 	.word	0x40011000
 8005fd0:	422201a8 	.word	0x422201a8

08005fd4 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	4603      	mov	r3, r0
 8005fdc:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800608c <LCD_Clear+0xb8>)
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005fe8:	4b28      	ldr	r3, [pc, #160]	@ (800608c <LCD_Clear+0xb8>)
 8005fea:	885b      	ldrh	r3, [r3, #2]
 8005fec:	461a      	mov	r2, r3
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	fb02 f303 	mul.w	r3, r2, r3
 8005ff4:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8005ff6:	4b25      	ldr	r3, [pc, #148]	@ (800608c <LCD_Clear+0xb8>)
 8005ff8:	889b      	ldrh	r3, [r3, #4]
 8005ffa:	f646 0204 	movw	r2, #26628	@ 0x6804
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d11a      	bne.n	8006038 <LCD_Clear+0x64>
 8006002:	4b22      	ldr	r3, [pc, #136]	@ (800608c <LCD_Clear+0xb8>)
 8006004:	799b      	ldrb	r3, [r3, #6]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d116      	bne.n	8006038 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 800600a:	4b20      	ldr	r3, [pc, #128]	@ (800608c <LCD_Clear+0xb8>)
 800600c:	2200      	movs	r2, #0
 800600e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8006010:	4b1e      	ldr	r3, [pc, #120]	@ (800608c <LCD_Clear+0xb8>)
 8006012:	222a      	movs	r2, #42	@ 0x2a
 8006014:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8006016:	4b1d      	ldr	r3, [pc, #116]	@ (800608c <LCD_Clear+0xb8>)
 8006018:	222b      	movs	r2, #43	@ 0x2b
 800601a:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 800601c:	2100      	movs	r1, #0
 800601e:	2000      	movs	r0, #0
 8006020:	f7fa fe84 	bl	8000d2c <LCD_SetCursor>
		lcddev.dir = 1;
 8006024:	4b19      	ldr	r3, [pc, #100]	@ (800608c <LCD_Clear+0xb8>)
 8006026:	2201      	movs	r2, #1
 8006028:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 800602a:	4b18      	ldr	r3, [pc, #96]	@ (800608c <LCD_Clear+0xb8>)
 800602c:	222b      	movs	r2, #43	@ 0x2b
 800602e:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8006030:	4b16      	ldr	r3, [pc, #88]	@ (800608c <LCD_Clear+0xb8>)
 8006032:	222a      	movs	r2, #42	@ 0x2a
 8006034:	819a      	strh	r2, [r3, #12]
 8006036:	e003      	b.n	8006040 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8006038:	2100      	movs	r1, #0
 800603a:	2000      	movs	r0, #0
 800603c:	f7fa fe76 	bl	8000d2c <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8006040:	f7fa fe68 	bl	8000d14 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	e017      	b.n	800607a <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 800604a:	4b11      	ldr	r3, [pc, #68]	@ (8006090 <LCD_Clear+0xbc>)
 800604c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006050:	611a      	str	r2, [r3, #16]
 8006052:	4b0f      	ldr	r3, [pc, #60]	@ (8006090 <LCD_Clear+0xbc>)
 8006054:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006058:	615a      	str	r2, [r3, #20]
 800605a:	4a0e      	ldr	r2, [pc, #56]	@ (8006094 <LCD_Clear+0xc0>)
 800605c:	88fb      	ldrh	r3, [r7, #6]
 800605e:	60d3      	str	r3, [r2, #12]
 8006060:	4b0b      	ldr	r3, [pc, #44]	@ (8006090 <LCD_Clear+0xbc>)
 8006062:	2280      	movs	r2, #128	@ 0x80
 8006064:	615a      	str	r2, [r3, #20]
 8006066:	4b0a      	ldr	r3, [pc, #40]	@ (8006090 <LCD_Clear+0xbc>)
 8006068:	2280      	movs	r2, #128	@ 0x80
 800606a:	611a      	str	r2, [r3, #16]
 800606c:	4b08      	ldr	r3, [pc, #32]	@ (8006090 <LCD_Clear+0xbc>)
 800606e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006072:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	3301      	adds	r3, #1
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	429a      	cmp	r2, r3
 8006080:	d3e3      	bcc.n	800604a <LCD_Clear+0x76>
}
 8006082:	bf00      	nop
 8006084:	bf00      	nop
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	200000cc 	.word	0x200000cc
 8006090:	40011000 	.word	0x40011000
 8006094:	40010c00 	.word	0x40010c00

08006098 <LCD_Fill>:
// Fill the area with color
// :(xend-xsta+1)*(yend-ysta+1)
void LCD_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey,
		uint16_t color) {
 8006098:	b590      	push	{r4, r7, lr}
 800609a:	b087      	sub	sp, #28
 800609c:	af02      	add	r7, sp, #8
 800609e:	4604      	mov	r4, r0
 80060a0:	4608      	mov	r0, r1
 80060a2:	4611      	mov	r1, r2
 80060a4:	461a      	mov	r2, r3
 80060a6:	4623      	mov	r3, r4
 80060a8:	80fb      	strh	r3, [r7, #6]
 80060aa:	4603      	mov	r3, r0
 80060ac:	80bb      	strh	r3, [r7, #4]
 80060ae:	460b      	mov	r3, r1
 80060b0:	807b      	strh	r3, [r7, #2]
 80060b2:	4613      	mov	r3, r2
 80060b4:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	uint16_t xlen = 0;
 80060b6:	2300      	movs	r3, #0
 80060b8:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1))	//6804横屏的时候特殊处理
 80060ba:	4b3b      	ldr	r3, [pc, #236]	@ (80061a8 <LCD_Fill+0x110>)
 80060bc:	889b      	ldrh	r3, [r3, #4]
 80060be:	f646 0204 	movw	r2, #26628	@ 0x6804
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d133      	bne.n	800612e <LCD_Fill+0x96>
 80060c6:	4b38      	ldr	r3, [pc, #224]	@ (80061a8 <LCD_Fill+0x110>)
 80060c8:	799b      	ldrb	r3, [r3, #6]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d12f      	bne.n	800612e <LCD_Fill+0x96>
			{
		temp = sx;
 80060ce:	88fb      	ldrh	r3, [r7, #6]
 80060d0:	813b      	strh	r3, [r7, #8]
		sx = sy;
 80060d2:	88bb      	ldrh	r3, [r7, #4]
 80060d4:	80fb      	strh	r3, [r7, #6]
		sy = lcddev.width - ex - 1;
 80060d6:	4b34      	ldr	r3, [pc, #208]	@ (80061a8 <LCD_Fill+0x110>)
 80060d8:	881a      	ldrh	r2, [r3, #0]
 80060da:	887b      	ldrh	r3, [r7, #2]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	80bb      	strh	r3, [r7, #4]
		ex = ey;
 80060e4:	883b      	ldrh	r3, [r7, #0]
 80060e6:	807b      	strh	r3, [r7, #2]
		ey = lcddev.width - temp - 1;
 80060e8:	4b2f      	ldr	r3, [pc, #188]	@ (80061a8 <LCD_Fill+0x110>)
 80060ea:	881a      	ldrh	r2, [r3, #0]
 80060ec:	893b      	ldrh	r3, [r7, #8]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	803b      	strh	r3, [r7, #0]
		lcddev.dir = 0;
 80060f6:	4b2c      	ldr	r3, [pc, #176]	@ (80061a8 <LCD_Fill+0x110>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 80060fc:	4b2a      	ldr	r3, [pc, #168]	@ (80061a8 <LCD_Fill+0x110>)
 80060fe:	222a      	movs	r2, #42	@ 0x2a
 8006100:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8006102:	4b29      	ldr	r3, [pc, #164]	@ (80061a8 <LCD_Fill+0x110>)
 8006104:	222b      	movs	r2, #43	@ 0x2b
 8006106:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx, sy, ex, ey, color);
 8006108:	883c      	ldrh	r4, [r7, #0]
 800610a:	887a      	ldrh	r2, [r7, #2]
 800610c:	88b9      	ldrh	r1, [r7, #4]
 800610e:	88f8      	ldrh	r0, [r7, #6]
 8006110:	8c3b      	ldrh	r3, [r7, #32]
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	4623      	mov	r3, r4
 8006116:	f7ff ffbf 	bl	8006098 <LCD_Fill>
		lcddev.dir = 1;
 800611a:	4b23      	ldr	r3, [pc, #140]	@ (80061a8 <LCD_Fill+0x110>)
 800611c:	2201      	movs	r2, #1
 800611e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8006120:	4b21      	ldr	r3, [pc, #132]	@ (80061a8 <LCD_Fill+0x110>)
 8006122:	222b      	movs	r2, #43	@ 0x2b
 8006124:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8006126:	4b20      	ldr	r3, [pc, #128]	@ (80061a8 <LCD_Fill+0x110>)
 8006128:	222a      	movs	r2, #42	@ 0x2a
 800612a:	819a      	strh	r2, [r3, #12]
 800612c:	e037      	b.n	800619e <LCD_Fill+0x106>
	} else {
		xlen = ex - sx + 1;
 800612e:	887a      	ldrh	r2, [r7, #2]
 8006130:	88fb      	ldrh	r3, [r7, #6]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	b29b      	uxth	r3, r3
 8006136:	3301      	adds	r3, #1
 8006138:	817b      	strh	r3, [r7, #10]
		for (i = sy; i <= ey; i++) {
 800613a:	88bb      	ldrh	r3, [r7, #4]
 800613c:	81fb      	strh	r3, [r7, #14]
 800613e:	e029      	b.n	8006194 <LCD_Fill+0xfc>
			LCD_SetCursor(sx, i);      				//设置光标位置
 8006140:	89fa      	ldrh	r2, [r7, #14]
 8006142:	88fb      	ldrh	r3, [r7, #6]
 8006144:	4611      	mov	r1, r2
 8006146:	4618      	mov	r0, r3
 8006148:	f7fa fdf0 	bl	8000d2c <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM	  
 800614c:	f7fa fde2 	bl	8000d14 <LCD_WriteRAM_Prepare>
			for (j = 0; j < xlen; j++)
 8006150:	2300      	movs	r3, #0
 8006152:	81bb      	strh	r3, [r7, #12]
 8006154:	e017      	b.n	8006186 <LCD_Fill+0xee>
				LCD_WR_DATA(color);	//设置光标位置
 8006156:	4b15      	ldr	r3, [pc, #84]	@ (80061ac <LCD_Fill+0x114>)
 8006158:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800615c:	611a      	str	r2, [r3, #16]
 800615e:	4b13      	ldr	r3, [pc, #76]	@ (80061ac <LCD_Fill+0x114>)
 8006160:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006164:	615a      	str	r2, [r3, #20]
 8006166:	4a12      	ldr	r2, [pc, #72]	@ (80061b0 <LCD_Fill+0x118>)
 8006168:	8c3b      	ldrh	r3, [r7, #32]
 800616a:	60d3      	str	r3, [r2, #12]
 800616c:	4b0f      	ldr	r3, [pc, #60]	@ (80061ac <LCD_Fill+0x114>)
 800616e:	2280      	movs	r2, #128	@ 0x80
 8006170:	615a      	str	r2, [r3, #20]
 8006172:	4b0e      	ldr	r3, [pc, #56]	@ (80061ac <LCD_Fill+0x114>)
 8006174:	2280      	movs	r2, #128	@ 0x80
 8006176:	611a      	str	r2, [r3, #16]
 8006178:	4b0c      	ldr	r3, [pc, #48]	@ (80061ac <LCD_Fill+0x114>)
 800617a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800617e:	611a      	str	r2, [r3, #16]
			for (j = 0; j < xlen; j++)
 8006180:	89bb      	ldrh	r3, [r7, #12]
 8006182:	3301      	adds	r3, #1
 8006184:	81bb      	strh	r3, [r7, #12]
 8006186:	89ba      	ldrh	r2, [r7, #12]
 8006188:	897b      	ldrh	r3, [r7, #10]
 800618a:	429a      	cmp	r2, r3
 800618c:	d3e3      	bcc.n	8006156 <LCD_Fill+0xbe>
		for (i = sy; i <= ey; i++) {
 800618e:	89fb      	ldrh	r3, [r7, #14]
 8006190:	3301      	adds	r3, #1
 8006192:	81fb      	strh	r3, [r7, #14]
 8006194:	89fa      	ldrh	r2, [r7, #14]
 8006196:	883b      	ldrh	r3, [r7, #0]
 8006198:	429a      	cmp	r2, r3
 800619a:	d9d1      	bls.n	8006140 <LCD_Fill+0xa8>
		}
	}
}
 800619c:	bf00      	nop
 800619e:	bf00      	nop
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd90      	pop	{r4, r7, pc}
 80061a6:	bf00      	nop
 80061a8:	200000cc 	.word	0x200000cc
 80061ac:	40011000 	.word	0x40011000
 80061b0:	40010c00 	.word	0x40010c00

080061b4 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 80061b4:	b590      	push	{r4, r7, lr}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4604      	mov	r4, r0
 80061bc:	4608      	mov	r0, r1
 80061be:	4611      	mov	r1, r2
 80061c0:	461a      	mov	r2, r3
 80061c2:	4623      	mov	r3, r4
 80061c4:	80fb      	strh	r3, [r7, #6]
 80061c6:	4603      	mov	r3, r0
 80061c8:	80bb      	strh	r3, [r7, #4]
 80061ca:	460b      	mov	r3, r1
 80061cc:	70fb      	strb	r3, [r7, #3]
 80061ce:	4613      	mov	r3, r2
 80061d0:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 80061d2:	88bb      	ldrh	r3, [r7, #4]
 80061d4:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 80061d6:	78bb      	ldrb	r3, [r7, #2]
 80061d8:	08db      	lsrs	r3, r3, #3
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	461a      	mov	r2, r3
 80061de:	78bb      	ldrb	r3, [r7, #2]
 80061e0:	f003 0307 	and.w	r3, r3, #7
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	bf14      	ite	ne
 80061ea:	2301      	movne	r3, #1
 80061ec:	2300      	moveq	r3, #0
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	4413      	add	r3, r2
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	78ba      	ldrb	r2, [r7, #2]
 80061f6:	0852      	lsrs	r2, r2, #1
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	fb02 f303 	mul.w	r3, r2, r3
 80061fe:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	3b20      	subs	r3, #32
 8006204:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 8006206:	2300      	movs	r3, #0
 8006208:	737b      	strb	r3, [r7, #13]
 800620a:	e069      	b.n	80062e0 <LCD_ShowChar+0x12c>
		if (size == 12)
 800620c:	78bb      	ldrb	r3, [r7, #2]
 800620e:	2b0c      	cmp	r3, #12
 8006210:	d10b      	bne.n	800622a <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 8006212:	78fa      	ldrb	r2, [r7, #3]
 8006214:	7b79      	ldrb	r1, [r7, #13]
 8006216:	4838      	ldr	r0, [pc, #224]	@ (80062f8 <LCD_ShowChar+0x144>)
 8006218:	4613      	mov	r3, r2
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	4413      	add	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4403      	add	r3, r0
 8006222:	440b      	add	r3, r1
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	73fb      	strb	r3, [r7, #15]
 8006228:	e019      	b.n	800625e <LCD_ShowChar+0xaa>
		else if (size == 16)
 800622a:	78bb      	ldrb	r3, [r7, #2]
 800622c:	2b10      	cmp	r3, #16
 800622e:	d108      	bne.n	8006242 <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 8006230:	78fa      	ldrb	r2, [r7, #3]
 8006232:	7b7b      	ldrb	r3, [r7, #13]
 8006234:	4931      	ldr	r1, [pc, #196]	@ (80062fc <LCD_ShowChar+0x148>)
 8006236:	0112      	lsls	r2, r2, #4
 8006238:	440a      	add	r2, r1
 800623a:	4413      	add	r3, r2
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	73fb      	strb	r3, [r7, #15]
 8006240:	e00d      	b.n	800625e <LCD_ShowChar+0xaa>
		else if (size == 24)
 8006242:	78bb      	ldrb	r3, [r7, #2]
 8006244:	2b18      	cmp	r3, #24
 8006246:	d150      	bne.n	80062ea <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 8006248:	78fa      	ldrb	r2, [r7, #3]
 800624a:	7b79      	ldrb	r1, [r7, #13]
 800624c:	482c      	ldr	r0, [pc, #176]	@ (8006300 <LCD_ShowChar+0x14c>)
 800624e:	4613      	mov	r3, r2
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	4413      	add	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4403      	add	r3, r0
 8006258:	440b      	add	r3, r1
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 800625e:	2300      	movs	r3, #0
 8006260:	73bb      	strb	r3, [r7, #14]
 8006262:	e035      	b.n	80062d0 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 8006264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006268:	2b00      	cmp	r3, #0
 800626a:	da07      	bge.n	800627c <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 800626c:	4b25      	ldr	r3, [pc, #148]	@ (8006304 <LCD_ShowChar+0x150>)
 800626e:	881a      	ldrh	r2, [r3, #0]
 8006270:	88b9      	ldrh	r1, [r7, #4]
 8006272:	88fb      	ldrh	r3, [r7, #6]
 8006274:	4618      	mov	r0, r3
 8006276:	f7fb fb37 	bl	80018e8 <LCD_Fast_DrawPoint>
 800627a:	e00a      	b.n	8006292 <LCD_ShowChar+0xde>
			else if (mode == 0)
 800627c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d106      	bne.n	8006292 <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8006284:	4b20      	ldr	r3, [pc, #128]	@ (8006308 <LCD_ShowChar+0x154>)
 8006286:	881a      	ldrh	r2, [r3, #0]
 8006288:	88b9      	ldrh	r1, [r7, #4]
 800628a:	88fb      	ldrh	r3, [r7, #6]
 800628c:	4618      	mov	r0, r3
 800628e:	f7fb fb2b 	bl	80018e8 <LCD_Fast_DrawPoint>
			temp <<= 1;
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	73fb      	strb	r3, [r7, #15]
			y++;
 8006298:	88bb      	ldrh	r3, [r7, #4]
 800629a:	3301      	adds	r3, #1
 800629c:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 800629e:	4b1b      	ldr	r3, [pc, #108]	@ (800630c <LCD_ShowChar+0x158>)
 80062a0:	885b      	ldrh	r3, [r3, #2]
 80062a2:	88ba      	ldrh	r2, [r7, #4]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d222      	bcs.n	80062ee <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 80062a8:	88ba      	ldrh	r2, [r7, #4]
 80062aa:	897b      	ldrh	r3, [r7, #10]
 80062ac:	1ad2      	subs	r2, r2, r3
 80062ae:	78bb      	ldrb	r3, [r7, #2]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d10a      	bne.n	80062ca <LCD_ShowChar+0x116>
				y = y0;
 80062b4:	897b      	ldrh	r3, [r7, #10]
 80062b6:	80bb      	strh	r3, [r7, #4]
				x++;
 80062b8:	88fb      	ldrh	r3, [r7, #6]
 80062ba:	3301      	adds	r3, #1
 80062bc:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 80062be:	4b13      	ldr	r3, [pc, #76]	@ (800630c <LCD_ShowChar+0x158>)
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	88fa      	ldrh	r2, [r7, #6]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d307      	bcc.n	80062d8 <LCD_ShowChar+0x124>
					return;	//超区域了
 80062c8:	e012      	b.n	80062f0 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 80062ca:	7bbb      	ldrb	r3, [r7, #14]
 80062cc:	3301      	adds	r3, #1
 80062ce:	73bb      	strb	r3, [r7, #14]
 80062d0:	7bbb      	ldrb	r3, [r7, #14]
 80062d2:	2b07      	cmp	r3, #7
 80062d4:	d9c6      	bls.n	8006264 <LCD_ShowChar+0xb0>
 80062d6:	e000      	b.n	80062da <LCD_ShowChar+0x126>
				break;
 80062d8:	bf00      	nop
	for (t = 0; t < csize; t++) {
 80062da:	7b7b      	ldrb	r3, [r7, #13]
 80062dc:	3301      	adds	r3, #1
 80062de:	737b      	strb	r3, [r7, #13]
 80062e0:	7b7a      	ldrb	r2, [r7, #13]
 80062e2:	7a7b      	ldrb	r3, [r7, #9]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d391      	bcc.n	800620c <LCD_ShowChar+0x58>
 80062e8:	e002      	b.n	80062f0 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 80062ea:	bf00      	nop
 80062ec:	e000      	b.n	80062f0 <LCD_ShowChar+0x13c>
				return;		//超区域了
 80062ee:	bf00      	nop
			}
		}
	}
}
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd90      	pop	{r4, r7, pc}
 80062f6:	bf00      	nop
 80062f8:	08009de8 	.word	0x08009de8
 80062fc:	0800a25c 	.word	0x0800a25c
 8006300:	0800a84c 	.word	0x0800a84c
 8006304:	200000c8 	.word	0x200000c8
 8006308:	20000000 	.word	0x20000000
 800630c:	200000cc 	.word	0x200000cc

08006310 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 8006310:	b590      	push	{r4, r7, lr}
 8006312:	b087      	sub	sp, #28
 8006314:	af02      	add	r7, sp, #8
 8006316:	4604      	mov	r4, r0
 8006318:	4608      	mov	r0, r1
 800631a:	4611      	mov	r1, r2
 800631c:	461a      	mov	r2, r3
 800631e:	4623      	mov	r3, r4
 8006320:	80fb      	strh	r3, [r7, #6]
 8006322:	4603      	mov	r3, r0
 8006324:	80bb      	strh	r3, [r7, #4]
 8006326:	460b      	mov	r3, r1
 8006328:	807b      	strh	r3, [r7, #2]
 800632a:	4613      	mov	r3, r2
 800632c:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 800632e:	88fb      	ldrh	r3, [r7, #6]
 8006330:	73fb      	strb	r3, [r7, #15]
	width += x;
 8006332:	887a      	ldrh	r2, [r7, #2]
 8006334:	88fb      	ldrh	r3, [r7, #6]
 8006336:	4413      	add	r3, r2
 8006338:	807b      	strh	r3, [r7, #2]
	height += y;
 800633a:	883a      	ldrh	r2, [r7, #0]
 800633c:	88bb      	ldrh	r3, [r7, #4]
 800633e:	4413      	add	r3, r2
 8006340:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8006342:	e024      	b.n	800638e <LCD_ShowString+0x7e>
	{
		if (x >= width) {
 8006344:	88fa      	ldrh	r2, [r7, #6]
 8006346:	887b      	ldrh	r3, [r7, #2]
 8006348:	429a      	cmp	r2, r3
 800634a:	d307      	bcc.n	800635c <LCD_ShowString+0x4c>
			x = x0;
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	80fb      	strh	r3, [r7, #6]
			y += size;
 8006350:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006354:	b29a      	uxth	r2, r3
 8006356:	88bb      	ldrh	r3, [r7, #4]
 8006358:	4413      	add	r3, r2
 800635a:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 800635c:	88ba      	ldrh	r2, [r7, #4]
 800635e:	883b      	ldrh	r3, [r7, #0]
 8006360:	429a      	cmp	r2, r3
 8006362:	d21d      	bcs.n	80063a0 <LCD_ShowString+0x90>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 8006364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006366:	781a      	ldrb	r2, [r3, #0]
 8006368:	f897 3020 	ldrb.w	r3, [r7, #32]
 800636c:	88b9      	ldrh	r1, [r7, #4]
 800636e:	88f8      	ldrh	r0, [r7, #6]
 8006370:	2400      	movs	r4, #0
 8006372:	9400      	str	r4, [sp, #0]
 8006374:	f7ff ff1e 	bl	80061b4 <LCD_ShowChar>
		x += size / 2;
 8006378:	f897 3020 	ldrb.w	r3, [r7, #32]
 800637c:	085b      	lsrs	r3, r3, #1
 800637e:	b2db      	uxtb	r3, r3
 8006380:	461a      	mov	r2, r3
 8006382:	88fb      	ldrh	r3, [r7, #6]
 8006384:	4413      	add	r3, r2
 8006386:	80fb      	strh	r3, [r7, #6]
		p++;
 8006388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638a:	3301      	adds	r3, #1
 800638c:	627b      	str	r3, [r7, #36]	@ 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 800638e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b7e      	cmp	r3, #126	@ 0x7e
 8006394:	d805      	bhi.n	80063a2 <LCD_ShowString+0x92>
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	2b1f      	cmp	r3, #31
 800639c:	d8d2      	bhi.n	8006344 <LCD_ShowString+0x34>
	}
}
 800639e:	e000      	b.n	80063a2 <LCD_ShowString+0x92>
			break;	//退出
 80063a0:	bf00      	nop
}
 80063a2:	bf00      	nop
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd90      	pop	{r4, r7, pc}
	...

080063ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80063b2:	f000 fd83 	bl	8006ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80063b6:	f000 fa73 	bl	80068a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_Init();
 80063ba:	f7fb fedd 	bl	8002178 <LCD_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80063be:	f7fa fb5b 	bl	8000a78 <MX_GPIO_Init>
  MX_TIM3_Init();
 80063c2:	f000 fc63 	bl	8006c8c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80063c6:	f000 fcd5 	bl	8006d74 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Debounce_InitKey0(); // Initialize the key debouncing functionality
 80063ca:	f7fa fb25 	bl	8000a18 <Debounce_InitKey0>
  Debounce_InitKey1();
 80063ce:	f7fa fb3b 	bl	8000a48 <Debounce_InitKey1>
  Debounce_InitKeyWKUP();
 80063d2:	f7fa fb0d 	bl	80009f0 <Debounce_InitKeyWKUP>
  HAL_TIM_Base_Start_IT(&htim3);
 80063d6:	48a9      	ldr	r0, [pc, #676]	@ (800667c <main+0x2d0>)
 80063d8:	f001 fe6a 	bl	80080b0 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 2);
 80063dc:	2202      	movs	r2, #2
 80063de:	49a8      	ldr	r1, [pc, #672]	@ (8006680 <main+0x2d4>)
 80063e0:	48a8      	ldr	r0, [pc, #672]	@ (8006684 <main+0x2d8>)
 80063e2:	f002 fac0 	bl	8008966 <HAL_UART_Receive_IT>

  LCD_ShowString(0, 270, 240, 24, 24, (uint8_t*) "Time: 0.0 s");
 80063e6:	4ba8      	ldr	r3, [pc, #672]	@ (8006688 <main+0x2dc>)
 80063e8:	9301      	str	r3, [sp, #4]
 80063ea:	2318      	movs	r3, #24
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	2318      	movs	r3, #24
 80063f0:	22f0      	movs	r2, #240	@ 0xf0
 80063f2:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80063f6:	2000      	movs	r0, #0
 80063f8:	f7ff ff8a 	bl	8006310 <LCD_ShowString>
  LCD_ShowString(0, 294, 120, 24, 24, (uint8_t*) "Input: ");
 80063fc:	4ba3      	ldr	r3, [pc, #652]	@ (800668c <main+0x2e0>)
 80063fe:	9301      	str	r3, [sp, #4]
 8006400:	2318      	movs	r3, #24
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	2318      	movs	r3, #24
 8006406:	2278      	movs	r2, #120	@ 0x78
 8006408:	f44f 7193 	mov.w	r1, #294	@ 0x126
 800640c:	2000      	movs	r0, #0
 800640e:	f7ff ff7f 	bl	8006310 <LCD_ShowString>
  LCD_ShowString(120, 294, 120, 24, 24, (uint8_t*) "  NORMAL");
 8006412:	4b9f      	ldr	r3, [pc, #636]	@ (8006690 <main+0x2e4>)
 8006414:	9301      	str	r3, [sp, #4]
 8006416:	2318      	movs	r3, #24
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	2318      	movs	r3, #24
 800641c:	2278      	movs	r2, #120	@ 0x78
 800641e:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8006422:	2078      	movs	r0, #120	@ 0x78
 8006424:	f7ff ff74 	bl	8006310 <LCD_ShowString>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (system_state == OFF){
 8006428:	4b9a      	ldr	r3, [pc, #616]	@ (8006694 <main+0x2e8>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	2b01      	cmp	r3, #1
 800642e:	f000 820c 	beq.w	800684a <main+0x49e>
      continue;
    }

    key0_pressed_flag = Debounce_ReadPress(&Key0);
 8006432:	4899      	ldr	r0, [pc, #612]	@ (8006698 <main+0x2ec>)
 8006434:	f7fa facc 	bl	80009d0 <Debounce_ReadPress>
 8006438:	4603      	mov	r3, r0
 800643a:	461a      	mov	r2, r3
 800643c:	4b97      	ldr	r3, [pc, #604]	@ (800669c <main+0x2f0>)
 800643e:	701a      	strb	r2, [r3, #0]
    key1_pressed_flag = Debounce_ReadPress(&Key1);
 8006440:	4897      	ldr	r0, [pc, #604]	@ (80066a0 <main+0x2f4>)
 8006442:	f7fa fac5 	bl	80009d0 <Debounce_ReadPress>
 8006446:	4603      	mov	r3, r0
 8006448:	461a      	mov	r2, r3
 800644a:	4b96      	ldr	r3, [pc, #600]	@ (80066a4 <main+0x2f8>)
 800644c:	701a      	strb	r2, [r3, #0]
    key_wkup_pressed_flag = Debounce_ReadPress(&Key_WKUP);
 800644e:	4896      	ldr	r0, [pc, #600]	@ (80066a8 <main+0x2fc>)
 8006450:	f7fa fabe 	bl	80009d0 <Debounce_ReadPress>
 8006454:	4603      	mov	r3, r0
 8006456:	461a      	mov	r2, r3
 8006458:	4b94      	ldr	r3, [pc, #592]	@ (80066ac <main+0x300>)
 800645a:	701a      	strb	r2, [r3, #0]

    if (key_wkup_pressed_flag) {
 800645c:	4b93      	ldr	r3, [pc, #588]	@ (80066ac <main+0x300>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d011      	beq.n	8006488 <main+0xdc>
      system_state = OFF;
 8006464:	4b8b      	ldr	r3, [pc, #556]	@ (8006694 <main+0x2e8>)
 8006466:	2201      	movs	r2, #1
 8006468:	701a      	strb	r2, [r3, #0]
      LCD_Clear(WHITE);
 800646a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800646e:	f7ff fdb1 	bl	8005fd4 <LCD_Clear>
      LCD_ShowString(0, 130, 240, 24, 24, (uint8_t*) "     SYSTEM OFF     ");
 8006472:	4b8f      	ldr	r3, [pc, #572]	@ (80066b0 <main+0x304>)
 8006474:	9301      	str	r3, [sp, #4]
 8006476:	2318      	movs	r3, #24
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	2318      	movs	r3, #24
 800647c:	22f0      	movs	r2, #240	@ 0xf0
 800647e:	2182      	movs	r1, #130	@ 0x82
 8006480:	2000      	movs	r0, #0
 8006482:	f7ff ff45 	bl	8006310 <LCD_ShowString>
      continue;
 8006486:	e1e1      	b.n	800684c <main+0x4a0>
    }

    if (key0_pressed_flag || key1_pressed_flag) {
 8006488:	4b84      	ldr	r3, [pc, #528]	@ (800669c <main+0x2f0>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d103      	bne.n	8006498 <main+0xec>
 8006490:	4b84      	ldr	r3, [pc, #528]	@ (80066a4 <main+0x2f8>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d04f      	beq.n	8006538 <main+0x18c>
      if (key0_pressed_flag) {
 8006498:	4b80      	ldr	r3, [pc, #512]	@ (800669c <main+0x2f0>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00c      	beq.n	80064ba <main+0x10e>
        input_buffer[input_count] = 0;
 80064a0:	4b84      	ldr	r3, [pc, #528]	@ (80066b4 <main+0x308>)
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	461a      	mov	r2, r3
 80064a6:	4b84      	ldr	r3, [pc, #528]	@ (80066b8 <main+0x30c>)
 80064a8:	2100      	movs	r1, #0
 80064aa:	5499      	strb	r1, [r3, r2]
        input_count++;
 80064ac:	4b81      	ldr	r3, [pc, #516]	@ (80066b4 <main+0x308>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	3301      	adds	r3, #1
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	4b7f      	ldr	r3, [pc, #508]	@ (80066b4 <main+0x308>)
 80064b6:	701a      	strb	r2, [r3, #0]
 80064b8:	e00f      	b.n	80064da <main+0x12e>
      } else if (key1_pressed_flag) {
 80064ba:	4b7a      	ldr	r3, [pc, #488]	@ (80066a4 <main+0x2f8>)
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00b      	beq.n	80064da <main+0x12e>
        input_buffer[input_count] = 1;
 80064c2:	4b7c      	ldr	r3, [pc, #496]	@ (80066b4 <main+0x308>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	461a      	mov	r2, r3
 80064c8:	4b7b      	ldr	r3, [pc, #492]	@ (80066b8 <main+0x30c>)
 80064ca:	2101      	movs	r1, #1
 80064cc:	5499      	strb	r1, [r3, r2]
        input_count++;
 80064ce:	4b79      	ldr	r3, [pc, #484]	@ (80066b4 <main+0x308>)
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	3301      	adds	r3, #1
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	4b77      	ldr	r3, [pc, #476]	@ (80066b4 <main+0x308>)
 80064d8:	701a      	strb	r2, [r3, #0]
      }

      if (input_count == 1) {
 80064da:	4b76      	ldr	r3, [pc, #472]	@ (80066b4 <main+0x308>)
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d112      	bne.n	8006508 <main+0x15c>
        sprintf((char *)str_buffer, "Input: %d ", input_buffer[0]);
 80064e2:	4b75      	ldr	r3, [pc, #468]	@ (80066b8 <main+0x30c>)
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	4974      	ldr	r1, [pc, #464]	@ (80066bc <main+0x310>)
 80064ea:	4875      	ldr	r0, [pc, #468]	@ (80066c0 <main+0x314>)
 80064ec:	f002 ff72 	bl	80093d4 <siprintf>
        LCD_ShowString(0, 294, 120, 24, 24, str_buffer);
 80064f0:	4b73      	ldr	r3, [pc, #460]	@ (80066c0 <main+0x314>)
 80064f2:	9301      	str	r3, [sp, #4]
 80064f4:	2318      	movs	r3, #24
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	2318      	movs	r3, #24
 80064fa:	2278      	movs	r2, #120	@ 0x78
 80064fc:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8006500:	2000      	movs	r0, #0
 8006502:	f7ff ff05 	bl	8006310 <LCD_ShowString>
 8006506:	e017      	b.n	8006538 <main+0x18c>
      }else if (input_count == 2) {
 8006508:	4b6a      	ldr	r3, [pc, #424]	@ (80066b4 <main+0x308>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b02      	cmp	r3, #2
 800650e:	d113      	bne.n	8006538 <main+0x18c>
        sprintf((char *)str_buffer, "Input: %d%d", input_buffer[0], input_buffer[1]);
 8006510:	4b69      	ldr	r3, [pc, #420]	@ (80066b8 <main+0x30c>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	461a      	mov	r2, r3
 8006516:	4b68      	ldr	r3, [pc, #416]	@ (80066b8 <main+0x30c>)
 8006518:	785b      	ldrb	r3, [r3, #1]
 800651a:	496a      	ldr	r1, [pc, #424]	@ (80066c4 <main+0x318>)
 800651c:	4868      	ldr	r0, [pc, #416]	@ (80066c0 <main+0x314>)
 800651e:	f002 ff59 	bl	80093d4 <siprintf>
        LCD_ShowString(0, 294, 120, 24, 24, str_buffer);
 8006522:	4b67      	ldr	r3, [pc, #412]	@ (80066c0 <main+0x314>)
 8006524:	9301      	str	r3, [sp, #4]
 8006526:	2318      	movs	r3, #24
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	2318      	movs	r3, #24
 800652c:	2278      	movs	r2, #120	@ 0x78
 800652e:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8006532:	2000      	movs	r0, #0
 8006534:	f7ff feec 	bl	8006310 <LCD_ShowString>
      }
    }

    if (input_count == INPUT_BUFFER_SIZE) {
 8006538:	4b5e      	ldr	r3, [pc, #376]	@ (80066b4 <main+0x308>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2b02      	cmp	r3, #2
 800653e:	f040 813d 	bne.w	80067bc <main+0x410>
      uint16_t opcode = (input_buffer[0] << 1) | input_buffer[1];
 8006542:	4b5d      	ldr	r3, [pc, #372]	@ (80066b8 <main+0x30c>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	005b      	lsls	r3, r3, #1
 8006548:	b21a      	sxth	r2, r3
 800654a:	4b5b      	ldr	r3, [pc, #364]	@ (80066b8 <main+0x30c>)
 800654c:	785b      	ldrb	r3, [r3, #1]
 800654e:	b21b      	sxth	r3, r3
 8006550:	4313      	orrs	r3, r2
 8006552:	b21b      	sxth	r3, r3
 8006554:	80fb      	strh	r3, [r7, #6]
      switch (opcode) {
 8006556:	88fb      	ldrh	r3, [r7, #6]
 8006558:	2b03      	cmp	r3, #3
 800655a:	f200 8121 	bhi.w	80067a0 <main+0x3f4>
 800655e:	a201      	add	r2, pc, #4	@ (adr r2, 8006564 <main+0x1b8>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	08006575 	.word	0x08006575
 8006568:	080065b7 	.word	0x080065b7
 800656c:	080065df 	.word	0x080065df
 8006570:	0800666d 	.word	0x0800666d
        case 0:
          switch (frame_size) {
 8006574:	4b54      	ldr	r3, [pc, #336]	@ (80066c8 <main+0x31c>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b03      	cmp	r3, #3
 800657a:	d00e      	beq.n	800659a <main+0x1ee>
 800657c:	2b03      	cmp	r3, #3
 800657e:	dc10      	bgt.n	80065a2 <main+0x1f6>
 8006580:	2b01      	cmp	r3, #1
 8006582:	d002      	beq.n	800658a <main+0x1de>
 8006584:	2b02      	cmp	r3, #2
 8006586:	d004      	beq.n	8006592 <main+0x1e6>
 8006588:	e00b      	b.n	80065a2 <main+0x1f6>
            case SIZE_NORMAL:
              frame_size = SIZE_DOUBLE;
 800658a:	4b4f      	ldr	r3, [pc, #316]	@ (80066c8 <main+0x31c>)
 800658c:	2202      	movs	r2, #2
 800658e:	701a      	strb	r2, [r3, #0]
              break;
 8006590:	e007      	b.n	80065a2 <main+0x1f6>
            case SIZE_DOUBLE:
              frame_size = SIZE_TRIPLE;
 8006592:	4b4d      	ldr	r3, [pc, #308]	@ (80066c8 <main+0x31c>)
 8006594:	2203      	movs	r2, #3
 8006596:	701a      	strb	r2, [r3, #0]
              break;
 8006598:	e003      	b.n	80065a2 <main+0x1f6>
            case SIZE_TRIPLE:
              frame_size = SIZE_NORMAL;
 800659a:	4b4b      	ldr	r3, [pc, #300]	@ (80066c8 <main+0x31c>)
 800659c:	2201      	movs	r2, #1
 800659e:	701a      	strb	r2, [r3, #0]
              break;
 80065a0:	bf00      	nop
            }
          LCD_Fill(0, 0, 240, 135, WHITE);
 80065a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	2387      	movs	r3, #135	@ 0x87
 80065aa:	22f0      	movs	r2, #240	@ 0xf0
 80065ac:	2100      	movs	r1, #0
 80065ae:	2000      	movs	r0, #0
 80065b0:	f7ff fd72 	bl	8006098 <LCD_Fill>
          break;
 80065b4:	e0f4      	b.n	80067a0 <main+0x3f4>
        case 1:
          LCD_Fill(0, 135, 240, 270, WHITE);
 80065b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 80065c0:	22f0      	movs	r2, #240	@ 0xf0
 80065c2:	2187      	movs	r1, #135	@ 0x87
 80065c4:	2000      	movs	r0, #0
 80065c6:	f7ff fd67 	bl	8006098 <LCD_Fill>
          LCD_ShowPic(0, 135, FRAME_WIDTH, FRAME_HEIGHT, front_buffer);
 80065ca:	4b40      	ldr	r3, [pc, #256]	@ (80066cc <main+0x320>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	232d      	movs	r3, #45	@ 0x2d
 80065d2:	223c      	movs	r2, #60	@ 0x3c
 80065d4:	2187      	movs	r1, #135	@ 0x87
 80065d6:	2000      	movs	r0, #0
 80065d8:	f000 f9a8 	bl	800692c <LCD_ShowPic>
          break;
 80065dc:	e0e0      	b.n	80067a0 <main+0x3f4>
        case 2:
          switch (speed_mode) {
 80065de:	4b3c      	ldr	r3, [pc, #240]	@ (80066d0 <main+0x324>)
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d024      	beq.n	8006630 <main+0x284>
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	dc31      	bgt.n	800664e <main+0x2a2>
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d002      	beq.n	80065f4 <main+0x248>
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d00f      	beq.n	8006612 <main+0x266>
 80065f2:	e02c      	b.n	800664e <main+0x2a2>
            case NORMAL:
              speed_mode = FAST;
 80065f4:	4b36      	ldr	r3, [pc, #216]	@ (80066d0 <main+0x324>)
 80065f6:	2202      	movs	r2, #2
 80065f8:	701a      	strb	r2, [r3, #0]
              LCD_ShowString(120, 294, 120, 24, 24, (uint8_t*) "  FAST  ");
 80065fa:	4b36      	ldr	r3, [pc, #216]	@ (80066d4 <main+0x328>)
 80065fc:	9301      	str	r3, [sp, #4]
 80065fe:	2318      	movs	r3, #24
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	2318      	movs	r3, #24
 8006604:	2278      	movs	r2, #120	@ 0x78
 8006606:	f44f 7193 	mov.w	r1, #294	@ 0x126
 800660a:	2078      	movs	r0, #120	@ 0x78
 800660c:	f7ff fe80 	bl	8006310 <LCD_ShowString>
              break;
 8006610:	e01d      	b.n	800664e <main+0x2a2>
            case FAST:
              speed_mode = SLOW;
 8006612:	4b2f      	ldr	r3, [pc, #188]	@ (80066d0 <main+0x324>)
 8006614:	2203      	movs	r2, #3
 8006616:	701a      	strb	r2, [r3, #0]
              LCD_ShowString(120, 294, 120, 24, 24, (uint8_t*) "  SLOW  ");
 8006618:	4b2f      	ldr	r3, [pc, #188]	@ (80066d8 <main+0x32c>)
 800661a:	9301      	str	r3, [sp, #4]
 800661c:	2318      	movs	r3, #24
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	2318      	movs	r3, #24
 8006622:	2278      	movs	r2, #120	@ 0x78
 8006624:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8006628:	2078      	movs	r0, #120	@ 0x78
 800662a:	f7ff fe71 	bl	8006310 <LCD_ShowString>
              break;
 800662e:	e00e      	b.n	800664e <main+0x2a2>
            case SLOW:
              speed_mode = NORMAL;
 8006630:	4b27      	ldr	r3, [pc, #156]	@ (80066d0 <main+0x324>)
 8006632:	2201      	movs	r2, #1
 8006634:	701a      	strb	r2, [r3, #0]
              LCD_ShowString(120, 294, 120, 24, 24, (uint8_t*) "  NORMAL");
 8006636:	4b16      	ldr	r3, [pc, #88]	@ (8006690 <main+0x2e4>)
 8006638:	9301      	str	r3, [sp, #4]
 800663a:	2318      	movs	r3, #24
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	2318      	movs	r3, #24
 8006640:	2278      	movs	r2, #120	@ 0x78
 8006642:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8006646:	2078      	movs	r0, #120	@ 0x78
 8006648:	f7ff fe62 	bl	8006310 <LCD_ShowString>
              break;
 800664c:	bf00      	nop
          }
          txBuffer[0] = FAST_OR_SLOW_MARK << 8 | speed_mode;
 800664e:	4b20      	ldr	r3, [pc, #128]	@ (80066d0 <main+0x324>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	b21a      	sxth	r2, r3
 8006654:	4b21      	ldr	r3, [pc, #132]	@ (80066dc <main+0x330>)
 8006656:	4313      	orrs	r3, r2
 8006658:	b21b      	sxth	r3, r3
 800665a:	b29a      	uxth	r2, r3
 800665c:	4b20      	ldr	r3, [pc, #128]	@ (80066e0 <main+0x334>)
 800665e:	801a      	strh	r2, [r3, #0]
          HAL_UART_Transmit_IT(&huart1, (uint8_t *)txBuffer, 2);
 8006660:	2202      	movs	r2, #2
 8006662:	491f      	ldr	r1, [pc, #124]	@ (80066e0 <main+0x334>)
 8006664:	4807      	ldr	r0, [pc, #28]	@ (8006684 <main+0x2d8>)
 8006666:	f002 f949 	bl	80088fc <HAL_UART_Transmit_IT>
          break;
 800666a:	e099      	b.n	80067a0 <main+0x3f4>
        case 3:
          switch (play_state) {
 800666c:	4b1d      	ldr	r3, [pc, #116]	@ (80066e4 <main+0x338>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d039      	beq.n	80066e8 <main+0x33c>
 8006674:	2b02      	cmp	r3, #2
 8006676:	d077      	beq.n	8006768 <main+0x3bc>
 8006678:	e083      	b.n	8006782 <main+0x3d6>
 800667a:	bf00      	nop
 800667c:	20004074 	.word	0x20004074
 8006680:	20000118 	.word	0x20000118
 8006684:	200040bc 	.word	0x200040bc
 8006688:	08009d4c 	.word	0x08009d4c
 800668c:	08009d58 	.word	0x08009d58
 8006690:	08009d60 	.word	0x08009d60
 8006694:	200000da 	.word	0x200000da
 8006698:	200000a0 	.word	0x200000a0
 800669c:	200000db 	.word	0x200000db
 80066a0:	200000b4 	.word	0x200000b4
 80066a4:	200000dc 	.word	0x200000dc
 80066a8:	2000008c 	.word	0x2000008c
 80066ac:	200000dd 	.word	0x200000dd
 80066b0:	08009d6c 	.word	0x08009d6c
 80066b4:	20000116 	.word	0x20000116
 80066b8:	20000114 	.word	0x20000114
 80066bc:	08009d84 	.word	0x08009d84
 80066c0:	200000e0 	.word	0x200000e0
 80066c4:	08009d90 	.word	0x08009d90
 80066c8:	20000002 	.word	0x20000002
 80066cc:	20000008 	.word	0x20000008
 80066d0:	20000003 	.word	0x20000003
 80066d4:	08009d9c 	.word	0x08009d9c
 80066d8:	08009da8 	.word	0x08009da8
 80066dc:	ffffaa00 	.word	0xffffaa00
 80066e0:	2000011c 	.word	0x2000011c
 80066e4:	20000004 	.word	0x20000004
            case PLAY:
              play_state = PAUSE;
 80066e8:	4b59      	ldr	r3, [pc, #356]	@ (8006850 <main+0x4a4>)
 80066ea:	2202      	movs	r2, #2
 80066ec:	701a      	strb	r2, [r3, #0]
              LCD_ShowString(200, 0, 24, 24, 24, (uint8_t*) "P");
 80066ee:	4b59      	ldr	r3, [pc, #356]	@ (8006854 <main+0x4a8>)
 80066f0:	9301      	str	r3, [sp, #4]
 80066f2:	2318      	movs	r3, #24
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	2318      	movs	r3, #24
 80066f8:	2218      	movs	r2, #24
 80066fa:	2100      	movs	r1, #0
 80066fc:	20c8      	movs	r0, #200	@ 0xc8
 80066fe:	f7ff fe07 	bl	8006310 <LCD_ShowString>
              LCD_ShowString(200, 24, 24, 24, 24, (uint8_t*) "A");
 8006702:	4b55      	ldr	r3, [pc, #340]	@ (8006858 <main+0x4ac>)
 8006704:	9301      	str	r3, [sp, #4]
 8006706:	2318      	movs	r3, #24
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	2318      	movs	r3, #24
 800670c:	2218      	movs	r2, #24
 800670e:	2118      	movs	r1, #24
 8006710:	20c8      	movs	r0, #200	@ 0xc8
 8006712:	f7ff fdfd 	bl	8006310 <LCD_ShowString>
              LCD_ShowString(200, 48, 24, 24, 24, (uint8_t*) "U");
 8006716:	4b51      	ldr	r3, [pc, #324]	@ (800685c <main+0x4b0>)
 8006718:	9301      	str	r3, [sp, #4]
 800671a:	2318      	movs	r3, #24
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	2318      	movs	r3, #24
 8006720:	2218      	movs	r2, #24
 8006722:	2130      	movs	r1, #48	@ 0x30
 8006724:	20c8      	movs	r0, #200	@ 0xc8
 8006726:	f7ff fdf3 	bl	8006310 <LCD_ShowString>
              LCD_ShowString(200, 72, 24, 24, 24, (uint8_t*) "S");
 800672a:	4b4d      	ldr	r3, [pc, #308]	@ (8006860 <main+0x4b4>)
 800672c:	9301      	str	r3, [sp, #4]
 800672e:	2318      	movs	r3, #24
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	2318      	movs	r3, #24
 8006734:	2218      	movs	r2, #24
 8006736:	2148      	movs	r1, #72	@ 0x48
 8006738:	20c8      	movs	r0, #200	@ 0xc8
 800673a:	f7ff fde9 	bl	8006310 <LCD_ShowString>
              LCD_ShowString(200, 96, 24, 24, 24, (uint8_t*) "E");
 800673e:	4b49      	ldr	r3, [pc, #292]	@ (8006864 <main+0x4b8>)
 8006740:	9301      	str	r3, [sp, #4]
 8006742:	2318      	movs	r3, #24
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	2318      	movs	r3, #24
 8006748:	2218      	movs	r2, #24
 800674a:	2160      	movs	r1, #96	@ 0x60
 800674c:	20c8      	movs	r0, #200	@ 0xc8
 800674e:	f7ff fddf 	bl	8006310 <LCD_ShowString>
              LCD_ShowString(200, 120, 24, 24, 24, (uint8_t*) "D");
 8006752:	4b45      	ldr	r3, [pc, #276]	@ (8006868 <main+0x4bc>)
 8006754:	9301      	str	r3, [sp, #4]
 8006756:	2318      	movs	r3, #24
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	2318      	movs	r3, #24
 800675c:	2218      	movs	r2, #24
 800675e:	2178      	movs	r1, #120	@ 0x78
 8006760:	20c8      	movs	r0, #200	@ 0xc8
 8006762:	f7ff fdd5 	bl	8006310 <LCD_ShowString>
              break;
 8006766:	e00c      	b.n	8006782 <main+0x3d6>
            case PAUSE:
              play_state = PLAY;
 8006768:	4b39      	ldr	r3, [pc, #228]	@ (8006850 <main+0x4a4>)
 800676a:	2201      	movs	r2, #1
 800676c:	701a      	strb	r2, [r3, #0]
              LCD_Fill(200, 0, 240, 144, WHITE);
 800676e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	2390      	movs	r3, #144	@ 0x90
 8006776:	22f0      	movs	r2, #240	@ 0xf0
 8006778:	2100      	movs	r1, #0
 800677a:	20c8      	movs	r0, #200	@ 0xc8
 800677c:	f7ff fc8c 	bl	8006098 <LCD_Fill>
              break;
 8006780:	bf00      	nop
          }
          txBuffer[0] = PLAY_OR_PAUSE_MARK << 8 | play_state;
 8006782:	4b33      	ldr	r3, [pc, #204]	@ (8006850 <main+0x4a4>)
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	b21a      	sxth	r2, r3
 8006788:	4b38      	ldr	r3, [pc, #224]	@ (800686c <main+0x4c0>)
 800678a:	4313      	orrs	r3, r2
 800678c:	b21b      	sxth	r3, r3
 800678e:	b29a      	uxth	r2, r3
 8006790:	4b37      	ldr	r3, [pc, #220]	@ (8006870 <main+0x4c4>)
 8006792:	801a      	strh	r2, [r3, #0]
          HAL_UART_Transmit_IT(&huart1, (uint8_t *)txBuffer, 2);
 8006794:	2202      	movs	r2, #2
 8006796:	4936      	ldr	r1, [pc, #216]	@ (8006870 <main+0x4c4>)
 8006798:	4836      	ldr	r0, [pc, #216]	@ (8006874 <main+0x4c8>)
 800679a:	f002 f8af 	bl	80088fc <HAL_UART_Transmit_IT>
          break;
 800679e:	bf00      	nop
      }
      input_count = 0;
 80067a0:	4b35      	ldr	r3, [pc, #212]	@ (8006878 <main+0x4cc>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	701a      	strb	r2, [r3, #0]
      LCD_ShowString(0, 294, 120, 24, 24, (uint8_t*) "Input:   ");
 80067a6:	4b35      	ldr	r3, [pc, #212]	@ (800687c <main+0x4d0>)
 80067a8:	9301      	str	r3, [sp, #4]
 80067aa:	2318      	movs	r3, #24
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	2318      	movs	r3, #24
 80067b0:	2278      	movs	r2, #120	@ 0x78
 80067b2:	f44f 7193 	mov.w	r1, #294	@ 0x126
 80067b6:	2000      	movs	r0, #0
 80067b8:	f7ff fdaa 	bl	8006310 <LCD_ShowString>
    }

    if (frame_ready_flag) {
 80067bc:	4b30      	ldr	r3, [pc, #192]	@ (8006880 <main+0x4d4>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d015      	beq.n	80067f0 <main+0x444>
      LCD_ShowPic(0, 0, FRAME_WIDTH, FRAME_HEIGHT, front_buffer);
 80067c4:	4b2f      	ldr	r3, [pc, #188]	@ (8006884 <main+0x4d8>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	232d      	movs	r3, #45	@ 0x2d
 80067cc:	223c      	movs	r2, #60	@ 0x3c
 80067ce:	2100      	movs	r1, #0
 80067d0:	2000      	movs	r0, #0
 80067d2:	f000 f8ab 	bl	800692c <LCD_ShowPic>
      uint16_t *temp = front_buffer;
 80067d6:	4b2b      	ldr	r3, [pc, #172]	@ (8006884 <main+0x4d8>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	603b      	str	r3, [r7, #0]
      front_buffer = middle_buffer;
 80067dc:	4b2a      	ldr	r3, [pc, #168]	@ (8006888 <main+0x4dc>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a28      	ldr	r2, [pc, #160]	@ (8006884 <main+0x4d8>)
 80067e2:	6013      	str	r3, [r2, #0]
      middle_buffer = temp;
 80067e4:	4a28      	ldr	r2, [pc, #160]	@ (8006888 <main+0x4dc>)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	6013      	str	r3, [r2, #0]
      frame_ready_flag = 0;
 80067ea:	4b25      	ldr	r3, [pc, #148]	@ (8006880 <main+0x4d4>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	701a      	strb	r2, [r3, #0]
    }

    if (time_ready_flag) {
 80067f0:	4b26      	ldr	r3, [pc, #152]	@ (800688c <main+0x4e0>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f43f ae17 	beq.w	8006428 <main+0x7c>
      sprintf((char *)str_buffer, "Time: %d.%d s", time_count / 10, time_count % 10);
 80067fa:	4b25      	ldr	r3, [pc, #148]	@ (8006890 <main+0x4e4>)
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	4a25      	ldr	r2, [pc, #148]	@ (8006894 <main+0x4e8>)
 8006800:	fba2 2303 	umull	r2, r3, r2, r3
 8006804:	08db      	lsrs	r3, r3, #3
 8006806:	b29b      	uxth	r3, r3
 8006808:	4618      	mov	r0, r3
 800680a:	4b21      	ldr	r3, [pc, #132]	@ (8006890 <main+0x4e4>)
 800680c:	881a      	ldrh	r2, [r3, #0]
 800680e:	4b21      	ldr	r3, [pc, #132]	@ (8006894 <main+0x4e8>)
 8006810:	fba3 1302 	umull	r1, r3, r3, r2
 8006814:	08d9      	lsrs	r1, r3, #3
 8006816:	460b      	mov	r3, r1
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	440b      	add	r3, r1
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	b29b      	uxth	r3, r3
 8006822:	4602      	mov	r2, r0
 8006824:	491c      	ldr	r1, [pc, #112]	@ (8006898 <main+0x4ec>)
 8006826:	481d      	ldr	r0, [pc, #116]	@ (800689c <main+0x4f0>)
 8006828:	f002 fdd4 	bl	80093d4 <siprintf>
      LCD_ShowString(0, 270, 240, 24, 24, str_buffer);
 800682c:	4b1b      	ldr	r3, [pc, #108]	@ (800689c <main+0x4f0>)
 800682e:	9301      	str	r3, [sp, #4]
 8006830:	2318      	movs	r3, #24
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	2318      	movs	r3, #24
 8006836:	22f0      	movs	r2, #240	@ 0xf0
 8006838:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800683c:	2000      	movs	r0, #0
 800683e:	f7ff fd67 	bl	8006310 <LCD_ShowString>
      time_ready_flag = 0;
 8006842:	4b12      	ldr	r3, [pc, #72]	@ (800688c <main+0x4e0>)
 8006844:	2200      	movs	r2, #0
 8006846:	701a      	strb	r2, [r3, #0]
 8006848:	e5ee      	b.n	8006428 <main+0x7c>
      continue;
 800684a:	bf00      	nop
    if (system_state == OFF){
 800684c:	e5ec      	b.n	8006428 <main+0x7c>
 800684e:	bf00      	nop
 8006850:	20000004 	.word	0x20000004
 8006854:	08009db4 	.word	0x08009db4
 8006858:	08009db8 	.word	0x08009db8
 800685c:	08009dbc 	.word	0x08009dbc
 8006860:	08009dc0 	.word	0x08009dc0
 8006864:	08009dc4 	.word	0x08009dc4
 8006868:	08009dc8 	.word	0x08009dc8
 800686c:	ffffbb00 	.word	0xffffbb00
 8006870:	2000011c 	.word	0x2000011c
 8006874:	200040bc 	.word	0x200040bc
 8006878:	20000116 	.word	0x20000116
 800687c:	08009dcc 	.word	0x08009dcc
 8006880:	2000406b 	.word	0x2000406b
 8006884:	20000008 	.word	0x20000008
 8006888:	2000000c 	.word	0x2000000c
 800688c:	2000406f 	.word	0x2000406f
 8006890:	2000406c 	.word	0x2000406c
 8006894:	cccccccd 	.word	0xcccccccd
 8006898:	08009dd8 	.word	0x08009dd8
 800689c:	200000e0 	.word	0x200000e0

080068a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b090      	sub	sp, #64	@ 0x40
 80068a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80068a6:	f107 0318 	add.w	r3, r7, #24
 80068aa:	2228      	movs	r2, #40	@ 0x28
 80068ac:	2100      	movs	r1, #0
 80068ae:	4618      	mov	r0, r3
 80068b0:	f002 fdb0 	bl	8009414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80068b4:	1d3b      	adds	r3, r7, #4
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	605a      	str	r2, [r3, #4]
 80068bc:	609a      	str	r2, [r3, #8]
 80068be:	60da      	str	r2, [r3, #12]
 80068c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80068c2:	2301      	movs	r3, #1
 80068c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80068c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80068ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80068cc:	2300      	movs	r3, #0
 80068ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80068d0:	2301      	movs	r3, #1
 80068d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80068d4:	2302      	movs	r3, #2
 80068d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80068d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80068dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80068de:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80068e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80068e4:	f107 0318 	add.w	r3, r7, #24
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 ff81 	bl	80077f0 <HAL_RCC_OscConfig>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80068f4:	f000 f87e 	bl	80069f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80068f8:	230f      	movs	r3, #15
 80068fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80068fc:	2302      	movs	r3, #2
 80068fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006900:	2300      	movs	r3, #0
 8006902:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006904:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006908:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800690a:	2300      	movs	r3, #0
 800690c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800690e:	1d3b      	adds	r3, r7, #4
 8006910:	2102      	movs	r1, #2
 8006912:	4618      	mov	r0, r3
 8006914:	f001 f9ee 	bl	8007cf4 <HAL_RCC_ClockConfig>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800691e:	f000 f869 	bl	80069f4 <Error_Handler>
  }
}
 8006922:	bf00      	nop
 8006924:	3740      	adds	r7, #64	@ 0x40
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
	...

0800692c <LCD_ShowPic>:

/* USER CODE BEGIN 4 */
void LCD_ShowPic(uint16_t x, uint16_t y, uint16_t column, uint16_t row, uint16_t *pic) {
 800692c:	b590      	push	{r4, r7, lr}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	4604      	mov	r4, r0
 8006934:	4608      	mov	r0, r1
 8006936:	4611      	mov	r1, r2
 8006938:	461a      	mov	r2, r3
 800693a:	4623      	mov	r3, r4
 800693c:	80fb      	strh	r3, [r7, #6]
 800693e:	4603      	mov	r3, r0
 8006940:	80bb      	strh	r3, [r7, #4]
 8006942:	460b      	mov	r3, r1
 8006944:	807b      	strh	r3, [r7, #2]
 8006946:	4613      	mov	r3, r2
 8006948:	803b      	strh	r3, [r7, #0]
  for (uint16_t j = 0; j < row; j++) {
 800694a:	2300      	movs	r3, #0
 800694c:	81fb      	strh	r3, [r7, #14]
 800694e:	e046      	b.n	80069de <LCD_ShowPic+0xb2>
    for (uint16_t i = 0; i < column; i++) {
 8006950:	2300      	movs	r3, #0
 8006952:	81bb      	strh	r3, [r7, #12]
 8006954:	e03c      	b.n	80069d0 <LCD_ShowPic+0xa4>
      for (uint16_t m = 0; m < frame_size; m++) {
 8006956:	2300      	movs	r3, #0
 8006958:	817b      	strh	r3, [r7, #10]
 800695a:	e02d      	b.n	80069b8 <LCD_ShowPic+0x8c>
        for (uint16_t n = 0; n < frame_size; n++) {
 800695c:	2300      	movs	r3, #0
 800695e:	813b      	strh	r3, [r7, #8]
 8006960:	e021      	b.n	80069a6 <LCD_ShowPic+0x7a>
          LCD_Fast_DrawPoint(x + i * frame_size + m, y + j * frame_size + n, *pic);
 8006962:	4b23      	ldr	r3, [pc, #140]	@ (80069f0 <LCD_ShowPic+0xc4>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	89bb      	ldrh	r3, [r7, #12]
 800696a:	fb02 f303 	mul.w	r3, r2, r3
 800696e:	b29a      	uxth	r2, r3
 8006970:	88fb      	ldrh	r3, [r7, #6]
 8006972:	4413      	add	r3, r2
 8006974:	b29a      	uxth	r2, r3
 8006976:	897b      	ldrh	r3, [r7, #10]
 8006978:	4413      	add	r3, r2
 800697a:	b298      	uxth	r0, r3
 800697c:	4b1c      	ldr	r3, [pc, #112]	@ (80069f0 <LCD_ShowPic+0xc4>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	461a      	mov	r2, r3
 8006982:	89fb      	ldrh	r3, [r7, #14]
 8006984:	fb02 f303 	mul.w	r3, r2, r3
 8006988:	b29a      	uxth	r2, r3
 800698a:	88bb      	ldrh	r3, [r7, #4]
 800698c:	4413      	add	r3, r2
 800698e:	b29a      	uxth	r2, r3
 8006990:	893b      	ldrh	r3, [r7, #8]
 8006992:	4413      	add	r3, r2
 8006994:	b299      	uxth	r1, r3
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	f7fa ffa4 	bl	80018e8 <LCD_Fast_DrawPoint>
        for (uint16_t n = 0; n < frame_size; n++) {
 80069a0:	893b      	ldrh	r3, [r7, #8]
 80069a2:	3301      	adds	r3, #1
 80069a4:	813b      	strh	r3, [r7, #8]
 80069a6:	4b12      	ldr	r3, [pc, #72]	@ (80069f0 <LCD_ShowPic+0xc4>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	893b      	ldrh	r3, [r7, #8]
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d3d7      	bcc.n	8006962 <LCD_ShowPic+0x36>
      for (uint16_t m = 0; m < frame_size; m++) {
 80069b2:	897b      	ldrh	r3, [r7, #10]
 80069b4:	3301      	adds	r3, #1
 80069b6:	817b      	strh	r3, [r7, #10]
 80069b8:	4b0d      	ldr	r3, [pc, #52]	@ (80069f0 <LCD_ShowPic+0xc4>)
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	461a      	mov	r2, r3
 80069be:	897b      	ldrh	r3, [r7, #10]
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d3cb      	bcc.n	800695c <LCD_ShowPic+0x30>
        }
      }
      pic++;
 80069c4:	6a3b      	ldr	r3, [r7, #32]
 80069c6:	3302      	adds	r3, #2
 80069c8:	623b      	str	r3, [r7, #32]
    for (uint16_t i = 0; i < column; i++) {
 80069ca:	89bb      	ldrh	r3, [r7, #12]
 80069cc:	3301      	adds	r3, #1
 80069ce:	81bb      	strh	r3, [r7, #12]
 80069d0:	89ba      	ldrh	r2, [r7, #12]
 80069d2:	887b      	ldrh	r3, [r7, #2]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d3be      	bcc.n	8006956 <LCD_ShowPic+0x2a>
  for (uint16_t j = 0; j < row; j++) {
 80069d8:	89fb      	ldrh	r3, [r7, #14]
 80069da:	3301      	adds	r3, #1
 80069dc:	81fb      	strh	r3, [r7, #14]
 80069de:	89fa      	ldrh	r2, [r7, #14]
 80069e0:	883b      	ldrh	r3, [r7, #0]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d3b4      	bcc.n	8006950 <LCD_ShowPic+0x24>
    }
  }
}
 80069e6:	bf00      	nop
 80069e8:	bf00      	nop
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd90      	pop	{r4, r7, pc}
 80069f0:	20000002 	.word	0x20000002

080069f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80069f4:	b480      	push	{r7}
 80069f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80069f8:	b672      	cpsid	i
}
 80069fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80069fc:	bf00      	nop
 80069fe:	e7fd      	b.n	80069fc <Error_Handler+0x8>

08006a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006a06:	4b15      	ldr	r3, [pc, #84]	@ (8006a5c <HAL_MspInit+0x5c>)
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	4a14      	ldr	r2, [pc, #80]	@ (8006a5c <HAL_MspInit+0x5c>)
 8006a0c:	f043 0301 	orr.w	r3, r3, #1
 8006a10:	6193      	str	r3, [r2, #24]
 8006a12:	4b12      	ldr	r3, [pc, #72]	@ (8006a5c <HAL_MspInit+0x5c>)
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	60bb      	str	r3, [r7, #8]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8006a5c <HAL_MspInit+0x5c>)
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	4a0e      	ldr	r2, [pc, #56]	@ (8006a5c <HAL_MspInit+0x5c>)
 8006a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a28:	61d3      	str	r3, [r2, #28]
 8006a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a5c <HAL_MspInit+0x5c>)
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a32:	607b      	str	r3, [r7, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006a36:	4b0a      	ldr	r3, [pc, #40]	@ (8006a60 <HAL_MspInit+0x60>)
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	4a04      	ldr	r2, [pc, #16]	@ (8006a60 <HAL_MspInit+0x60>)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006a52:	bf00      	nop
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bc80      	pop	{r7}
 8006a5a:	4770      	bx	lr
 8006a5c:	40021000 	.word	0x40021000
 8006a60:	40010000 	.word	0x40010000

08006a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006a68:	bf00      	nop
 8006a6a:	e7fd      	b.n	8006a68 <NMI_Handler+0x4>

08006a6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006a70:	bf00      	nop
 8006a72:	e7fd      	b.n	8006a70 <HardFault_Handler+0x4>

08006a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006a74:	b480      	push	{r7}
 8006a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006a78:	bf00      	nop
 8006a7a:	e7fd      	b.n	8006a78 <MemManage_Handler+0x4>

08006a7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006a80:	bf00      	nop
 8006a82:	e7fd      	b.n	8006a80 <BusFault_Handler+0x4>

08006a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006a88:	bf00      	nop
 8006a8a:	e7fd      	b.n	8006a88 <UsageFault_Handler+0x4>

08006a8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006a90:	bf00      	nop
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bc80      	pop	{r7}
 8006a96:	4770      	bx	lr

08006a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a9c:	bf00      	nop
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc80      	pop	{r7}
 8006aa2:	4770      	bx	lr

08006aa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006aa8:	bf00      	nop
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bc80      	pop	{r7}
 8006aae:	4770      	bx	lr

08006ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006ab4:	f000 fa48 	bl	8006f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006ab8:	bf00      	nop
 8006aba:	bd80      	pop	{r7, pc}

08006abc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006ac0:	4802      	ldr	r0, [pc, #8]	@ (8006acc <TIM3_IRQHandler+0x10>)
 8006ac2:	f001 fb55 	bl	8008170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006ac6:	bf00      	nop
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20004074 	.word	0x20004074

08006ad0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006ad4:	4802      	ldr	r0, [pc, #8]	@ (8006ae0 <USART1_IRQHandler+0x10>)
 8006ad6:	f001 ff6b 	bl	80089b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  
  /* USER CODE END USART1_IRQn 1 */
}
 8006ada:	bf00      	nop
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	200040bc 	.word	0x200040bc

08006ae4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  if (htim->Instance==TIM3){
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a11      	ldr	r2, [pc, #68]	@ (8006b38 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d11c      	bne.n	8006b30 <HAL_TIM_PeriodElapsedCallback+0x4c>
    Debounce_Update(&Key_WKUP);
 8006af6:	4811      	ldr	r0, [pc, #68]	@ (8006b3c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8006af8:	f7f9 ff0c 	bl	8000914 <Debounce_Update>
    Debounce_Update(&Key0);
 8006afc:	4810      	ldr	r0, [pc, #64]	@ (8006b40 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8006afe:	f7f9 ff09 	bl	8000914 <Debounce_Update>
    Debounce_Update(&Key1);
 8006b02:	4810      	ldr	r0, [pc, #64]	@ (8006b44 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8006b04:	f7f9 ff06 	bl	8000914 <Debounce_Update>
    if (time_update_flag && play_state == PLAY){
 8006b08:	4b0f      	ldr	r3, [pc, #60]	@ (8006b48 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00f      	beq.n	8006b30 <HAL_TIM_PeriodElapsedCallback+0x4c>
 8006b10:	4b0e      	ldr	r3, [pc, #56]	@ (8006b4c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d10b      	bne.n	8006b30 <HAL_TIM_PeriodElapsedCallback+0x4c>
      time_count++;
 8006b18:	4b0d      	ldr	r3, [pc, #52]	@ (8006b50 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	4b0b      	ldr	r3, [pc, #44]	@ (8006b50 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8006b22:	801a      	strh	r2, [r3, #0]
      time_update_flag = 0;
 8006b24:	4b08      	ldr	r3, [pc, #32]	@ (8006b48 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	701a      	strb	r2, [r3, #0]
      time_ready_flag = 1;
 8006b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8006b54 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	701a      	strb	r2, [r3, #0]
    }
	}
}
 8006b30:	bf00      	nop
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	40000400 	.word	0x40000400
 8006b3c:	2000008c 	.word	0x2000008c
 8006b40:	200000a0 	.word	0x200000a0
 8006b44:	200000b4 	.word	0x200000b4
 8006b48:	2000406e 	.word	0x2000406e
 8006b4c:	20000004 	.word	0x20000004
 8006b50:	2000406c 	.word	0x2000406c
 8006b54:	2000406f 	.word	0x2000406f

08006b58 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  if (huart->Instance==USART1){
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a22      	ldr	r2, [pc, #136]	@ (8006bf0 <HAL_UART_RxCpltCallback+0x98>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d13d      	bne.n	8006be6 <HAL_UART_RxCpltCallback+0x8e>
    time_update_flag = 1;
 8006b6a:	4b22      	ldr	r3, [pc, #136]	@ (8006bf4 <HAL_UART_RxCpltCallback+0x9c>)
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	701a      	strb	r2, [r3, #0]
    if (!frame_start_flag){
 8006b70:	4b21      	ldr	r3, [pc, #132]	@ (8006bf8 <HAL_UART_RxCpltCallback+0xa0>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10c      	bne.n	8006b92 <HAL_UART_RxCpltCallback+0x3a>
      if (rxBuffer[0] == FRAME_START_MARK){
 8006b78:	4b20      	ldr	r3, [pc, #128]	@ (8006bfc <HAL_UART_RxCpltCallback+0xa4>)
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	f241 2234 	movw	r2, #4660	@ 0x1234
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d12b      	bne.n	8006bdc <HAL_UART_RxCpltCallback+0x84>
        frame_start_flag = 1;
 8006b84:	4b1c      	ldr	r3, [pc, #112]	@ (8006bf8 <HAL_UART_RxCpltCallback+0xa0>)
 8006b86:	2201      	movs	r2, #1
 8006b88:	701a      	strb	r2, [r3, #0]
        frame_count = 0;
 8006b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006c00 <HAL_UART_RxCpltCallback+0xa8>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	801a      	strh	r2, [r3, #0]
 8006b90:	e024      	b.n	8006bdc <HAL_UART_RxCpltCallback+0x84>
      }
    }else{
      back_buffer[frame_count] = rxBuffer[0];
 8006b92:	4b1c      	ldr	r3, [pc, #112]	@ (8006c04 <HAL_UART_RxCpltCallback+0xac>)
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	4b1a      	ldr	r3, [pc, #104]	@ (8006c00 <HAL_UART_RxCpltCallback+0xa8>)
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	4413      	add	r3, r2
 8006b9e:	4a17      	ldr	r2, [pc, #92]	@ (8006bfc <HAL_UART_RxCpltCallback+0xa4>)
 8006ba0:	8812      	ldrh	r2, [r2, #0]
 8006ba2:	801a      	strh	r2, [r3, #0]
      frame_count++;
 8006ba4:	4b16      	ldr	r3, [pc, #88]	@ (8006c00 <HAL_UART_RxCpltCallback+0xa8>)
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	4b14      	ldr	r3, [pc, #80]	@ (8006c00 <HAL_UART_RxCpltCallback+0xa8>)
 8006bae:	801a      	strh	r2, [r3, #0]
      if (frame_count == FRAME_BUFFER_SIZE){
 8006bb0:	4b13      	ldr	r3, [pc, #76]	@ (8006c00 <HAL_UART_RxCpltCallback+0xa8>)
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	f640 228c 	movw	r2, #2700	@ 0xa8c
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d10f      	bne.n	8006bdc <HAL_UART_RxCpltCallback+0x84>
        frame_ready_flag = 1;
 8006bbc:	4b12      	ldr	r3, [pc, #72]	@ (8006c08 <HAL_UART_RxCpltCallback+0xb0>)
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	701a      	strb	r2, [r3, #0]
        frame_start_flag = 0;
 8006bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf8 <HAL_UART_RxCpltCallback+0xa0>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	701a      	strb	r2, [r3, #0]

        uint16_t *temp = middle_buffer;
 8006bc8:	4b10      	ldr	r3, [pc, #64]	@ (8006c0c <HAL_UART_RxCpltCallback+0xb4>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	60fb      	str	r3, [r7, #12]
        middle_buffer = back_buffer;
 8006bce:	4b0d      	ldr	r3, [pc, #52]	@ (8006c04 <HAL_UART_RxCpltCallback+0xac>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8006c0c <HAL_UART_RxCpltCallback+0xb4>)
 8006bd4:	6013      	str	r3, [r2, #0]
        back_buffer = temp;
 8006bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8006c04 <HAL_UART_RxCpltCallback+0xac>)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6013      	str	r3, [r2, #0]
      }
    }
    // txBuffer[0] = frame_count;
    // HAL_UART_Transmit_IT(&huart1, (uint8_t *)txBuffer, 2);
    HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 2);
 8006bdc:	2202      	movs	r2, #2
 8006bde:	4907      	ldr	r1, [pc, #28]	@ (8006bfc <HAL_UART_RxCpltCallback+0xa4>)
 8006be0:	480b      	ldr	r0, [pc, #44]	@ (8006c10 <HAL_UART_RxCpltCallback+0xb8>)
 8006be2:	f001 fec0 	bl	8008966 <HAL_UART_Receive_IT>
  }
}
 8006be6:	bf00      	nop
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	40013800 	.word	0x40013800
 8006bf4:	2000406e 	.word	0x2000406e
 8006bf8:	2000406a 	.word	0x2000406a
 8006bfc:	20000118 	.word	0x20000118
 8006c00:	20004068 	.word	0x20004068
 8006c04:	20000010 	.word	0x20000010
 8006c08:	2000406b 	.word	0x2000406b
 8006c0c:	2000000c 	.word	0x2000000c
 8006c10:	200040bc 	.word	0x200040bc

08006c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006c1c:	4a14      	ldr	r2, [pc, #80]	@ (8006c70 <_sbrk+0x5c>)
 8006c1e:	4b15      	ldr	r3, [pc, #84]	@ (8006c74 <_sbrk+0x60>)
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006c28:	4b13      	ldr	r3, [pc, #76]	@ (8006c78 <_sbrk+0x64>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d102      	bne.n	8006c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006c30:	4b11      	ldr	r3, [pc, #68]	@ (8006c78 <_sbrk+0x64>)
 8006c32:	4a12      	ldr	r2, [pc, #72]	@ (8006c7c <_sbrk+0x68>)
 8006c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006c36:	4b10      	ldr	r3, [pc, #64]	@ (8006c78 <_sbrk+0x64>)
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d207      	bcs.n	8006c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006c44:	f002 fbee 	bl	8009424 <__errno>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	220c      	movs	r2, #12
 8006c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c52:	e009      	b.n	8006c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006c54:	4b08      	ldr	r3, [pc, #32]	@ (8006c78 <_sbrk+0x64>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006c5a:	4b07      	ldr	r3, [pc, #28]	@ (8006c78 <_sbrk+0x64>)
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4413      	add	r3, r2
 8006c62:	4a05      	ldr	r2, [pc, #20]	@ (8006c78 <_sbrk+0x64>)
 8006c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006c66:	68fb      	ldr	r3, [r7, #12]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	2000c000 	.word	0x2000c000
 8006c74:	00000400 	.word	0x00000400
 8006c78:	20004070 	.word	0x20004070
 8006c7c:	20004250 	.word	0x20004250

08006c80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006c80:	b480      	push	{r7}
 8006c82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006c84:	bf00      	nop
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bc80      	pop	{r7}
 8006c8a:	4770      	bx	lr

08006c8c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006c92:	f107 0308 	add.w	r3, r7, #8
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	605a      	str	r2, [r3, #4]
 8006c9c:	609a      	str	r2, [r3, #8]
 8006c9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ca0:	463b      	mov	r3, r7
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8006d20 <MX_TIM3_Init+0x94>)
 8006caa:	4a1e      	ldr	r2, [pc, #120]	@ (8006d24 <MX_TIM3_Init+0x98>)
 8006cac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8006cae:	4b1c      	ldr	r3, [pc, #112]	@ (8006d20 <MX_TIM3_Init+0x94>)
 8006cb0:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8006cb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8006d20 <MX_TIM3_Init+0x94>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8006cbc:	4b18      	ldr	r3, [pc, #96]	@ (8006d20 <MX_TIM3_Init+0x94>)
 8006cbe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006cc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006cc4:	4b16      	ldr	r3, [pc, #88]	@ (8006d20 <MX_TIM3_Init+0x94>)
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006cca:	4b15      	ldr	r3, [pc, #84]	@ (8006d20 <MX_TIM3_Init+0x94>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006cd0:	4813      	ldr	r0, [pc, #76]	@ (8006d20 <MX_TIM3_Init+0x94>)
 8006cd2:	f001 f99d 	bl	8008010 <HAL_TIM_Base_Init>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8006cdc:	f7ff fe8a 	bl	80069f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006ce0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ce4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006ce6:	f107 0308 	add.w	r3, r7, #8
 8006cea:	4619      	mov	r1, r3
 8006cec:	480c      	ldr	r0, [pc, #48]	@ (8006d20 <MX_TIM3_Init+0x94>)
 8006cee:	f001 fb2f 	bl	8008350 <HAL_TIM_ConfigClockSource>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8006cf8:	f7ff fe7c 	bl	80069f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006d00:	2300      	movs	r3, #0
 8006d02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006d04:	463b      	mov	r3, r7
 8006d06:	4619      	mov	r1, r3
 8006d08:	4805      	ldr	r0, [pc, #20]	@ (8006d20 <MX_TIM3_Init+0x94>)
 8006d0a:	f001 fd29 	bl	8008760 <HAL_TIMEx_MasterConfigSynchronization>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8006d14:	f7ff fe6e 	bl	80069f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006d18:	bf00      	nop
 8006d1a:	3718      	adds	r7, #24
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	20004074 	.word	0x20004074
 8006d24:	40000400 	.word	0x40000400

08006d28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a0d      	ldr	r2, [pc, #52]	@ (8006d6c <HAL_TIM_Base_MspInit+0x44>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d113      	bne.n	8006d62 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d70 <HAL_TIM_Base_MspInit+0x48>)
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8006d70 <HAL_TIM_Base_MspInit+0x48>)
 8006d40:	f043 0302 	orr.w	r3, r3, #2
 8006d44:	61d3      	str	r3, [r2, #28]
 8006d46:	4b0a      	ldr	r3, [pc, #40]	@ (8006d70 <HAL_TIM_Base_MspInit+0x48>)
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8006d52:	2200      	movs	r2, #0
 8006d54:	2102      	movs	r1, #2
 8006d56:	201d      	movs	r0, #29
 8006d58:	f000 fa0d 	bl	8007176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006d5c:	201d      	movs	r0, #29
 8006d5e:	f000 fa26 	bl	80071ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006d62:	bf00      	nop
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	40000400 	.word	0x40000400
 8006d70:	40021000 	.word	0x40021000

08006d74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006d78:	4b10      	ldr	r3, [pc, #64]	@ (8006dbc <MX_USART1_UART_Init+0x48>)
 8006d7a:	4a11      	ldr	r2, [pc, #68]	@ (8006dc0 <MX_USART1_UART_Init+0x4c>)
 8006d7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8006d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8006dbc <MX_USART1_UART_Init+0x48>)
 8006d80:	4a10      	ldr	r2, [pc, #64]	@ (8006dc4 <MX_USART1_UART_Init+0x50>)
 8006d82:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006d84:	4b0d      	ldr	r3, [pc, #52]	@ (8006dbc <MX_USART1_UART_Init+0x48>)
 8006d86:	2200      	movs	r2, #0
 8006d88:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8006dbc <MX_USART1_UART_Init+0x48>)
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006d90:	4b0a      	ldr	r3, [pc, #40]	@ (8006dbc <MX_USART1_UART_Init+0x48>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006d96:	4b09      	ldr	r3, [pc, #36]	@ (8006dbc <MX_USART1_UART_Init+0x48>)
 8006d98:	220c      	movs	r2, #12
 8006d9a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d9c:	4b07      	ldr	r3, [pc, #28]	@ (8006dbc <MX_USART1_UART_Init+0x48>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006da2:	4b06      	ldr	r3, [pc, #24]	@ (8006dbc <MX_USART1_UART_Init+0x48>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006da8:	4804      	ldr	r0, [pc, #16]	@ (8006dbc <MX_USART1_UART_Init+0x48>)
 8006daa:	f001 fd57 	bl	800885c <HAL_UART_Init>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8006db4:	f7ff fe1e 	bl	80069f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006db8:	bf00      	nop
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	200040bc 	.word	0x200040bc
 8006dc0:	40013800 	.word	0x40013800
 8006dc4:	000f4240 	.word	0x000f4240

08006dc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b088      	sub	sp, #32
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dd0:	f107 0310 	add.w	r3, r7, #16
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	605a      	str	r2, [r3, #4]
 8006dda:	609a      	str	r2, [r3, #8]
 8006ddc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a20      	ldr	r2, [pc, #128]	@ (8006e64 <HAL_UART_MspInit+0x9c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d139      	bne.n	8006e5c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006de8:	4b1f      	ldr	r3, [pc, #124]	@ (8006e68 <HAL_UART_MspInit+0xa0>)
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	4a1e      	ldr	r2, [pc, #120]	@ (8006e68 <HAL_UART_MspInit+0xa0>)
 8006dee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006df2:	6193      	str	r3, [r2, #24]
 8006df4:	4b1c      	ldr	r3, [pc, #112]	@ (8006e68 <HAL_UART_MspInit+0xa0>)
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e00:	4b19      	ldr	r3, [pc, #100]	@ (8006e68 <HAL_UART_MspInit+0xa0>)
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	4a18      	ldr	r2, [pc, #96]	@ (8006e68 <HAL_UART_MspInit+0xa0>)
 8006e06:	f043 0304 	orr.w	r3, r3, #4
 8006e0a:	6193      	str	r3, [r2, #24]
 8006e0c:	4b16      	ldr	r3, [pc, #88]	@ (8006e68 <HAL_UART_MspInit+0xa0>)
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	f003 0304 	and.w	r3, r3, #4
 8006e14:	60bb      	str	r3, [r7, #8]
 8006e16:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006e18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e1e:	2302      	movs	r3, #2
 8006e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006e22:	2303      	movs	r3, #3
 8006e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e26:	f107 0310 	add.w	r3, r7, #16
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	480f      	ldr	r0, [pc, #60]	@ (8006e6c <HAL_UART_MspInit+0xa4>)
 8006e2e:	f000 fb1b 	bl	8007468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006e32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e40:	f107 0310 	add.w	r3, r7, #16
 8006e44:	4619      	mov	r1, r3
 8006e46:	4809      	ldr	r0, [pc, #36]	@ (8006e6c <HAL_UART_MspInit+0xa4>)
 8006e48:	f000 fb0e 	bl	8007468 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2101      	movs	r1, #1
 8006e50:	2025      	movs	r0, #37	@ 0x25
 8006e52:	f000 f990 	bl	8007176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006e56:	2025      	movs	r0, #37	@ 0x25
 8006e58:	f000 f9a9 	bl	80071ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006e5c:	bf00      	nop
 8006e5e:	3720      	adds	r7, #32
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	40013800 	.word	0x40013800
 8006e68:	40021000 	.word	0x40021000
 8006e6c:	40010800 	.word	0x40010800

08006e70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006e70:	f7ff ff06 	bl	8006c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006e74:	480b      	ldr	r0, [pc, #44]	@ (8006ea4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8006e76:	490c      	ldr	r1, [pc, #48]	@ (8006ea8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006e78:	4a0c      	ldr	r2, [pc, #48]	@ (8006eac <LoopFillZerobss+0x16>)
  movs r3, #0
 8006e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006e7c:	e002      	b.n	8006e84 <LoopCopyDataInit>

08006e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006e82:	3304      	adds	r3, #4

08006e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006e88:	d3f9      	bcc.n	8006e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006e8a:	4a09      	ldr	r2, [pc, #36]	@ (8006eb0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006e8c:	4c09      	ldr	r4, [pc, #36]	@ (8006eb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006e90:	e001      	b.n	8006e96 <LoopFillZerobss>

08006e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006e94:	3204      	adds	r2, #4

08006e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006e98:	d3fb      	bcc.n	8006e92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006e9a:	f002 fac9 	bl	8009430 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006e9e:	f7ff fa85 	bl	80063ac <main>
  bx lr
 8006ea2:	4770      	bx	lr
  ldr r0, =_sdata
 8006ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006ea8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8006eac:	0800b610 	.word	0x0800b610
  ldr r2, =_sbss
 8006eb0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8006eb4:	20004250 	.word	0x20004250

08006eb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006eb8:	e7fe      	b.n	8006eb8 <ADC1_2_IRQHandler>
	...

08006ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006ec0:	4b08      	ldr	r3, [pc, #32]	@ (8006ee4 <HAL_Init+0x28>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a07      	ldr	r2, [pc, #28]	@ (8006ee4 <HAL_Init+0x28>)
 8006ec6:	f043 0310 	orr.w	r3, r3, #16
 8006eca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ecc:	2003      	movs	r0, #3
 8006ece:	f000 f947 	bl	8007160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006ed2:	200f      	movs	r0, #15
 8006ed4:	f000 f808 	bl	8006ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006ed8:	f7ff fd92 	bl	8006a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	40022000 	.word	0x40022000

08006ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006ef0:	4b12      	ldr	r3, [pc, #72]	@ (8006f3c <HAL_InitTick+0x54>)
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	4b12      	ldr	r3, [pc, #72]	@ (8006f40 <HAL_InitTick+0x58>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	4619      	mov	r1, r3
 8006efa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 f95f 	bl	80071ca <HAL_SYSTICK_Config>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e00e      	b.n	8006f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b0f      	cmp	r3, #15
 8006f1a:	d80a      	bhi.n	8006f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	6879      	ldr	r1, [r7, #4]
 8006f20:	f04f 30ff 	mov.w	r0, #4294967295
 8006f24:	f000 f927 	bl	8007176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006f28:	4a06      	ldr	r2, [pc, #24]	@ (8006f44 <HAL_InitTick+0x5c>)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	e000      	b.n	8006f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	20000014 	.word	0x20000014
 8006f40:	2000001c 	.word	0x2000001c
 8006f44:	20000018 	.word	0x20000018

08006f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f4c:	4b05      	ldr	r3, [pc, #20]	@ (8006f64 <HAL_IncTick+0x1c>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	461a      	mov	r2, r3
 8006f52:	4b05      	ldr	r3, [pc, #20]	@ (8006f68 <HAL_IncTick+0x20>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4413      	add	r3, r2
 8006f58:	4a03      	ldr	r2, [pc, #12]	@ (8006f68 <HAL_IncTick+0x20>)
 8006f5a:	6013      	str	r3, [r2, #0]
}
 8006f5c:	bf00      	nop
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bc80      	pop	{r7}
 8006f62:	4770      	bx	lr
 8006f64:	2000001c 	.word	0x2000001c
 8006f68:	20004104 	.word	0x20004104

08006f6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8006f70:	4b02      	ldr	r3, [pc, #8]	@ (8006f7c <HAL_GetTick+0x10>)
 8006f72:	681b      	ldr	r3, [r3, #0]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bc80      	pop	{r7}
 8006f7a:	4770      	bx	lr
 8006f7c:	20004104 	.word	0x20004104

08006f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f88:	f7ff fff0 	bl	8006f6c <HAL_GetTick>
 8006f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f98:	d005      	beq.n	8006fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc4 <HAL_Delay+0x44>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006fa6:	bf00      	nop
 8006fa8:	f7ff ffe0 	bl	8006f6c <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d8f7      	bhi.n	8006fa8 <HAL_Delay+0x28>
  {
  }
}
 8006fb8:	bf00      	nop
 8006fba:	bf00      	nop
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	2000001c 	.word	0x2000001c

08006fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f003 0307 	and.w	r3, r3, #7
 8006fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800700c <__NVIC_SetPriorityGrouping+0x44>)
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ff0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006ff4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ffa:	4a04      	ldr	r2, [pc, #16]	@ (800700c <__NVIC_SetPriorityGrouping+0x44>)
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	60d3      	str	r3, [r2, #12]
}
 8007000:	bf00      	nop
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	bc80      	pop	{r7}
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	e000ed00 	.word	0xe000ed00

08007010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007010:	b480      	push	{r7}
 8007012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007014:	4b04      	ldr	r3, [pc, #16]	@ (8007028 <__NVIC_GetPriorityGrouping+0x18>)
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	0a1b      	lsrs	r3, r3, #8
 800701a:	f003 0307 	and.w	r3, r3, #7
}
 800701e:	4618      	mov	r0, r3
 8007020:	46bd      	mov	sp, r7
 8007022:	bc80      	pop	{r7}
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	e000ed00 	.word	0xe000ed00

0800702c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	4603      	mov	r3, r0
 8007034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800703a:	2b00      	cmp	r3, #0
 800703c:	db0b      	blt.n	8007056 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800703e:	79fb      	ldrb	r3, [r7, #7]
 8007040:	f003 021f 	and.w	r2, r3, #31
 8007044:	4906      	ldr	r1, [pc, #24]	@ (8007060 <__NVIC_EnableIRQ+0x34>)
 8007046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800704a:	095b      	lsrs	r3, r3, #5
 800704c:	2001      	movs	r0, #1
 800704e:	fa00 f202 	lsl.w	r2, r0, r2
 8007052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007056:	bf00      	nop
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	bc80      	pop	{r7}
 800705e:	4770      	bx	lr
 8007060:	e000e100 	.word	0xe000e100

08007064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	4603      	mov	r3, r0
 800706c:	6039      	str	r1, [r7, #0]
 800706e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007074:	2b00      	cmp	r3, #0
 8007076:	db0a      	blt.n	800708e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	b2da      	uxtb	r2, r3
 800707c:	490c      	ldr	r1, [pc, #48]	@ (80070b0 <__NVIC_SetPriority+0x4c>)
 800707e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007082:	0112      	lsls	r2, r2, #4
 8007084:	b2d2      	uxtb	r2, r2
 8007086:	440b      	add	r3, r1
 8007088:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800708c:	e00a      	b.n	80070a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	b2da      	uxtb	r2, r3
 8007092:	4908      	ldr	r1, [pc, #32]	@ (80070b4 <__NVIC_SetPriority+0x50>)
 8007094:	79fb      	ldrb	r3, [r7, #7]
 8007096:	f003 030f 	and.w	r3, r3, #15
 800709a:	3b04      	subs	r3, #4
 800709c:	0112      	lsls	r2, r2, #4
 800709e:	b2d2      	uxtb	r2, r2
 80070a0:	440b      	add	r3, r1
 80070a2:	761a      	strb	r2, [r3, #24]
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bc80      	pop	{r7}
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	e000e100 	.word	0xe000e100
 80070b4:	e000ed00 	.word	0xe000ed00

080070b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b089      	sub	sp, #36	@ 0x24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f003 0307 	and.w	r3, r3, #7
 80070ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	f1c3 0307 	rsb	r3, r3, #7
 80070d2:	2b04      	cmp	r3, #4
 80070d4:	bf28      	it	cs
 80070d6:	2304      	movcs	r3, #4
 80070d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	3304      	adds	r3, #4
 80070de:	2b06      	cmp	r3, #6
 80070e0:	d902      	bls.n	80070e8 <NVIC_EncodePriority+0x30>
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	3b03      	subs	r3, #3
 80070e6:	e000      	b.n	80070ea <NVIC_EncodePriority+0x32>
 80070e8:	2300      	movs	r3, #0
 80070ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070ec:	f04f 32ff 	mov.w	r2, #4294967295
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	fa02 f303 	lsl.w	r3, r2, r3
 80070f6:	43da      	mvns	r2, r3
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	401a      	ands	r2, r3
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007100:	f04f 31ff 	mov.w	r1, #4294967295
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	fa01 f303 	lsl.w	r3, r1, r3
 800710a:	43d9      	mvns	r1, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007110:	4313      	orrs	r3, r2
         );
}
 8007112:	4618      	mov	r0, r3
 8007114:	3724      	adds	r7, #36	@ 0x24
 8007116:	46bd      	mov	sp, r7
 8007118:	bc80      	pop	{r7}
 800711a:	4770      	bx	lr

0800711c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3b01      	subs	r3, #1
 8007128:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800712c:	d301      	bcc.n	8007132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800712e:	2301      	movs	r3, #1
 8007130:	e00f      	b.n	8007152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007132:	4a0a      	ldr	r2, [pc, #40]	@ (800715c <SysTick_Config+0x40>)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3b01      	subs	r3, #1
 8007138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800713a:	210f      	movs	r1, #15
 800713c:	f04f 30ff 	mov.w	r0, #4294967295
 8007140:	f7ff ff90 	bl	8007064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007144:	4b05      	ldr	r3, [pc, #20]	@ (800715c <SysTick_Config+0x40>)
 8007146:	2200      	movs	r2, #0
 8007148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800714a:	4b04      	ldr	r3, [pc, #16]	@ (800715c <SysTick_Config+0x40>)
 800714c:	2207      	movs	r2, #7
 800714e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	e000e010 	.word	0xe000e010

08007160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff ff2d 	bl	8006fc8 <__NVIC_SetPriorityGrouping>
}
 800716e:	bf00      	nop
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007176:	b580      	push	{r7, lr}
 8007178:	b086      	sub	sp, #24
 800717a:	af00      	add	r7, sp, #0
 800717c:	4603      	mov	r3, r0
 800717e:	60b9      	str	r1, [r7, #8]
 8007180:	607a      	str	r2, [r7, #4]
 8007182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007184:	2300      	movs	r3, #0
 8007186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007188:	f7ff ff42 	bl	8007010 <__NVIC_GetPriorityGrouping>
 800718c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	68b9      	ldr	r1, [r7, #8]
 8007192:	6978      	ldr	r0, [r7, #20]
 8007194:	f7ff ff90 	bl	80070b8 <NVIC_EncodePriority>
 8007198:	4602      	mov	r2, r0
 800719a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800719e:	4611      	mov	r1, r2
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7ff ff5f 	bl	8007064 <__NVIC_SetPriority>
}
 80071a6:	bf00      	nop
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b082      	sub	sp, #8
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	4603      	mov	r3, r0
 80071b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071bc:	4618      	mov	r0, r3
 80071be:	f7ff ff35 	bl	800702c <__NVIC_EnableIRQ>
}
 80071c2:	bf00      	nop
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7ff ffa2 	bl	800711c <SysTick_Config>
 80071d8:	4603      	mov	r3, r0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b085      	sub	sp, #20
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d008      	beq.n	800720c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2204      	movs	r2, #4
 80071fe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e020      	b.n	800724e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 020e 	bic.w	r2, r2, #14
 800721a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f022 0201 	bic.w	r2, r2, #1
 800722a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007234:	2101      	movs	r1, #1
 8007236:	fa01 f202 	lsl.w	r2, r1, r2
 800723a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800724c:	7bfb      	ldrb	r3, [r7, #15]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	bc80      	pop	{r7}
 8007256:	4770      	bx	lr

08007258 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007260:	2300      	movs	r3, #0
 8007262:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b02      	cmp	r3, #2
 800726e:	d005      	beq.n	800727c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2204      	movs	r2, #4
 8007274:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	73fb      	strb	r3, [r7, #15]
 800727a:	e0d6      	b.n	800742a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 020e 	bic.w	r2, r2, #14
 800728a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0201 	bic.w	r2, r2, #1
 800729a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	461a      	mov	r2, r3
 80072a2:	4b64      	ldr	r3, [pc, #400]	@ (8007434 <HAL_DMA_Abort_IT+0x1dc>)
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d958      	bls.n	800735a <HAL_DMA_Abort_IT+0x102>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a62      	ldr	r2, [pc, #392]	@ (8007438 <HAL_DMA_Abort_IT+0x1e0>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d04f      	beq.n	8007352 <HAL_DMA_Abort_IT+0xfa>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a61      	ldr	r2, [pc, #388]	@ (800743c <HAL_DMA_Abort_IT+0x1e4>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d048      	beq.n	800734e <HAL_DMA_Abort_IT+0xf6>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a5f      	ldr	r2, [pc, #380]	@ (8007440 <HAL_DMA_Abort_IT+0x1e8>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d040      	beq.n	8007348 <HAL_DMA_Abort_IT+0xf0>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a5e      	ldr	r2, [pc, #376]	@ (8007444 <HAL_DMA_Abort_IT+0x1ec>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d038      	beq.n	8007342 <HAL_DMA_Abort_IT+0xea>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a5c      	ldr	r2, [pc, #368]	@ (8007448 <HAL_DMA_Abort_IT+0x1f0>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d030      	beq.n	800733c <HAL_DMA_Abort_IT+0xe4>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a5b      	ldr	r2, [pc, #364]	@ (800744c <HAL_DMA_Abort_IT+0x1f4>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d028      	beq.n	8007336 <HAL_DMA_Abort_IT+0xde>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a52      	ldr	r2, [pc, #328]	@ (8007434 <HAL_DMA_Abort_IT+0x1dc>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d020      	beq.n	8007330 <HAL_DMA_Abort_IT+0xd8>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a57      	ldr	r2, [pc, #348]	@ (8007450 <HAL_DMA_Abort_IT+0x1f8>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d019      	beq.n	800732c <HAL_DMA_Abort_IT+0xd4>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a55      	ldr	r2, [pc, #340]	@ (8007454 <HAL_DMA_Abort_IT+0x1fc>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d012      	beq.n	8007328 <HAL_DMA_Abort_IT+0xd0>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a54      	ldr	r2, [pc, #336]	@ (8007458 <HAL_DMA_Abort_IT+0x200>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d00a      	beq.n	8007322 <HAL_DMA_Abort_IT+0xca>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a52      	ldr	r2, [pc, #328]	@ (800745c <HAL_DMA_Abort_IT+0x204>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d102      	bne.n	800731c <HAL_DMA_Abort_IT+0xc4>
 8007316:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800731a:	e01b      	b.n	8007354 <HAL_DMA_Abort_IT+0xfc>
 800731c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007320:	e018      	b.n	8007354 <HAL_DMA_Abort_IT+0xfc>
 8007322:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007326:	e015      	b.n	8007354 <HAL_DMA_Abort_IT+0xfc>
 8007328:	2310      	movs	r3, #16
 800732a:	e013      	b.n	8007354 <HAL_DMA_Abort_IT+0xfc>
 800732c:	2301      	movs	r3, #1
 800732e:	e011      	b.n	8007354 <HAL_DMA_Abort_IT+0xfc>
 8007330:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007334:	e00e      	b.n	8007354 <HAL_DMA_Abort_IT+0xfc>
 8007336:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800733a:	e00b      	b.n	8007354 <HAL_DMA_Abort_IT+0xfc>
 800733c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007340:	e008      	b.n	8007354 <HAL_DMA_Abort_IT+0xfc>
 8007342:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007346:	e005      	b.n	8007354 <HAL_DMA_Abort_IT+0xfc>
 8007348:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800734c:	e002      	b.n	8007354 <HAL_DMA_Abort_IT+0xfc>
 800734e:	2310      	movs	r3, #16
 8007350:	e000      	b.n	8007354 <HAL_DMA_Abort_IT+0xfc>
 8007352:	2301      	movs	r3, #1
 8007354:	4a42      	ldr	r2, [pc, #264]	@ (8007460 <HAL_DMA_Abort_IT+0x208>)
 8007356:	6053      	str	r3, [r2, #4]
 8007358:	e057      	b.n	800740a <HAL_DMA_Abort_IT+0x1b2>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a36      	ldr	r2, [pc, #216]	@ (8007438 <HAL_DMA_Abort_IT+0x1e0>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d04f      	beq.n	8007404 <HAL_DMA_Abort_IT+0x1ac>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a34      	ldr	r2, [pc, #208]	@ (800743c <HAL_DMA_Abort_IT+0x1e4>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d048      	beq.n	8007400 <HAL_DMA_Abort_IT+0x1a8>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a33      	ldr	r2, [pc, #204]	@ (8007440 <HAL_DMA_Abort_IT+0x1e8>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d040      	beq.n	80073fa <HAL_DMA_Abort_IT+0x1a2>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a31      	ldr	r2, [pc, #196]	@ (8007444 <HAL_DMA_Abort_IT+0x1ec>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d038      	beq.n	80073f4 <HAL_DMA_Abort_IT+0x19c>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a30      	ldr	r2, [pc, #192]	@ (8007448 <HAL_DMA_Abort_IT+0x1f0>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d030      	beq.n	80073ee <HAL_DMA_Abort_IT+0x196>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a2e      	ldr	r2, [pc, #184]	@ (800744c <HAL_DMA_Abort_IT+0x1f4>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d028      	beq.n	80073e8 <HAL_DMA_Abort_IT+0x190>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a26      	ldr	r2, [pc, #152]	@ (8007434 <HAL_DMA_Abort_IT+0x1dc>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d020      	beq.n	80073e2 <HAL_DMA_Abort_IT+0x18a>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a2a      	ldr	r2, [pc, #168]	@ (8007450 <HAL_DMA_Abort_IT+0x1f8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d019      	beq.n	80073de <HAL_DMA_Abort_IT+0x186>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a29      	ldr	r2, [pc, #164]	@ (8007454 <HAL_DMA_Abort_IT+0x1fc>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d012      	beq.n	80073da <HAL_DMA_Abort_IT+0x182>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a27      	ldr	r2, [pc, #156]	@ (8007458 <HAL_DMA_Abort_IT+0x200>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d00a      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a26      	ldr	r2, [pc, #152]	@ (800745c <HAL_DMA_Abort_IT+0x204>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d102      	bne.n	80073ce <HAL_DMA_Abort_IT+0x176>
 80073c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80073cc:	e01b      	b.n	8007406 <HAL_DMA_Abort_IT+0x1ae>
 80073ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80073d2:	e018      	b.n	8007406 <HAL_DMA_Abort_IT+0x1ae>
 80073d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80073d8:	e015      	b.n	8007406 <HAL_DMA_Abort_IT+0x1ae>
 80073da:	2310      	movs	r3, #16
 80073dc:	e013      	b.n	8007406 <HAL_DMA_Abort_IT+0x1ae>
 80073de:	2301      	movs	r3, #1
 80073e0:	e011      	b.n	8007406 <HAL_DMA_Abort_IT+0x1ae>
 80073e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073e6:	e00e      	b.n	8007406 <HAL_DMA_Abort_IT+0x1ae>
 80073e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80073ec:	e00b      	b.n	8007406 <HAL_DMA_Abort_IT+0x1ae>
 80073ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80073f2:	e008      	b.n	8007406 <HAL_DMA_Abort_IT+0x1ae>
 80073f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80073f8:	e005      	b.n	8007406 <HAL_DMA_Abort_IT+0x1ae>
 80073fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80073fe:	e002      	b.n	8007406 <HAL_DMA_Abort_IT+0x1ae>
 8007400:	2310      	movs	r3, #16
 8007402:	e000      	b.n	8007406 <HAL_DMA_Abort_IT+0x1ae>
 8007404:	2301      	movs	r3, #1
 8007406:	4a17      	ldr	r2, [pc, #92]	@ (8007464 <HAL_DMA_Abort_IT+0x20c>)
 8007408:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	4798      	blx	r3
    } 
  }
  return status;
 800742a:	7bfb      	ldrb	r3, [r7, #15]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	40020080 	.word	0x40020080
 8007438:	40020008 	.word	0x40020008
 800743c:	4002001c 	.word	0x4002001c
 8007440:	40020030 	.word	0x40020030
 8007444:	40020044 	.word	0x40020044
 8007448:	40020058 	.word	0x40020058
 800744c:	4002006c 	.word	0x4002006c
 8007450:	40020408 	.word	0x40020408
 8007454:	4002041c 	.word	0x4002041c
 8007458:	40020430 	.word	0x40020430
 800745c:	40020444 	.word	0x40020444
 8007460:	40020400 	.word	0x40020400
 8007464:	40020000 	.word	0x40020000

08007468 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007468:	b480      	push	{r7}
 800746a:	b08b      	sub	sp, #44	@ 0x2c
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007472:	2300      	movs	r3, #0
 8007474:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007476:	2300      	movs	r3, #0
 8007478:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800747a:	e179      	b.n	8007770 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800747c:	2201      	movs	r2, #1
 800747e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007480:	fa02 f303 	lsl.w	r3, r2, r3
 8007484:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	69fa      	ldr	r2, [r7, #28]
 800748c:	4013      	ands	r3, r2
 800748e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	429a      	cmp	r2, r3
 8007496:	f040 8168 	bne.w	800776a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	4a96      	ldr	r2, [pc, #600]	@ (80076f8 <HAL_GPIO_Init+0x290>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d05e      	beq.n	8007562 <HAL_GPIO_Init+0xfa>
 80074a4:	4a94      	ldr	r2, [pc, #592]	@ (80076f8 <HAL_GPIO_Init+0x290>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d875      	bhi.n	8007596 <HAL_GPIO_Init+0x12e>
 80074aa:	4a94      	ldr	r2, [pc, #592]	@ (80076fc <HAL_GPIO_Init+0x294>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d058      	beq.n	8007562 <HAL_GPIO_Init+0xfa>
 80074b0:	4a92      	ldr	r2, [pc, #584]	@ (80076fc <HAL_GPIO_Init+0x294>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d86f      	bhi.n	8007596 <HAL_GPIO_Init+0x12e>
 80074b6:	4a92      	ldr	r2, [pc, #584]	@ (8007700 <HAL_GPIO_Init+0x298>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d052      	beq.n	8007562 <HAL_GPIO_Init+0xfa>
 80074bc:	4a90      	ldr	r2, [pc, #576]	@ (8007700 <HAL_GPIO_Init+0x298>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d869      	bhi.n	8007596 <HAL_GPIO_Init+0x12e>
 80074c2:	4a90      	ldr	r2, [pc, #576]	@ (8007704 <HAL_GPIO_Init+0x29c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d04c      	beq.n	8007562 <HAL_GPIO_Init+0xfa>
 80074c8:	4a8e      	ldr	r2, [pc, #568]	@ (8007704 <HAL_GPIO_Init+0x29c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d863      	bhi.n	8007596 <HAL_GPIO_Init+0x12e>
 80074ce:	4a8e      	ldr	r2, [pc, #568]	@ (8007708 <HAL_GPIO_Init+0x2a0>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d046      	beq.n	8007562 <HAL_GPIO_Init+0xfa>
 80074d4:	4a8c      	ldr	r2, [pc, #560]	@ (8007708 <HAL_GPIO_Init+0x2a0>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d85d      	bhi.n	8007596 <HAL_GPIO_Init+0x12e>
 80074da:	2b12      	cmp	r3, #18
 80074dc:	d82a      	bhi.n	8007534 <HAL_GPIO_Init+0xcc>
 80074de:	2b12      	cmp	r3, #18
 80074e0:	d859      	bhi.n	8007596 <HAL_GPIO_Init+0x12e>
 80074e2:	a201      	add	r2, pc, #4	@ (adr r2, 80074e8 <HAL_GPIO_Init+0x80>)
 80074e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e8:	08007563 	.word	0x08007563
 80074ec:	0800753d 	.word	0x0800753d
 80074f0:	0800754f 	.word	0x0800754f
 80074f4:	08007591 	.word	0x08007591
 80074f8:	08007597 	.word	0x08007597
 80074fc:	08007597 	.word	0x08007597
 8007500:	08007597 	.word	0x08007597
 8007504:	08007597 	.word	0x08007597
 8007508:	08007597 	.word	0x08007597
 800750c:	08007597 	.word	0x08007597
 8007510:	08007597 	.word	0x08007597
 8007514:	08007597 	.word	0x08007597
 8007518:	08007597 	.word	0x08007597
 800751c:	08007597 	.word	0x08007597
 8007520:	08007597 	.word	0x08007597
 8007524:	08007597 	.word	0x08007597
 8007528:	08007597 	.word	0x08007597
 800752c:	08007545 	.word	0x08007545
 8007530:	08007559 	.word	0x08007559
 8007534:	4a75      	ldr	r2, [pc, #468]	@ (800770c <HAL_GPIO_Init+0x2a4>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d013      	beq.n	8007562 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800753a:	e02c      	b.n	8007596 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	623b      	str	r3, [r7, #32]
          break;
 8007542:	e029      	b.n	8007598 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	3304      	adds	r3, #4
 800754a:	623b      	str	r3, [r7, #32]
          break;
 800754c:	e024      	b.n	8007598 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	3308      	adds	r3, #8
 8007554:	623b      	str	r3, [r7, #32]
          break;
 8007556:	e01f      	b.n	8007598 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	330c      	adds	r3, #12
 800755e:	623b      	str	r3, [r7, #32]
          break;
 8007560:	e01a      	b.n	8007598 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d102      	bne.n	8007570 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800756a:	2304      	movs	r3, #4
 800756c:	623b      	str	r3, [r7, #32]
          break;
 800756e:	e013      	b.n	8007598 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d105      	bne.n	8007584 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007578:	2308      	movs	r3, #8
 800757a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	69fa      	ldr	r2, [r7, #28]
 8007580:	611a      	str	r2, [r3, #16]
          break;
 8007582:	e009      	b.n	8007598 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007584:	2308      	movs	r3, #8
 8007586:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	69fa      	ldr	r2, [r7, #28]
 800758c:	615a      	str	r2, [r3, #20]
          break;
 800758e:	e003      	b.n	8007598 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007590:	2300      	movs	r3, #0
 8007592:	623b      	str	r3, [r7, #32]
          break;
 8007594:	e000      	b.n	8007598 <HAL_GPIO_Init+0x130>
          break;
 8007596:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	2bff      	cmp	r3, #255	@ 0xff
 800759c:	d801      	bhi.n	80075a2 <HAL_GPIO_Init+0x13a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	e001      	b.n	80075a6 <HAL_GPIO_Init+0x13e>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	3304      	adds	r3, #4
 80075a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	2bff      	cmp	r3, #255	@ 0xff
 80075ac:	d802      	bhi.n	80075b4 <HAL_GPIO_Init+0x14c>
 80075ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	e002      	b.n	80075ba <HAL_GPIO_Init+0x152>
 80075b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b6:	3b08      	subs	r3, #8
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	210f      	movs	r1, #15
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	fa01 f303 	lsl.w	r3, r1, r3
 80075c8:	43db      	mvns	r3, r3
 80075ca:	401a      	ands	r2, r3
 80075cc:	6a39      	ldr	r1, [r7, #32]
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	fa01 f303 	lsl.w	r3, r1, r3
 80075d4:	431a      	orrs	r2, r3
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f000 80c1 	beq.w	800776a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80075e8:	4b49      	ldr	r3, [pc, #292]	@ (8007710 <HAL_GPIO_Init+0x2a8>)
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	4a48      	ldr	r2, [pc, #288]	@ (8007710 <HAL_GPIO_Init+0x2a8>)
 80075ee:	f043 0301 	orr.w	r3, r3, #1
 80075f2:	6193      	str	r3, [r2, #24]
 80075f4:	4b46      	ldr	r3, [pc, #280]	@ (8007710 <HAL_GPIO_Init+0x2a8>)
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	f003 0301 	and.w	r3, r3, #1
 80075fc:	60bb      	str	r3, [r7, #8]
 80075fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007600:	4a44      	ldr	r2, [pc, #272]	@ (8007714 <HAL_GPIO_Init+0x2ac>)
 8007602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007604:	089b      	lsrs	r3, r3, #2
 8007606:	3302      	adds	r3, #2
 8007608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800760c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800760e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007610:	f003 0303 	and.w	r3, r3, #3
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	220f      	movs	r2, #15
 8007618:	fa02 f303 	lsl.w	r3, r2, r3
 800761c:	43db      	mvns	r3, r3
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	4013      	ands	r3, r2
 8007622:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a3c      	ldr	r2, [pc, #240]	@ (8007718 <HAL_GPIO_Init+0x2b0>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d01f      	beq.n	800766c <HAL_GPIO_Init+0x204>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a3b      	ldr	r2, [pc, #236]	@ (800771c <HAL_GPIO_Init+0x2b4>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d019      	beq.n	8007668 <HAL_GPIO_Init+0x200>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a3a      	ldr	r2, [pc, #232]	@ (8007720 <HAL_GPIO_Init+0x2b8>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d013      	beq.n	8007664 <HAL_GPIO_Init+0x1fc>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a39      	ldr	r2, [pc, #228]	@ (8007724 <HAL_GPIO_Init+0x2bc>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d00d      	beq.n	8007660 <HAL_GPIO_Init+0x1f8>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a38      	ldr	r2, [pc, #224]	@ (8007728 <HAL_GPIO_Init+0x2c0>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d007      	beq.n	800765c <HAL_GPIO_Init+0x1f4>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a37      	ldr	r2, [pc, #220]	@ (800772c <HAL_GPIO_Init+0x2c4>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d101      	bne.n	8007658 <HAL_GPIO_Init+0x1f0>
 8007654:	2305      	movs	r3, #5
 8007656:	e00a      	b.n	800766e <HAL_GPIO_Init+0x206>
 8007658:	2306      	movs	r3, #6
 800765a:	e008      	b.n	800766e <HAL_GPIO_Init+0x206>
 800765c:	2304      	movs	r3, #4
 800765e:	e006      	b.n	800766e <HAL_GPIO_Init+0x206>
 8007660:	2303      	movs	r3, #3
 8007662:	e004      	b.n	800766e <HAL_GPIO_Init+0x206>
 8007664:	2302      	movs	r3, #2
 8007666:	e002      	b.n	800766e <HAL_GPIO_Init+0x206>
 8007668:	2301      	movs	r3, #1
 800766a:	e000      	b.n	800766e <HAL_GPIO_Init+0x206>
 800766c:	2300      	movs	r3, #0
 800766e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007670:	f002 0203 	and.w	r2, r2, #3
 8007674:	0092      	lsls	r2, r2, #2
 8007676:	4093      	lsls	r3, r2
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	4313      	orrs	r3, r2
 800767c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800767e:	4925      	ldr	r1, [pc, #148]	@ (8007714 <HAL_GPIO_Init+0x2ac>)
 8007680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007682:	089b      	lsrs	r3, r3, #2
 8007684:	3302      	adds	r3, #2
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d006      	beq.n	80076a6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007698:	4b25      	ldr	r3, [pc, #148]	@ (8007730 <HAL_GPIO_Init+0x2c8>)
 800769a:	689a      	ldr	r2, [r3, #8]
 800769c:	4924      	ldr	r1, [pc, #144]	@ (8007730 <HAL_GPIO_Init+0x2c8>)
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	608b      	str	r3, [r1, #8]
 80076a4:	e006      	b.n	80076b4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80076a6:	4b22      	ldr	r3, [pc, #136]	@ (8007730 <HAL_GPIO_Init+0x2c8>)
 80076a8:	689a      	ldr	r2, [r3, #8]
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	43db      	mvns	r3, r3
 80076ae:	4920      	ldr	r1, [pc, #128]	@ (8007730 <HAL_GPIO_Init+0x2c8>)
 80076b0:	4013      	ands	r3, r2
 80076b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d006      	beq.n	80076ce <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80076c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007730 <HAL_GPIO_Init+0x2c8>)
 80076c2:	68da      	ldr	r2, [r3, #12]
 80076c4:	491a      	ldr	r1, [pc, #104]	@ (8007730 <HAL_GPIO_Init+0x2c8>)
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	60cb      	str	r3, [r1, #12]
 80076cc:	e006      	b.n	80076dc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80076ce:	4b18      	ldr	r3, [pc, #96]	@ (8007730 <HAL_GPIO_Init+0x2c8>)
 80076d0:	68da      	ldr	r2, [r3, #12]
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	43db      	mvns	r3, r3
 80076d6:	4916      	ldr	r1, [pc, #88]	@ (8007730 <HAL_GPIO_Init+0x2c8>)
 80076d8:	4013      	ands	r3, r2
 80076da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d025      	beq.n	8007734 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80076e8:	4b11      	ldr	r3, [pc, #68]	@ (8007730 <HAL_GPIO_Init+0x2c8>)
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	4910      	ldr	r1, [pc, #64]	@ (8007730 <HAL_GPIO_Init+0x2c8>)
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	604b      	str	r3, [r1, #4]
 80076f4:	e025      	b.n	8007742 <HAL_GPIO_Init+0x2da>
 80076f6:	bf00      	nop
 80076f8:	10320000 	.word	0x10320000
 80076fc:	10310000 	.word	0x10310000
 8007700:	10220000 	.word	0x10220000
 8007704:	10210000 	.word	0x10210000
 8007708:	10120000 	.word	0x10120000
 800770c:	10110000 	.word	0x10110000
 8007710:	40021000 	.word	0x40021000
 8007714:	40010000 	.word	0x40010000
 8007718:	40010800 	.word	0x40010800
 800771c:	40010c00 	.word	0x40010c00
 8007720:	40011000 	.word	0x40011000
 8007724:	40011400 	.word	0x40011400
 8007728:	40011800 	.word	0x40011800
 800772c:	40011c00 	.word	0x40011c00
 8007730:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007734:	4b15      	ldr	r3, [pc, #84]	@ (800778c <HAL_GPIO_Init+0x324>)
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	43db      	mvns	r3, r3
 800773c:	4913      	ldr	r1, [pc, #76]	@ (800778c <HAL_GPIO_Init+0x324>)
 800773e:	4013      	ands	r3, r2
 8007740:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d006      	beq.n	800775c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800774e:	4b0f      	ldr	r3, [pc, #60]	@ (800778c <HAL_GPIO_Init+0x324>)
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	490e      	ldr	r1, [pc, #56]	@ (800778c <HAL_GPIO_Init+0x324>)
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	4313      	orrs	r3, r2
 8007758:	600b      	str	r3, [r1, #0]
 800775a:	e006      	b.n	800776a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800775c:	4b0b      	ldr	r3, [pc, #44]	@ (800778c <HAL_GPIO_Init+0x324>)
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	43db      	mvns	r3, r3
 8007764:	4909      	ldr	r1, [pc, #36]	@ (800778c <HAL_GPIO_Init+0x324>)
 8007766:	4013      	ands	r3, r2
 8007768:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800776a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776c:	3301      	adds	r3, #1
 800776e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007776:	fa22 f303 	lsr.w	r3, r2, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	f47f ae7e 	bne.w	800747c <HAL_GPIO_Init+0x14>
  }
}
 8007780:	bf00      	nop
 8007782:	bf00      	nop
 8007784:	372c      	adds	r7, #44	@ 0x2c
 8007786:	46bd      	mov	sp, r7
 8007788:	bc80      	pop	{r7}
 800778a:	4770      	bx	lr
 800778c:	40010400 	.word	0x40010400

08007790 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689a      	ldr	r2, [r3, #8]
 80077a0:	887b      	ldrh	r3, [r7, #2]
 80077a2:	4013      	ands	r3, r2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80077a8:	2301      	movs	r3, #1
 80077aa:	73fb      	strb	r3, [r7, #15]
 80077ac:	e001      	b.n	80077b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80077ae:	2300      	movs	r3, #0
 80077b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bc80      	pop	{r7}
 80077bc:	4770      	bx	lr

080077be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077be:	b480      	push	{r7}
 80077c0:	b083      	sub	sp, #12
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	460b      	mov	r3, r1
 80077c8:	807b      	strh	r3, [r7, #2]
 80077ca:	4613      	mov	r3, r2
 80077cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80077ce:	787b      	ldrb	r3, [r7, #1]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d003      	beq.n	80077dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80077d4:	887a      	ldrh	r2, [r7, #2]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80077da:	e003      	b.n	80077e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80077dc:	887b      	ldrh	r3, [r7, #2]
 80077de:	041a      	lsls	r2, r3, #16
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	611a      	str	r2, [r3, #16]
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bc80      	pop	{r7}
 80077ec:	4770      	bx	lr
	...

080077f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e272      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 8087 	beq.w	800791e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007810:	4b92      	ldr	r3, [pc, #584]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f003 030c 	and.w	r3, r3, #12
 8007818:	2b04      	cmp	r3, #4
 800781a:	d00c      	beq.n	8007836 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800781c:	4b8f      	ldr	r3, [pc, #572]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f003 030c 	and.w	r3, r3, #12
 8007824:	2b08      	cmp	r3, #8
 8007826:	d112      	bne.n	800784e <HAL_RCC_OscConfig+0x5e>
 8007828:	4b8c      	ldr	r3, [pc, #560]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007834:	d10b      	bne.n	800784e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007836:	4b89      	ldr	r3, [pc, #548]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d06c      	beq.n	800791c <HAL_RCC_OscConfig+0x12c>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d168      	bne.n	800791c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e24c      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007856:	d106      	bne.n	8007866 <HAL_RCC_OscConfig+0x76>
 8007858:	4b80      	ldr	r3, [pc, #512]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a7f      	ldr	r2, [pc, #508]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 800785e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007862:	6013      	str	r3, [r2, #0]
 8007864:	e02e      	b.n	80078c4 <HAL_RCC_OscConfig+0xd4>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10c      	bne.n	8007888 <HAL_RCC_OscConfig+0x98>
 800786e:	4b7b      	ldr	r3, [pc, #492]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a7a      	ldr	r2, [pc, #488]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007874:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007878:	6013      	str	r3, [r2, #0]
 800787a:	4b78      	ldr	r3, [pc, #480]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a77      	ldr	r2, [pc, #476]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007880:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007884:	6013      	str	r3, [r2, #0]
 8007886:	e01d      	b.n	80078c4 <HAL_RCC_OscConfig+0xd4>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007890:	d10c      	bne.n	80078ac <HAL_RCC_OscConfig+0xbc>
 8007892:	4b72      	ldr	r3, [pc, #456]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a71      	ldr	r2, [pc, #452]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	4b6f      	ldr	r3, [pc, #444]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a6e      	ldr	r2, [pc, #440]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 80078a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078a8:	6013      	str	r3, [r2, #0]
 80078aa:	e00b      	b.n	80078c4 <HAL_RCC_OscConfig+0xd4>
 80078ac:	4b6b      	ldr	r3, [pc, #428]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a6a      	ldr	r2, [pc, #424]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 80078b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	4b68      	ldr	r3, [pc, #416]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a67      	ldr	r2, [pc, #412]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 80078be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d013      	beq.n	80078f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078cc:	f7ff fb4e 	bl	8006f6c <HAL_GetTick>
 80078d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078d2:	e008      	b.n	80078e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078d4:	f7ff fb4a 	bl	8006f6c <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	2b64      	cmp	r3, #100	@ 0x64
 80078e0:	d901      	bls.n	80078e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e200      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078e6:	4b5d      	ldr	r3, [pc, #372]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d0f0      	beq.n	80078d4 <HAL_RCC_OscConfig+0xe4>
 80078f2:	e014      	b.n	800791e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078f4:	f7ff fb3a 	bl	8006f6c <HAL_GetTick>
 80078f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078fa:	e008      	b.n	800790e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078fc:	f7ff fb36 	bl	8006f6c <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	2b64      	cmp	r3, #100	@ 0x64
 8007908:	d901      	bls.n	800790e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e1ec      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800790e:	4b53      	ldr	r3, [pc, #332]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1f0      	bne.n	80078fc <HAL_RCC_OscConfig+0x10c>
 800791a:	e000      	b.n	800791e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800791c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 0302 	and.w	r3, r3, #2
 8007926:	2b00      	cmp	r3, #0
 8007928:	d063      	beq.n	80079f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800792a:	4b4c      	ldr	r3, [pc, #304]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	f003 030c 	and.w	r3, r3, #12
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00b      	beq.n	800794e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007936:	4b49      	ldr	r3, [pc, #292]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f003 030c 	and.w	r3, r3, #12
 800793e:	2b08      	cmp	r3, #8
 8007940:	d11c      	bne.n	800797c <HAL_RCC_OscConfig+0x18c>
 8007942:	4b46      	ldr	r3, [pc, #280]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d116      	bne.n	800797c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800794e:	4b43      	ldr	r3, [pc, #268]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d005      	beq.n	8007966 <HAL_RCC_OscConfig+0x176>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d001      	beq.n	8007966 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e1c0      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007966:	4b3d      	ldr	r3, [pc, #244]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	00db      	lsls	r3, r3, #3
 8007974:	4939      	ldr	r1, [pc, #228]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007976:	4313      	orrs	r3, r2
 8007978:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800797a:	e03a      	b.n	80079f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d020      	beq.n	80079c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007984:	4b36      	ldr	r3, [pc, #216]	@ (8007a60 <HAL_RCC_OscConfig+0x270>)
 8007986:	2201      	movs	r2, #1
 8007988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800798a:	f7ff faef 	bl	8006f6c <HAL_GetTick>
 800798e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007990:	e008      	b.n	80079a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007992:	f7ff faeb 	bl	8006f6c <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d901      	bls.n	80079a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e1a1      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079a4:	4b2d      	ldr	r3, [pc, #180]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0f0      	beq.n	8007992 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079b0:	4b2a      	ldr	r3, [pc, #168]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	00db      	lsls	r3, r3, #3
 80079be:	4927      	ldr	r1, [pc, #156]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	600b      	str	r3, [r1, #0]
 80079c4:	e015      	b.n	80079f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079c6:	4b26      	ldr	r3, [pc, #152]	@ (8007a60 <HAL_RCC_OscConfig+0x270>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079cc:	f7ff face 	bl	8006f6c <HAL_GetTick>
 80079d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079d2:	e008      	b.n	80079e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079d4:	f7ff faca 	bl	8006f6c <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d901      	bls.n	80079e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e180      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079e6:	4b1d      	ldr	r3, [pc, #116]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1f0      	bne.n	80079d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0308 	and.w	r3, r3, #8
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d03a      	beq.n	8007a74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d019      	beq.n	8007a3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a06:	4b17      	ldr	r3, [pc, #92]	@ (8007a64 <HAL_RCC_OscConfig+0x274>)
 8007a08:	2201      	movs	r2, #1
 8007a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a0c:	f7ff faae 	bl	8006f6c <HAL_GetTick>
 8007a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a12:	e008      	b.n	8007a26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a14:	f7ff faaa 	bl	8006f6c <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d901      	bls.n	8007a26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e160      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a26:	4b0d      	ldr	r3, [pc, #52]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d0f0      	beq.n	8007a14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007a32:	2001      	movs	r0, #1
 8007a34:	f000 face 	bl	8007fd4 <RCC_Delay>
 8007a38:	e01c      	b.n	8007a74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8007a64 <HAL_RCC_OscConfig+0x274>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a40:	f7ff fa94 	bl	8006f6c <HAL_GetTick>
 8007a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a46:	e00f      	b.n	8007a68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a48:	f7ff fa90 	bl	8006f6c <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d908      	bls.n	8007a68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e146      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
 8007a5a:	bf00      	nop
 8007a5c:	40021000 	.word	0x40021000
 8007a60:	42420000 	.word	0x42420000
 8007a64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a68:	4b92      	ldr	r3, [pc, #584]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a6c:	f003 0302 	and.w	r3, r3, #2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1e9      	bne.n	8007a48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0304 	and.w	r3, r3, #4
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 80a6 	beq.w	8007bce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a82:	2300      	movs	r3, #0
 8007a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a86:	4b8b      	ldr	r3, [pc, #556]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10d      	bne.n	8007aae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a92:	4b88      	ldr	r3, [pc, #544]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007a94:	69db      	ldr	r3, [r3, #28]
 8007a96:	4a87      	ldr	r2, [pc, #540]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a9c:	61d3      	str	r3, [r2, #28]
 8007a9e:	4b85      	ldr	r3, [pc, #532]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007aa6:	60bb      	str	r3, [r7, #8]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aae:	4b82      	ldr	r3, [pc, #520]	@ (8007cb8 <HAL_RCC_OscConfig+0x4c8>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d118      	bne.n	8007aec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007aba:	4b7f      	ldr	r3, [pc, #508]	@ (8007cb8 <HAL_RCC_OscConfig+0x4c8>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a7e      	ldr	r2, [pc, #504]	@ (8007cb8 <HAL_RCC_OscConfig+0x4c8>)
 8007ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ac6:	f7ff fa51 	bl	8006f6c <HAL_GetTick>
 8007aca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007acc:	e008      	b.n	8007ae0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ace:	f7ff fa4d 	bl	8006f6c <HAL_GetTick>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	2b64      	cmp	r3, #100	@ 0x64
 8007ada:	d901      	bls.n	8007ae0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e103      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ae0:	4b75      	ldr	r3, [pc, #468]	@ (8007cb8 <HAL_RCC_OscConfig+0x4c8>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d0f0      	beq.n	8007ace <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d106      	bne.n	8007b02 <HAL_RCC_OscConfig+0x312>
 8007af4:	4b6f      	ldr	r3, [pc, #444]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	4a6e      	ldr	r2, [pc, #440]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007afa:	f043 0301 	orr.w	r3, r3, #1
 8007afe:	6213      	str	r3, [r2, #32]
 8007b00:	e02d      	b.n	8007b5e <HAL_RCC_OscConfig+0x36e>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10c      	bne.n	8007b24 <HAL_RCC_OscConfig+0x334>
 8007b0a:	4b6a      	ldr	r3, [pc, #424]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	4a69      	ldr	r2, [pc, #420]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b10:	f023 0301 	bic.w	r3, r3, #1
 8007b14:	6213      	str	r3, [r2, #32]
 8007b16:	4b67      	ldr	r3, [pc, #412]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	4a66      	ldr	r2, [pc, #408]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b1c:	f023 0304 	bic.w	r3, r3, #4
 8007b20:	6213      	str	r3, [r2, #32]
 8007b22:	e01c      	b.n	8007b5e <HAL_RCC_OscConfig+0x36e>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	2b05      	cmp	r3, #5
 8007b2a:	d10c      	bne.n	8007b46 <HAL_RCC_OscConfig+0x356>
 8007b2c:	4b61      	ldr	r3, [pc, #388]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	4a60      	ldr	r2, [pc, #384]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b32:	f043 0304 	orr.w	r3, r3, #4
 8007b36:	6213      	str	r3, [r2, #32]
 8007b38:	4b5e      	ldr	r3, [pc, #376]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b3a:	6a1b      	ldr	r3, [r3, #32]
 8007b3c:	4a5d      	ldr	r2, [pc, #372]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b3e:	f043 0301 	orr.w	r3, r3, #1
 8007b42:	6213      	str	r3, [r2, #32]
 8007b44:	e00b      	b.n	8007b5e <HAL_RCC_OscConfig+0x36e>
 8007b46:	4b5b      	ldr	r3, [pc, #364]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	4a5a      	ldr	r2, [pc, #360]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b4c:	f023 0301 	bic.w	r3, r3, #1
 8007b50:	6213      	str	r3, [r2, #32]
 8007b52:	4b58      	ldr	r3, [pc, #352]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	4a57      	ldr	r2, [pc, #348]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b58:	f023 0304 	bic.w	r3, r3, #4
 8007b5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d015      	beq.n	8007b92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b66:	f7ff fa01 	bl	8006f6c <HAL_GetTick>
 8007b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b6c:	e00a      	b.n	8007b84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b6e:	f7ff f9fd 	bl	8006f6c <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d901      	bls.n	8007b84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e0b1      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b84:	4b4b      	ldr	r3, [pc, #300]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d0ee      	beq.n	8007b6e <HAL_RCC_OscConfig+0x37e>
 8007b90:	e014      	b.n	8007bbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b92:	f7ff f9eb 	bl	8006f6c <HAL_GetTick>
 8007b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b98:	e00a      	b.n	8007bb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b9a:	f7ff f9e7 	bl	8006f6c <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d901      	bls.n	8007bb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e09b      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bb0:	4b40      	ldr	r3, [pc, #256]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007bb2:	6a1b      	ldr	r3, [r3, #32]
 8007bb4:	f003 0302 	and.w	r3, r3, #2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1ee      	bne.n	8007b9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007bbc:	7dfb      	ldrb	r3, [r7, #23]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d105      	bne.n	8007bce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bc2:	4b3c      	ldr	r3, [pc, #240]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	4a3b      	ldr	r2, [pc, #236]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007bc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 8087 	beq.w	8007ce6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007bd8:	4b36      	ldr	r3, [pc, #216]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	f003 030c 	and.w	r3, r3, #12
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	d061      	beq.n	8007ca8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d146      	bne.n	8007c7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bec:	4b33      	ldr	r3, [pc, #204]	@ (8007cbc <HAL_RCC_OscConfig+0x4cc>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bf2:	f7ff f9bb 	bl	8006f6c <HAL_GetTick>
 8007bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007bf8:	e008      	b.n	8007c0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bfa:	f7ff f9b7 	bl	8006f6c <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d901      	bls.n	8007c0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e06d      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c0c:	4b29      	ldr	r3, [pc, #164]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1f0      	bne.n	8007bfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c20:	d108      	bne.n	8007c34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007c22:	4b24      	ldr	r3, [pc, #144]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	4921      	ldr	r1, [pc, #132]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c34:	4b1f      	ldr	r3, [pc, #124]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a19      	ldr	r1, [r3, #32]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c44:	430b      	orrs	r3, r1
 8007c46:	491b      	ldr	r1, [pc, #108]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8007cbc <HAL_RCC_OscConfig+0x4cc>)
 8007c4e:	2201      	movs	r2, #1
 8007c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c52:	f7ff f98b 	bl	8006f6c <HAL_GetTick>
 8007c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007c58:	e008      	b.n	8007c6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c5a:	f7ff f987 	bl	8006f6c <HAL_GetTick>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d901      	bls.n	8007c6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e03d      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007c6c:	4b11      	ldr	r3, [pc, #68]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d0f0      	beq.n	8007c5a <HAL_RCC_OscConfig+0x46a>
 8007c78:	e035      	b.n	8007ce6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c7a:	4b10      	ldr	r3, [pc, #64]	@ (8007cbc <HAL_RCC_OscConfig+0x4cc>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c80:	f7ff f974 	bl	8006f6c <HAL_GetTick>
 8007c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c86:	e008      	b.n	8007c9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c88:	f7ff f970 	bl	8006f6c <HAL_GetTick>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d901      	bls.n	8007c9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e026      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c9a:	4b06      	ldr	r3, [pc, #24]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1f0      	bne.n	8007c88 <HAL_RCC_OscConfig+0x498>
 8007ca6:	e01e      	b.n	8007ce6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	69db      	ldr	r3, [r3, #28]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d107      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e019      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
 8007cb4:	40021000 	.word	0x40021000
 8007cb8:	40007000 	.word	0x40007000
 8007cbc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8007cf0 <HAL_RCC_OscConfig+0x500>)
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a1b      	ldr	r3, [r3, #32]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d106      	bne.n	8007ce2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d001      	beq.n	8007ce6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e000      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	40021000 	.word	0x40021000

08007cf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d101      	bne.n	8007d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e0d0      	b.n	8007eaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d08:	4b6a      	ldr	r3, [pc, #424]	@ (8007eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0307 	and.w	r3, r3, #7
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d910      	bls.n	8007d38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d16:	4b67      	ldr	r3, [pc, #412]	@ (8007eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f023 0207 	bic.w	r2, r3, #7
 8007d1e:	4965      	ldr	r1, [pc, #404]	@ (8007eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d26:	4b63      	ldr	r3, [pc, #396]	@ (8007eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 0307 	and.w	r3, r3, #7
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d001      	beq.n	8007d38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e0b8      	b.n	8007eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0302 	and.w	r3, r3, #2
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d020      	beq.n	8007d86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0304 	and.w	r3, r3, #4
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d005      	beq.n	8007d5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d50:	4b59      	ldr	r3, [pc, #356]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	4a58      	ldr	r2, [pc, #352]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007d56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007d5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0308 	and.w	r3, r3, #8
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d005      	beq.n	8007d74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d68:	4b53      	ldr	r3, [pc, #332]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	4a52      	ldr	r2, [pc, #328]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007d6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007d72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d74:	4b50      	ldr	r3, [pc, #320]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	494d      	ldr	r1, [pc, #308]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d040      	beq.n	8007e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d107      	bne.n	8007daa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d9a:	4b47      	ldr	r3, [pc, #284]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d115      	bne.n	8007dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e07f      	b.n	8007eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d107      	bne.n	8007dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007db2:	4b41      	ldr	r3, [pc, #260]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d109      	bne.n	8007dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e073      	b.n	8007eaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dc2:	4b3d      	ldr	r3, [pc, #244]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 0302 	and.w	r3, r3, #2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d101      	bne.n	8007dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e06b      	b.n	8007eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007dd2:	4b39      	ldr	r3, [pc, #228]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f023 0203 	bic.w	r2, r3, #3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	4936      	ldr	r1, [pc, #216]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007de0:	4313      	orrs	r3, r2
 8007de2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007de4:	f7ff f8c2 	bl	8006f6c <HAL_GetTick>
 8007de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dea:	e00a      	b.n	8007e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dec:	f7ff f8be 	bl	8006f6c <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d901      	bls.n	8007e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e053      	b.n	8007eaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e02:	4b2d      	ldr	r3, [pc, #180]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f003 020c 	and.w	r2, r3, #12
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d1eb      	bne.n	8007dec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e14:	4b27      	ldr	r3, [pc, #156]	@ (8007eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0307 	and.w	r3, r3, #7
 8007e1c:	683a      	ldr	r2, [r7, #0]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d210      	bcs.n	8007e44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e22:	4b24      	ldr	r3, [pc, #144]	@ (8007eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f023 0207 	bic.w	r2, r3, #7
 8007e2a:	4922      	ldr	r1, [pc, #136]	@ (8007eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e32:	4b20      	ldr	r3, [pc, #128]	@ (8007eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d001      	beq.n	8007e44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e032      	b.n	8007eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0304 	and.w	r3, r3, #4
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d008      	beq.n	8007e62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e50:	4b19      	ldr	r3, [pc, #100]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	4916      	ldr	r1, [pc, #88]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0308 	and.w	r3, r3, #8
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d009      	beq.n	8007e82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007e6e:	4b12      	ldr	r3, [pc, #72]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	490e      	ldr	r1, [pc, #56]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007e82:	f000 f821 	bl	8007ec8 <HAL_RCC_GetSysClockFreq>
 8007e86:	4602      	mov	r2, r0
 8007e88:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	091b      	lsrs	r3, r3, #4
 8007e8e:	f003 030f 	and.w	r3, r3, #15
 8007e92:	490a      	ldr	r1, [pc, #40]	@ (8007ebc <HAL_RCC_ClockConfig+0x1c8>)
 8007e94:	5ccb      	ldrb	r3, [r1, r3]
 8007e96:	fa22 f303 	lsr.w	r3, r2, r3
 8007e9a:	4a09      	ldr	r2, [pc, #36]	@ (8007ec0 <HAL_RCC_ClockConfig+0x1cc>)
 8007e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007e9e:	4b09      	ldr	r3, [pc, #36]	@ (8007ec4 <HAL_RCC_ClockConfig+0x1d0>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff f820 	bl	8006ee8 <HAL_InitTick>

  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	40022000 	.word	0x40022000
 8007eb8:	40021000 	.word	0x40021000
 8007ebc:	0800b5a8 	.word	0x0800b5a8
 8007ec0:	20000014 	.word	0x20000014
 8007ec4:	20000018 	.word	0x20000018

08007ec8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60fb      	str	r3, [r7, #12]
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	60bb      	str	r3, [r7, #8]
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	617b      	str	r3, [r7, #20]
 8007eda:	2300      	movs	r3, #0
 8007edc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8007f5c <HAL_RCC_GetSysClockFreq+0x94>)
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f003 030c 	and.w	r3, r3, #12
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	d002      	beq.n	8007ef8 <HAL_RCC_GetSysClockFreq+0x30>
 8007ef2:	2b08      	cmp	r3, #8
 8007ef4:	d003      	beq.n	8007efe <HAL_RCC_GetSysClockFreq+0x36>
 8007ef6:	e027      	b.n	8007f48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007ef8:	4b19      	ldr	r3, [pc, #100]	@ (8007f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8007efa:	613b      	str	r3, [r7, #16]
      break;
 8007efc:	e027      	b.n	8007f4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	0c9b      	lsrs	r3, r3, #18
 8007f02:	f003 030f 	and.w	r3, r3, #15
 8007f06:	4a17      	ldr	r2, [pc, #92]	@ (8007f64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007f08:	5cd3      	ldrb	r3, [r2, r3]
 8007f0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d010      	beq.n	8007f38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007f16:	4b11      	ldr	r3, [pc, #68]	@ (8007f5c <HAL_RCC_GetSysClockFreq+0x94>)
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	0c5b      	lsrs	r3, r3, #17
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	4a11      	ldr	r2, [pc, #68]	@ (8007f68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007f22:	5cd3      	ldrb	r3, [r2, r3]
 8007f24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a0d      	ldr	r2, [pc, #52]	@ (8007f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8007f2a:	fb03 f202 	mul.w	r2, r3, r2
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f34:	617b      	str	r3, [r7, #20]
 8007f36:	e004      	b.n	8007f42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a0c      	ldr	r2, [pc, #48]	@ (8007f6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8007f3c:	fb02 f303 	mul.w	r3, r2, r3
 8007f40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	613b      	str	r3, [r7, #16]
      break;
 8007f46:	e002      	b.n	8007f4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007f48:	4b05      	ldr	r3, [pc, #20]	@ (8007f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8007f4a:	613b      	str	r3, [r7, #16]
      break;
 8007f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f4e:	693b      	ldr	r3, [r7, #16]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	371c      	adds	r7, #28
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bc80      	pop	{r7}
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	40021000 	.word	0x40021000
 8007f60:	007a1200 	.word	0x007a1200
 8007f64:	0800b5c0 	.word	0x0800b5c0
 8007f68:	0800b5d0 	.word	0x0800b5d0
 8007f6c:	003d0900 	.word	0x003d0900

08007f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f70:	b480      	push	{r7}
 8007f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f74:	4b02      	ldr	r3, [pc, #8]	@ (8007f80 <HAL_RCC_GetHCLKFreq+0x10>)
 8007f76:	681b      	ldr	r3, [r3, #0]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bc80      	pop	{r7}
 8007f7e:	4770      	bx	lr
 8007f80:	20000014 	.word	0x20000014

08007f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007f88:	f7ff fff2 	bl	8007f70 <HAL_RCC_GetHCLKFreq>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	4b05      	ldr	r3, [pc, #20]	@ (8007fa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	0a1b      	lsrs	r3, r3, #8
 8007f94:	f003 0307 	and.w	r3, r3, #7
 8007f98:	4903      	ldr	r1, [pc, #12]	@ (8007fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f9a:	5ccb      	ldrb	r3, [r1, r3]
 8007f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	40021000 	.word	0x40021000
 8007fa8:	0800b5b8 	.word	0x0800b5b8

08007fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007fb0:	f7ff ffde 	bl	8007f70 <HAL_RCC_GetHCLKFreq>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	4b05      	ldr	r3, [pc, #20]	@ (8007fcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	0adb      	lsrs	r3, r3, #11
 8007fbc:	f003 0307 	and.w	r3, r3, #7
 8007fc0:	4903      	ldr	r1, [pc, #12]	@ (8007fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fc2:	5ccb      	ldrb	r3, [r1, r3]
 8007fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	40021000 	.word	0x40021000
 8007fd0:	0800b5b8 	.word	0x0800b5b8

08007fd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8008008 <RCC_Delay+0x34>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800800c <RCC_Delay+0x38>)
 8007fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe6:	0a5b      	lsrs	r3, r3, #9
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	fb02 f303 	mul.w	r3, r2, r3
 8007fee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007ff0:	bf00      	nop
  }
  while (Delay --);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	1e5a      	subs	r2, r3, #1
 8007ff6:	60fa      	str	r2, [r7, #12]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1f9      	bne.n	8007ff0 <RCC_Delay+0x1c>
}
 8007ffc:	bf00      	nop
 8007ffe:	bf00      	nop
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	bc80      	pop	{r7}
 8008006:	4770      	bx	lr
 8008008:	20000014 	.word	0x20000014
 800800c:	10624dd3 	.word	0x10624dd3

08008010 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e041      	b.n	80080a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d106      	bne.n	800803c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7fe fe76 	bl	8006d28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2202      	movs	r2, #2
 8008040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3304      	adds	r3, #4
 800804c:	4619      	mov	r1, r3
 800804e:	4610      	mov	r0, r2
 8008050:	f000 fa6a 	bl	8008528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
	...

080080b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d001      	beq.n	80080c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e044      	b.n	8008152 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2202      	movs	r2, #2
 80080cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68da      	ldr	r2, [r3, #12]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f042 0201 	orr.w	r2, r2, #1
 80080de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a1d      	ldr	r2, [pc, #116]	@ (800815c <HAL_TIM_Base_Start_IT+0xac>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d018      	beq.n	800811c <HAL_TIM_Base_Start_IT+0x6c>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a1c      	ldr	r2, [pc, #112]	@ (8008160 <HAL_TIM_Base_Start_IT+0xb0>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d013      	beq.n	800811c <HAL_TIM_Base_Start_IT+0x6c>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080fc:	d00e      	beq.n	800811c <HAL_TIM_Base_Start_IT+0x6c>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a18      	ldr	r2, [pc, #96]	@ (8008164 <HAL_TIM_Base_Start_IT+0xb4>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d009      	beq.n	800811c <HAL_TIM_Base_Start_IT+0x6c>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a16      	ldr	r2, [pc, #88]	@ (8008168 <HAL_TIM_Base_Start_IT+0xb8>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d004      	beq.n	800811c <HAL_TIM_Base_Start_IT+0x6c>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a15      	ldr	r2, [pc, #84]	@ (800816c <HAL_TIM_Base_Start_IT+0xbc>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d111      	bne.n	8008140 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f003 0307 	and.w	r3, r3, #7
 8008126:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b06      	cmp	r3, #6
 800812c:	d010      	beq.n	8008150 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f042 0201 	orr.w	r2, r2, #1
 800813c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800813e:	e007      	b.n	8008150 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f042 0201 	orr.w	r2, r2, #1
 800814e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	bc80      	pop	{r7}
 800815a:	4770      	bx	lr
 800815c:	40012c00 	.word	0x40012c00
 8008160:	40013400 	.word	0x40013400
 8008164:	40000400 	.word	0x40000400
 8008168:	40000800 	.word	0x40000800
 800816c:	40000c00 	.word	0x40000c00

08008170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	f003 0302 	and.w	r3, r3, #2
 800818e:	2b00      	cmp	r3, #0
 8008190:	d020      	beq.n	80081d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f003 0302 	and.w	r3, r3, #2
 8008198:	2b00      	cmp	r3, #0
 800819a:	d01b      	beq.n	80081d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f06f 0202 	mvn.w	r2, #2
 80081a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2201      	movs	r2, #1
 80081aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	f003 0303 	and.w	r3, r3, #3
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f998 	bl	80084f0 <HAL_TIM_IC_CaptureCallback>
 80081c0:	e005      	b.n	80081ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f98b 	bl	80084de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 f99a 	bl	8008502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f003 0304 	and.w	r3, r3, #4
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d020      	beq.n	8008220 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f003 0304 	and.w	r3, r3, #4
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d01b      	beq.n	8008220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f06f 0204 	mvn.w	r2, #4
 80081f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2202      	movs	r2, #2
 80081f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008202:	2b00      	cmp	r3, #0
 8008204:	d003      	beq.n	800820e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f972 	bl	80084f0 <HAL_TIM_IC_CaptureCallback>
 800820c:	e005      	b.n	800821a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f965 	bl	80084de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 f974 	bl	8008502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f003 0308 	and.w	r3, r3, #8
 8008226:	2b00      	cmp	r3, #0
 8008228:	d020      	beq.n	800826c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f003 0308 	and.w	r3, r3, #8
 8008230:	2b00      	cmp	r3, #0
 8008232:	d01b      	beq.n	800826c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f06f 0208 	mvn.w	r2, #8
 800823c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2204      	movs	r2, #4
 8008242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	f003 0303 	and.w	r3, r3, #3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f94c 	bl	80084f0 <HAL_TIM_IC_CaptureCallback>
 8008258:	e005      	b.n	8008266 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f93f 	bl	80084de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f94e 	bl	8008502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	f003 0310 	and.w	r3, r3, #16
 8008272:	2b00      	cmp	r3, #0
 8008274:	d020      	beq.n	80082b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f003 0310 	and.w	r3, r3, #16
 800827c:	2b00      	cmp	r3, #0
 800827e:	d01b      	beq.n	80082b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f06f 0210 	mvn.w	r2, #16
 8008288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2208      	movs	r2, #8
 800828e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	69db      	ldr	r3, [r3, #28]
 8008296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f926 	bl	80084f0 <HAL_TIM_IC_CaptureCallback>
 80082a4:	e005      	b.n	80082b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f919 	bl	80084de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f928 	bl	8008502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00c      	beq.n	80082dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f003 0301 	and.w	r3, r3, #1
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d007      	beq.n	80082dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f06f 0201 	mvn.w	r2, #1
 80082d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7fe fc04 	bl	8006ae4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00c      	beq.n	8008300 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d007      	beq.n	8008300 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80082f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 faa5 	bl	800884a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00c      	beq.n	8008324 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008310:	2b00      	cmp	r3, #0
 8008312:	d007      	beq.n	8008324 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800831c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f8f8 	bl	8008514 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	f003 0320 	and.w	r3, r3, #32
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00c      	beq.n	8008348 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f003 0320 	and.w	r3, r3, #32
 8008334:	2b00      	cmp	r3, #0
 8008336:	d007      	beq.n	8008348 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f06f 0220 	mvn.w	r2, #32
 8008340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fa78 	bl	8008838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008348:	bf00      	nop
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008364:	2b01      	cmp	r3, #1
 8008366:	d101      	bne.n	800836c <HAL_TIM_ConfigClockSource+0x1c>
 8008368:	2302      	movs	r3, #2
 800836a:	e0b4      	b.n	80084d6 <HAL_TIM_ConfigClockSource+0x186>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2202      	movs	r2, #2
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800838a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008392:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083a4:	d03e      	beq.n	8008424 <HAL_TIM_ConfigClockSource+0xd4>
 80083a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083aa:	f200 8087 	bhi.w	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083b2:	f000 8086 	beq.w	80084c2 <HAL_TIM_ConfigClockSource+0x172>
 80083b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083ba:	d87f      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083bc:	2b70      	cmp	r3, #112	@ 0x70
 80083be:	d01a      	beq.n	80083f6 <HAL_TIM_ConfigClockSource+0xa6>
 80083c0:	2b70      	cmp	r3, #112	@ 0x70
 80083c2:	d87b      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083c4:	2b60      	cmp	r3, #96	@ 0x60
 80083c6:	d050      	beq.n	800846a <HAL_TIM_ConfigClockSource+0x11a>
 80083c8:	2b60      	cmp	r3, #96	@ 0x60
 80083ca:	d877      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083cc:	2b50      	cmp	r3, #80	@ 0x50
 80083ce:	d03c      	beq.n	800844a <HAL_TIM_ConfigClockSource+0xfa>
 80083d0:	2b50      	cmp	r3, #80	@ 0x50
 80083d2:	d873      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083d4:	2b40      	cmp	r3, #64	@ 0x40
 80083d6:	d058      	beq.n	800848a <HAL_TIM_ConfigClockSource+0x13a>
 80083d8:	2b40      	cmp	r3, #64	@ 0x40
 80083da:	d86f      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083dc:	2b30      	cmp	r3, #48	@ 0x30
 80083de:	d064      	beq.n	80084aa <HAL_TIM_ConfigClockSource+0x15a>
 80083e0:	2b30      	cmp	r3, #48	@ 0x30
 80083e2:	d86b      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083e4:	2b20      	cmp	r3, #32
 80083e6:	d060      	beq.n	80084aa <HAL_TIM_ConfigClockSource+0x15a>
 80083e8:	2b20      	cmp	r3, #32
 80083ea:	d867      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d05c      	beq.n	80084aa <HAL_TIM_ConfigClockSource+0x15a>
 80083f0:	2b10      	cmp	r3, #16
 80083f2:	d05a      	beq.n	80084aa <HAL_TIM_ConfigClockSource+0x15a>
 80083f4:	e062      	b.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008406:	f000 f98c 	bl	8008722 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008418:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	609a      	str	r2, [r3, #8]
      break;
 8008422:	e04f      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008434:	f000 f975 	bl	8008722 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	689a      	ldr	r2, [r3, #8]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008446:	609a      	str	r2, [r3, #8]
      break;
 8008448:	e03c      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008456:	461a      	mov	r2, r3
 8008458:	f000 f8ec 	bl	8008634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2150      	movs	r1, #80	@ 0x50
 8008462:	4618      	mov	r0, r3
 8008464:	f000 f943 	bl	80086ee <TIM_ITRx_SetConfig>
      break;
 8008468:	e02c      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008476:	461a      	mov	r2, r3
 8008478:	f000 f90a 	bl	8008690 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2160      	movs	r1, #96	@ 0x60
 8008482:	4618      	mov	r0, r3
 8008484:	f000 f933 	bl	80086ee <TIM_ITRx_SetConfig>
      break;
 8008488:	e01c      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008496:	461a      	mov	r2, r3
 8008498:	f000 f8cc 	bl	8008634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2140      	movs	r1, #64	@ 0x40
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 f923 	bl	80086ee <TIM_ITRx_SetConfig>
      break;
 80084a8:	e00c      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4619      	mov	r1, r3
 80084b4:	4610      	mov	r0, r2
 80084b6:	f000 f91a 	bl	80086ee <TIM_ITRx_SetConfig>
      break;
 80084ba:	e003      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	73fb      	strb	r3, [r7, #15]
      break;
 80084c0:	e000      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80084c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084de:	b480      	push	{r7}
 80084e0:	b083      	sub	sp, #12
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084e6:	bf00      	nop
 80084e8:	370c      	adds	r7, #12
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bc80      	pop	{r7}
 80084ee:	4770      	bx	lr

080084f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084f8:	bf00      	nop
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bc80      	pop	{r7}
 8008500:	4770      	bx	lr

08008502 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008502:	b480      	push	{r7}
 8008504:	b083      	sub	sp, #12
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800850a:	bf00      	nop
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	bc80      	pop	{r7}
 8008512:	4770      	bx	lr

08008514 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	bc80      	pop	{r7}
 8008524:	4770      	bx	lr
	...

08008528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a39      	ldr	r2, [pc, #228]	@ (8008620 <TIM_Base_SetConfig+0xf8>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d013      	beq.n	8008568 <TIM_Base_SetConfig+0x40>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a38      	ldr	r2, [pc, #224]	@ (8008624 <TIM_Base_SetConfig+0xfc>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d00f      	beq.n	8008568 <TIM_Base_SetConfig+0x40>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800854e:	d00b      	beq.n	8008568 <TIM_Base_SetConfig+0x40>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a35      	ldr	r2, [pc, #212]	@ (8008628 <TIM_Base_SetConfig+0x100>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d007      	beq.n	8008568 <TIM_Base_SetConfig+0x40>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a34      	ldr	r2, [pc, #208]	@ (800862c <TIM_Base_SetConfig+0x104>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d003      	beq.n	8008568 <TIM_Base_SetConfig+0x40>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a33      	ldr	r2, [pc, #204]	@ (8008630 <TIM_Base_SetConfig+0x108>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d108      	bne.n	800857a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800856e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	4313      	orrs	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a28      	ldr	r2, [pc, #160]	@ (8008620 <TIM_Base_SetConfig+0xf8>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d013      	beq.n	80085aa <TIM_Base_SetConfig+0x82>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a27      	ldr	r2, [pc, #156]	@ (8008624 <TIM_Base_SetConfig+0xfc>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d00f      	beq.n	80085aa <TIM_Base_SetConfig+0x82>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008590:	d00b      	beq.n	80085aa <TIM_Base_SetConfig+0x82>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a24      	ldr	r2, [pc, #144]	@ (8008628 <TIM_Base_SetConfig+0x100>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d007      	beq.n	80085aa <TIM_Base_SetConfig+0x82>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a23      	ldr	r2, [pc, #140]	@ (800862c <TIM_Base_SetConfig+0x104>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d003      	beq.n	80085aa <TIM_Base_SetConfig+0x82>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a22      	ldr	r2, [pc, #136]	@ (8008630 <TIM_Base_SetConfig+0x108>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d108      	bne.n	80085bc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	689a      	ldr	r2, [r3, #8]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a0f      	ldr	r2, [pc, #60]	@ (8008620 <TIM_Base_SetConfig+0xf8>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d003      	beq.n	80085f0 <TIM_Base_SetConfig+0xc8>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a0e      	ldr	r2, [pc, #56]	@ (8008624 <TIM_Base_SetConfig+0xfc>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d103      	bne.n	80085f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	691a      	ldr	r2, [r3, #16]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	2b00      	cmp	r3, #0
 8008608:	d005      	beq.n	8008616 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	f023 0201 	bic.w	r2, r3, #1
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	611a      	str	r2, [r3, #16]
  }
}
 8008616:	bf00      	nop
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	bc80      	pop	{r7}
 800861e:	4770      	bx	lr
 8008620:	40012c00 	.word	0x40012c00
 8008624:	40013400 	.word	0x40013400
 8008628:	40000400 	.word	0x40000400
 800862c:	40000800 	.word	0x40000800
 8008630:	40000c00 	.word	0x40000c00

08008634 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008634:	b480      	push	{r7}
 8008636:	b087      	sub	sp, #28
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6a1b      	ldr	r3, [r3, #32]
 8008644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	f023 0201 	bic.w	r2, r3, #1
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800865e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	011b      	lsls	r3, r3, #4
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	4313      	orrs	r3, r2
 8008668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	f023 030a 	bic.w	r3, r3, #10
 8008670:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	4313      	orrs	r3, r2
 8008678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	697a      	ldr	r2, [r7, #20]
 8008684:	621a      	str	r2, [r3, #32]
}
 8008686:	bf00      	nop
 8008688:	371c      	adds	r7, #28
 800868a:	46bd      	mov	sp, r7
 800868c:	bc80      	pop	{r7}
 800868e:	4770      	bx	lr

08008690 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008690:	b480      	push	{r7}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6a1b      	ldr	r3, [r3, #32]
 80086a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	f023 0210 	bic.w	r2, r3, #16
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80086ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	031b      	lsls	r3, r3, #12
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80086cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	011b      	lsls	r3, r3, #4
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	621a      	str	r2, [r3, #32]
}
 80086e4:	bf00      	nop
 80086e6:	371c      	adds	r7, #28
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bc80      	pop	{r7}
 80086ec:	4770      	bx	lr

080086ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b085      	sub	sp, #20
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008704:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	4313      	orrs	r3, r2
 800870c:	f043 0307 	orr.w	r3, r3, #7
 8008710:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	609a      	str	r2, [r3, #8]
}
 8008718:	bf00      	nop
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	bc80      	pop	{r7}
 8008720:	4770      	bx	lr

08008722 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008722:	b480      	push	{r7}
 8008724:	b087      	sub	sp, #28
 8008726:	af00      	add	r7, sp, #0
 8008728:	60f8      	str	r0, [r7, #12]
 800872a:	60b9      	str	r1, [r7, #8]
 800872c:	607a      	str	r2, [r7, #4]
 800872e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800873c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	021a      	lsls	r2, r3, #8
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	431a      	orrs	r2, r3
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	4313      	orrs	r3, r2
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	4313      	orrs	r3, r2
 800874e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	609a      	str	r2, [r3, #8]
}
 8008756:	bf00      	nop
 8008758:	371c      	adds	r7, #28
 800875a:	46bd      	mov	sp, r7
 800875c:	bc80      	pop	{r7}
 800875e:	4770      	bx	lr

08008760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008770:	2b01      	cmp	r3, #1
 8008772:	d101      	bne.n	8008778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008774:	2302      	movs	r3, #2
 8008776:	e050      	b.n	800881a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2202      	movs	r2, #2
 8008784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800879e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a1b      	ldr	r2, [pc, #108]	@ (8008824 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d018      	beq.n	80087ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a19      	ldr	r2, [pc, #100]	@ (8008828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d013      	beq.n	80087ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087ce:	d00e      	beq.n	80087ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a15      	ldr	r2, [pc, #84]	@ (800882c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d009      	beq.n	80087ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a14      	ldr	r2, [pc, #80]	@ (8008830 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d004      	beq.n	80087ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a12      	ldr	r2, [pc, #72]	@ (8008834 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d10c      	bne.n	8008808 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3714      	adds	r7, #20
 800881e:	46bd      	mov	sp, r7
 8008820:	bc80      	pop	{r7}
 8008822:	4770      	bx	lr
 8008824:	40012c00 	.word	0x40012c00
 8008828:	40013400 	.word	0x40013400
 800882c:	40000400 	.word	0x40000400
 8008830:	40000800 	.word	0x40000800
 8008834:	40000c00 	.word	0x40000c00

08008838 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	bc80      	pop	{r7}
 8008848:	4770      	bx	lr

0800884a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800884a:	b480      	push	{r7}
 800884c:	b083      	sub	sp, #12
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008852:	bf00      	nop
 8008854:	370c      	adds	r7, #12
 8008856:	46bd      	mov	sp, r7
 8008858:	bc80      	pop	{r7}
 800885a:	4770      	bx	lr

0800885c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d101      	bne.n	800886e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e042      	b.n	80088f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008874:	b2db      	uxtb	r3, r3
 8008876:	2b00      	cmp	r3, #0
 8008878:	d106      	bne.n	8008888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7fe faa0 	bl	8006dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2224      	movs	r2, #36	@ 0x24
 800888c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800889e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fd09 	bl	80092b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	691a      	ldr	r2, [r3, #16]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80088b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	695a      	ldr	r2, [r3, #20]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80088c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68da      	ldr	r2, [r3, #12]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80088d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2220      	movs	r2, #32
 80088e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2220      	movs	r2, #32
 80088e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	4613      	mov	r3, r2
 8008908:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b20      	cmp	r3, #32
 8008914:	d121      	bne.n	800895a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d002      	beq.n	8008922 <HAL_UART_Transmit_IT+0x26>
 800891c:	88fb      	ldrh	r3, [r7, #6]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d101      	bne.n	8008926 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e01a      	b.n	800895c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	88fa      	ldrh	r2, [r7, #6]
 8008930:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	88fa      	ldrh	r2, [r7, #6]
 8008936:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2221      	movs	r2, #33	@ 0x21
 8008942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68da      	ldr	r2, [r3, #12]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008954:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	e000      	b.n	800895c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800895a:	2302      	movs	r3, #2
  }
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	bc80      	pop	{r7}
 8008964:	4770      	bx	lr

08008966 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	4613      	mov	r3, r2
 8008972:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b20      	cmp	r3, #32
 800897e:	d112      	bne.n	80089a6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <HAL_UART_Receive_IT+0x26>
 8008986:	88fb      	ldrh	r3, [r7, #6]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d101      	bne.n	8008990 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	e00b      	b.n	80089a8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2200      	movs	r2, #0
 8008994:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008996:	88fb      	ldrh	r3, [r7, #6]
 8008998:	461a      	mov	r2, r3
 800899a:	68b9      	ldr	r1, [r7, #8]
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f000 fab6 	bl	8008f0e <UART_Start_Receive_IT>
 80089a2:	4603      	mov	r3, r0
 80089a4:	e000      	b.n	80089a8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80089a6:	2302      	movs	r3, #2
  }
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b0ba      	sub	sp, #232	@ 0xe8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80089d6:	2300      	movs	r3, #0
 80089d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80089dc:	2300      	movs	r3, #0
 80089de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80089e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089e6:	f003 030f 	and.w	r3, r3, #15
 80089ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80089ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d10f      	bne.n	8008a16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80089f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089fa:	f003 0320 	and.w	r3, r3, #32
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d009      	beq.n	8008a16 <HAL_UART_IRQHandler+0x66>
 8008a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a06:	f003 0320 	and.w	r3, r3, #32
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d003      	beq.n	8008a16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fb93 	bl	800913a <UART_Receive_IT>
      return;
 8008a14:	e25b      	b.n	8008ece <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008a16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f000 80de 	beq.w	8008bdc <HAL_UART_IRQHandler+0x22c>
 8008a20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a24:	f003 0301 	and.w	r3, r3, #1
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d106      	bne.n	8008a3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 80d1 	beq.w	8008bdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00b      	beq.n	8008a5e <HAL_UART_IRQHandler+0xae>
 8008a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d005      	beq.n	8008a5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a56:	f043 0201 	orr.w	r2, r3, #1
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a62:	f003 0304 	and.w	r3, r3, #4
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00b      	beq.n	8008a82 <HAL_UART_IRQHandler+0xd2>
 8008a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d005      	beq.n	8008a82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a7a:	f043 0202 	orr.w	r2, r3, #2
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a86:	f003 0302 	and.w	r3, r3, #2
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00b      	beq.n	8008aa6 <HAL_UART_IRQHandler+0xf6>
 8008a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a92:	f003 0301 	and.w	r3, r3, #1
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d005      	beq.n	8008aa6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a9e:	f043 0204 	orr.w	r2, r3, #4
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aaa:	f003 0308 	and.w	r3, r3, #8
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d011      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x126>
 8008ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ab6:	f003 0320 	and.w	r3, r3, #32
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d105      	bne.n	8008aca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ac2:	f003 0301 	and.w	r3, r3, #1
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d005      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ace:	f043 0208 	orr.w	r2, r3, #8
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f000 81f2 	beq.w	8008ec4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ae4:	f003 0320 	and.w	r3, r3, #32
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d008      	beq.n	8008afe <HAL_UART_IRQHandler+0x14e>
 8008aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008af0:	f003 0320 	and.w	r3, r3, #32
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d002      	beq.n	8008afe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fb1e 	bl	800913a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	bf14      	ite	ne
 8008b0c:	2301      	movne	r3, #1
 8008b0e:	2300      	moveq	r3, #0
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b1a:	f003 0308 	and.w	r3, r3, #8
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d103      	bne.n	8008b2a <HAL_UART_IRQHandler+0x17a>
 8008b22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d04f      	beq.n	8008bca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fa28 	bl	8008f80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d041      	beq.n	8008bc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3314      	adds	r3, #20
 8008b44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008b4c:	e853 3f00 	ldrex	r3, [r3]
 8008b50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008b54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	3314      	adds	r3, #20
 8008b66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008b6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008b76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008b7a:	e841 2300 	strex	r3, r2, [r1]
 8008b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008b82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1d9      	bne.n	8008b3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d013      	beq.n	8008bba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b96:	4a7e      	ldr	r2, [pc, #504]	@ (8008d90 <HAL_UART_IRQHandler+0x3e0>)
 8008b98:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fe fb5a 	bl	8007258 <HAL_DMA_Abort_IT>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d016      	beq.n	8008bd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bb8:	e00e      	b.n	8008bd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f993 	bl	8008ee6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bc0:	e00a      	b.n	8008bd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f98f 	bl	8008ee6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bc8:	e006      	b.n	8008bd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f98b 	bl	8008ee6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008bd6:	e175      	b.n	8008ec4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bd8:	bf00      	nop
    return;
 8008bda:	e173      	b.n	8008ec4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	f040 814f 	bne.w	8008e84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bea:	f003 0310 	and.w	r3, r3, #16
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f000 8148 	beq.w	8008e84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bf8:	f003 0310 	and.w	r3, r3, #16
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f000 8141 	beq.w	8008e84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c02:	2300      	movs	r3, #0
 8008c04:	60bb      	str	r3, [r7, #8]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	60bb      	str	r3, [r7, #8]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	60bb      	str	r3, [r7, #8]
 8008c16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f000 80b6 	beq.w	8008d94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	f000 8145 	beq.w	8008ec8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c46:	429a      	cmp	r2, r3
 8008c48:	f080 813e 	bcs.w	8008ec8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c52:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	2b20      	cmp	r3, #32
 8008c5c:	f000 8088 	beq.w	8008d70 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	330c      	adds	r3, #12
 8008c66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008c6e:	e853 3f00 	ldrex	r3, [r3]
 8008c72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008c76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008c7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	330c      	adds	r3, #12
 8008c88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008c8c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008c90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c94:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008c98:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008c9c:	e841 2300 	strex	r3, r2, [r1]
 8008ca0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008ca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1d9      	bne.n	8008c60 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	3314      	adds	r3, #20
 8008cb2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008cb6:	e853 3f00 	ldrex	r3, [r3]
 8008cba:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008cbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008cbe:	f023 0301 	bic.w	r3, r3, #1
 8008cc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3314      	adds	r3, #20
 8008ccc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008cd0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008cd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008cd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008cdc:	e841 2300 	strex	r3, r2, [r1]
 8008ce0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ce2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d1e1      	bne.n	8008cac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	3314      	adds	r3, #20
 8008cee:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008cf2:	e853 3f00 	ldrex	r3, [r3]
 8008cf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008cf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008cfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3314      	adds	r3, #20
 8008d08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008d0c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008d0e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d10:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008d12:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008d14:	e841 2300 	strex	r3, r2, [r1]
 8008d18:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008d1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1e3      	bne.n	8008ce8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2220      	movs	r2, #32
 8008d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	330c      	adds	r3, #12
 8008d34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d38:	e853 3f00 	ldrex	r3, [r3]
 8008d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008d3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d40:	f023 0310 	bic.w	r3, r3, #16
 8008d44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	330c      	adds	r3, #12
 8008d4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008d52:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008d54:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008d58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d5a:	e841 2300 	strex	r3, r2, [r1]
 8008d5e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008d60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1e3      	bne.n	8008d2e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fe fa39 	bl	80071e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2202      	movs	r2, #2
 8008d74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	4619      	mov	r1, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f8b6 	bl	8008ef8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008d8c:	e09c      	b.n	8008ec8 <HAL_UART_IRQHandler+0x518>
 8008d8e:	bf00      	nop
 8008d90:	08009045 	.word	0x08009045
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f000 808e 	beq.w	8008ecc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008db0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 8089 	beq.w	8008ecc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	330c      	adds	r3, #12
 8008dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc4:	e853 3f00 	ldrex	r3, [r3]
 8008dc8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008dd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	330c      	adds	r3, #12
 8008dda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008dde:	647a      	str	r2, [r7, #68]	@ 0x44
 8008de0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008de4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008de6:	e841 2300 	strex	r3, r2, [r1]
 8008dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1e3      	bne.n	8008dba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3314      	adds	r3, #20
 8008df8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfc:	e853 3f00 	ldrex	r3, [r3]
 8008e00:	623b      	str	r3, [r7, #32]
   return(result);
 8008e02:	6a3b      	ldr	r3, [r7, #32]
 8008e04:	f023 0301 	bic.w	r3, r3, #1
 8008e08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	3314      	adds	r3, #20
 8008e12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008e16:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e1e:	e841 2300 	strex	r3, r2, [r1]
 8008e22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1e3      	bne.n	8008df2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2220      	movs	r2, #32
 8008e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	330c      	adds	r3, #12
 8008e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	e853 3f00 	ldrex	r3, [r3]
 8008e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f023 0310 	bic.w	r3, r3, #16
 8008e4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	330c      	adds	r3, #12
 8008e58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008e5c:	61fa      	str	r2, [r7, #28]
 8008e5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e60:	69b9      	ldr	r1, [r7, #24]
 8008e62:	69fa      	ldr	r2, [r7, #28]
 8008e64:	e841 2300 	strex	r3, r2, [r1]
 8008e68:	617b      	str	r3, [r7, #20]
   return(result);
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1e3      	bne.n	8008e38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2202      	movs	r2, #2
 8008e74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f83b 	bl	8008ef8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e82:	e023      	b.n	8008ecc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d009      	beq.n	8008ea4 <HAL_UART_IRQHandler+0x4f4>
 8008e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d003      	beq.n	8008ea4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f8e5 	bl	800906c <UART_Transmit_IT>
    return;
 8008ea2:	e014      	b.n	8008ece <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00e      	beq.n	8008ece <HAL_UART_IRQHandler+0x51e>
 8008eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d008      	beq.n	8008ece <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f924 	bl	800910a <UART_EndTransmit_IT>
    return;
 8008ec2:	e004      	b.n	8008ece <HAL_UART_IRQHandler+0x51e>
    return;
 8008ec4:	bf00      	nop
 8008ec6:	e002      	b.n	8008ece <HAL_UART_IRQHandler+0x51e>
      return;
 8008ec8:	bf00      	nop
 8008eca:	e000      	b.n	8008ece <HAL_UART_IRQHandler+0x51e>
      return;
 8008ecc:	bf00      	nop
  }
}
 8008ece:	37e8      	adds	r7, #232	@ 0xe8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bc80      	pop	{r7}
 8008ee4:	4770      	bx	lr

08008ee6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b083      	sub	sp, #12
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008eee:	bf00      	nop
 8008ef0:	370c      	adds	r7, #12
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bc80      	pop	{r7}
 8008ef6:	4770      	bx	lr

08008ef8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	460b      	mov	r3, r1
 8008f02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bc80      	pop	{r7}
 8008f0c:	4770      	bx	lr

08008f0e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f0e:	b480      	push	{r7}
 8008f10:	b085      	sub	sp, #20
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	60f8      	str	r0, [r7, #12]
 8008f16:	60b9      	str	r1, [r7, #8]
 8008f18:	4613      	mov	r3, r2
 8008f1a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	88fa      	ldrh	r2, [r7, #6]
 8008f26:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	88fa      	ldrh	r2, [r7, #6]
 8008f2c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2222      	movs	r2, #34	@ 0x22
 8008f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d007      	beq.n	8008f54 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68da      	ldr	r2, [r3, #12]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f52:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	695a      	ldr	r2, [r3, #20]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f042 0201 	orr.w	r2, r2, #1
 8008f62:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68da      	ldr	r2, [r3, #12]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f042 0220 	orr.w	r2, r2, #32
 8008f72:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bc80      	pop	{r7}
 8008f7e:	4770      	bx	lr

08008f80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b095      	sub	sp, #84	@ 0x54
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	330c      	adds	r3, #12
 8008f8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f92:	e853 3f00 	ldrex	r3, [r3]
 8008f96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	330c      	adds	r3, #12
 8008fa6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008fa8:	643a      	str	r2, [r7, #64]	@ 0x40
 8008faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008fae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008fb0:	e841 2300 	strex	r3, r2, [r1]
 8008fb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1e5      	bne.n	8008f88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3314      	adds	r3, #20
 8008fc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc4:	6a3b      	ldr	r3, [r7, #32]
 8008fc6:	e853 3f00 	ldrex	r3, [r3]
 8008fca:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	f023 0301 	bic.w	r3, r3, #1
 8008fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3314      	adds	r3, #20
 8008fda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008fde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fe4:	e841 2300 	strex	r3, r2, [r1]
 8008fe8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d1e5      	bne.n	8008fbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d119      	bne.n	800902c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	330c      	adds	r3, #12
 8008ffe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	60bb      	str	r3, [r7, #8]
   return(result);
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	f023 0310 	bic.w	r3, r3, #16
 800900e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	330c      	adds	r3, #12
 8009016:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009018:	61ba      	str	r2, [r7, #24]
 800901a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901c:	6979      	ldr	r1, [r7, #20]
 800901e:	69ba      	ldr	r2, [r7, #24]
 8009020:	e841 2300 	strex	r3, r2, [r1]
 8009024:	613b      	str	r3, [r7, #16]
   return(result);
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e5      	bne.n	8008ff8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2220      	movs	r2, #32
 8009030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800903a:	bf00      	nop
 800903c:	3754      	adds	r7, #84	@ 0x54
 800903e:	46bd      	mov	sp, r7
 8009040:	bc80      	pop	{r7}
 8009042:	4770      	bx	lr

08009044 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009050:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f7ff ff41 	bl	8008ee6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009064:	bf00      	nop
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b21      	cmp	r3, #33	@ 0x21
 800907e:	d13e      	bne.n	80090fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009088:	d114      	bne.n	80090b4 <UART_Transmit_IT+0x48>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d110      	bne.n	80090b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a1b      	ldr	r3, [r3, #32]
 8009096:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	881b      	ldrh	r3, [r3, #0]
 800909c:	461a      	mov	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a1b      	ldr	r3, [r3, #32]
 80090ac:	1c9a      	adds	r2, r3, #2
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	621a      	str	r2, [r3, #32]
 80090b2:	e008      	b.n	80090c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a1b      	ldr	r3, [r3, #32]
 80090b8:	1c59      	adds	r1, r3, #1
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	6211      	str	r1, [r2, #32]
 80090be:	781a      	ldrb	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	3b01      	subs	r3, #1
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	4619      	mov	r1, r3
 80090d4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10f      	bne.n	80090fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68da      	ldr	r2, [r3, #12]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80090e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68da      	ldr	r2, [r3, #12]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	e000      	b.n	8009100 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80090fe:	2302      	movs	r3, #2
  }
}
 8009100:	4618      	mov	r0, r3
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	bc80      	pop	{r7}
 8009108:	4770      	bx	lr

0800910a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b082      	sub	sp, #8
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68da      	ldr	r2, [r3, #12]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009120:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2220      	movs	r2, #32
 8009126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f7ff fed2 	bl	8008ed4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b08c      	sub	sp, #48	@ 0x30
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b22      	cmp	r3, #34	@ 0x22
 800914c:	f040 80ae 	bne.w	80092ac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009158:	d117      	bne.n	800918a <UART_Receive_IT+0x50>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d113      	bne.n	800918a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009162:	2300      	movs	r3, #0
 8009164:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800916a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	b29b      	uxth	r3, r3
 8009174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009178:	b29a      	uxth	r2, r3
 800917a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009182:	1c9a      	adds	r2, r3, #2
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	629a      	str	r2, [r3, #40]	@ 0x28
 8009188:	e026      	b.n	80091d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800918e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009190:	2300      	movs	r3, #0
 8009192:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800919c:	d007      	beq.n	80091ae <UART_Receive_IT+0x74>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d10a      	bne.n	80091bc <UART_Receive_IT+0x82>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d106      	bne.n	80091bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	b2da      	uxtb	r2, r3
 80091b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091b8:	701a      	strb	r2, [r3, #0]
 80091ba:	e008      	b.n	80091ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091d2:	1c5a      	adds	r2, r3, #1
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091dc:	b29b      	uxth	r3, r3
 80091de:	3b01      	subs	r3, #1
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	4619      	mov	r1, r3
 80091e6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d15d      	bne.n	80092a8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68da      	ldr	r2, [r3, #12]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f022 0220 	bic.w	r2, r2, #32
 80091fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68da      	ldr	r2, [r3, #12]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800920a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	695a      	ldr	r2, [r3, #20]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f022 0201 	bic.w	r2, r2, #1
 800921a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2220      	movs	r2, #32
 8009220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800922e:	2b01      	cmp	r3, #1
 8009230:	d135      	bne.n	800929e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	330c      	adds	r3, #12
 800923e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	e853 3f00 	ldrex	r3, [r3]
 8009246:	613b      	str	r3, [r7, #16]
   return(result);
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	f023 0310 	bic.w	r3, r3, #16
 800924e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	330c      	adds	r3, #12
 8009256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009258:	623a      	str	r2, [r7, #32]
 800925a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925c:	69f9      	ldr	r1, [r7, #28]
 800925e:	6a3a      	ldr	r2, [r7, #32]
 8009260:	e841 2300 	strex	r3, r2, [r1]
 8009264:	61bb      	str	r3, [r7, #24]
   return(result);
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1e5      	bne.n	8009238 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 0310 	and.w	r3, r3, #16
 8009276:	2b10      	cmp	r3, #16
 8009278:	d10a      	bne.n	8009290 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800927a:	2300      	movs	r3, #0
 800927c:	60fb      	str	r3, [r7, #12]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	60fb      	str	r3, [r7, #12]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	60fb      	str	r3, [r7, #12]
 800928e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009294:	4619      	mov	r1, r3
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f7ff fe2e 	bl	8008ef8 <HAL_UARTEx_RxEventCallback>
 800929c:	e002      	b.n	80092a4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7fd fc5a 	bl	8006b58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	e002      	b.n	80092ae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80092a8:	2300      	movs	r3, #0
 80092aa:	e000      	b.n	80092ae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80092ac:	2302      	movs	r3, #2
  }
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3730      	adds	r7, #48	@ 0x30
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
	...

080092b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	68da      	ldr	r2, [r3, #12]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	689a      	ldr	r2, [r3, #8]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	431a      	orrs	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	695b      	ldr	r3, [r3, #20]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80092f2:	f023 030c 	bic.w	r3, r3, #12
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	6812      	ldr	r2, [r2, #0]
 80092fa:	68b9      	ldr	r1, [r7, #8]
 80092fc:	430b      	orrs	r3, r1
 80092fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	695b      	ldr	r3, [r3, #20]
 8009306:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	699a      	ldr	r2, [r3, #24]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a2c      	ldr	r2, [pc, #176]	@ (80093cc <UART_SetConfig+0x114>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d103      	bne.n	8009328 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009320:	f7fe fe44 	bl	8007fac <HAL_RCC_GetPCLK2Freq>
 8009324:	60f8      	str	r0, [r7, #12]
 8009326:	e002      	b.n	800932e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009328:	f7fe fe2c 	bl	8007f84 <HAL_RCC_GetPCLK1Freq>
 800932c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	4613      	mov	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4413      	add	r3, r2
 8009336:	009a      	lsls	r2, r3, #2
 8009338:	441a      	add	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	fbb2 f3f3 	udiv	r3, r2, r3
 8009344:	4a22      	ldr	r2, [pc, #136]	@ (80093d0 <UART_SetConfig+0x118>)
 8009346:	fba2 2303 	umull	r2, r3, r2, r3
 800934a:	095b      	lsrs	r3, r3, #5
 800934c:	0119      	lsls	r1, r3, #4
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	4613      	mov	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4413      	add	r3, r2
 8009356:	009a      	lsls	r2, r3, #2
 8009358:	441a      	add	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	fbb2 f2f3 	udiv	r2, r2, r3
 8009364:	4b1a      	ldr	r3, [pc, #104]	@ (80093d0 <UART_SetConfig+0x118>)
 8009366:	fba3 0302 	umull	r0, r3, r3, r2
 800936a:	095b      	lsrs	r3, r3, #5
 800936c:	2064      	movs	r0, #100	@ 0x64
 800936e:	fb00 f303 	mul.w	r3, r0, r3
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	011b      	lsls	r3, r3, #4
 8009376:	3332      	adds	r3, #50	@ 0x32
 8009378:	4a15      	ldr	r2, [pc, #84]	@ (80093d0 <UART_SetConfig+0x118>)
 800937a:	fba2 2303 	umull	r2, r3, r2, r3
 800937e:	095b      	lsrs	r3, r3, #5
 8009380:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009384:	4419      	add	r1, r3
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	4613      	mov	r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	4413      	add	r3, r2
 800938e:	009a      	lsls	r2, r3, #2
 8009390:	441a      	add	r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	fbb2 f2f3 	udiv	r2, r2, r3
 800939c:	4b0c      	ldr	r3, [pc, #48]	@ (80093d0 <UART_SetConfig+0x118>)
 800939e:	fba3 0302 	umull	r0, r3, r3, r2
 80093a2:	095b      	lsrs	r3, r3, #5
 80093a4:	2064      	movs	r0, #100	@ 0x64
 80093a6:	fb00 f303 	mul.w	r3, r0, r3
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	011b      	lsls	r3, r3, #4
 80093ae:	3332      	adds	r3, #50	@ 0x32
 80093b0:	4a07      	ldr	r2, [pc, #28]	@ (80093d0 <UART_SetConfig+0x118>)
 80093b2:	fba2 2303 	umull	r2, r3, r2, r3
 80093b6:	095b      	lsrs	r3, r3, #5
 80093b8:	f003 020f 	and.w	r2, r3, #15
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	440a      	add	r2, r1
 80093c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80093c4:	bf00      	nop
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	40013800 	.word	0x40013800
 80093d0:	51eb851f 	.word	0x51eb851f

080093d4 <siprintf>:
 80093d4:	b40e      	push	{r1, r2, r3}
 80093d6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80093da:	b500      	push	{lr}
 80093dc:	b09c      	sub	sp, #112	@ 0x70
 80093de:	ab1d      	add	r3, sp, #116	@ 0x74
 80093e0:	9002      	str	r0, [sp, #8]
 80093e2:	9006      	str	r0, [sp, #24]
 80093e4:	9107      	str	r1, [sp, #28]
 80093e6:	9104      	str	r1, [sp, #16]
 80093e8:	4808      	ldr	r0, [pc, #32]	@ (800940c <siprintf+0x38>)
 80093ea:	4909      	ldr	r1, [pc, #36]	@ (8009410 <siprintf+0x3c>)
 80093ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80093f0:	9105      	str	r1, [sp, #20]
 80093f2:	6800      	ldr	r0, [r0, #0]
 80093f4:	a902      	add	r1, sp, #8
 80093f6:	9301      	str	r3, [sp, #4]
 80093f8:	f000 f992 	bl	8009720 <_svfiprintf_r>
 80093fc:	2200      	movs	r2, #0
 80093fe:	9b02      	ldr	r3, [sp, #8]
 8009400:	701a      	strb	r2, [r3, #0]
 8009402:	b01c      	add	sp, #112	@ 0x70
 8009404:	f85d eb04 	ldr.w	lr, [sp], #4
 8009408:	b003      	add	sp, #12
 800940a:	4770      	bx	lr
 800940c:	20000020 	.word	0x20000020
 8009410:	ffff0208 	.word	0xffff0208

08009414 <memset>:
 8009414:	4603      	mov	r3, r0
 8009416:	4402      	add	r2, r0
 8009418:	4293      	cmp	r3, r2
 800941a:	d100      	bne.n	800941e <memset+0xa>
 800941c:	4770      	bx	lr
 800941e:	f803 1b01 	strb.w	r1, [r3], #1
 8009422:	e7f9      	b.n	8009418 <memset+0x4>

08009424 <__errno>:
 8009424:	4b01      	ldr	r3, [pc, #4]	@ (800942c <__errno+0x8>)
 8009426:	6818      	ldr	r0, [r3, #0]
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	20000020 	.word	0x20000020

08009430 <__libc_init_array>:
 8009430:	b570      	push	{r4, r5, r6, lr}
 8009432:	2600      	movs	r6, #0
 8009434:	4d0c      	ldr	r5, [pc, #48]	@ (8009468 <__libc_init_array+0x38>)
 8009436:	4c0d      	ldr	r4, [pc, #52]	@ (800946c <__libc_init_array+0x3c>)
 8009438:	1b64      	subs	r4, r4, r5
 800943a:	10a4      	asrs	r4, r4, #2
 800943c:	42a6      	cmp	r6, r4
 800943e:	d109      	bne.n	8009454 <__libc_init_array+0x24>
 8009440:	f000 fc78 	bl	8009d34 <_init>
 8009444:	2600      	movs	r6, #0
 8009446:	4d0a      	ldr	r5, [pc, #40]	@ (8009470 <__libc_init_array+0x40>)
 8009448:	4c0a      	ldr	r4, [pc, #40]	@ (8009474 <__libc_init_array+0x44>)
 800944a:	1b64      	subs	r4, r4, r5
 800944c:	10a4      	asrs	r4, r4, #2
 800944e:	42a6      	cmp	r6, r4
 8009450:	d105      	bne.n	800945e <__libc_init_array+0x2e>
 8009452:	bd70      	pop	{r4, r5, r6, pc}
 8009454:	f855 3b04 	ldr.w	r3, [r5], #4
 8009458:	4798      	blx	r3
 800945a:	3601      	adds	r6, #1
 800945c:	e7ee      	b.n	800943c <__libc_init_array+0xc>
 800945e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009462:	4798      	blx	r3
 8009464:	3601      	adds	r6, #1
 8009466:	e7f2      	b.n	800944e <__libc_init_array+0x1e>
 8009468:	0800b608 	.word	0x0800b608
 800946c:	0800b608 	.word	0x0800b608
 8009470:	0800b608 	.word	0x0800b608
 8009474:	0800b60c 	.word	0x0800b60c

08009478 <__retarget_lock_acquire_recursive>:
 8009478:	4770      	bx	lr

0800947a <__retarget_lock_release_recursive>:
 800947a:	4770      	bx	lr

0800947c <_free_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	4605      	mov	r5, r0
 8009480:	2900      	cmp	r1, #0
 8009482:	d040      	beq.n	8009506 <_free_r+0x8a>
 8009484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009488:	1f0c      	subs	r4, r1, #4
 800948a:	2b00      	cmp	r3, #0
 800948c:	bfb8      	it	lt
 800948e:	18e4      	addlt	r4, r4, r3
 8009490:	f000 f8de 	bl	8009650 <__malloc_lock>
 8009494:	4a1c      	ldr	r2, [pc, #112]	@ (8009508 <_free_r+0x8c>)
 8009496:	6813      	ldr	r3, [r2, #0]
 8009498:	b933      	cbnz	r3, 80094a8 <_free_r+0x2c>
 800949a:	6063      	str	r3, [r4, #4]
 800949c:	6014      	str	r4, [r2, #0]
 800949e:	4628      	mov	r0, r5
 80094a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094a4:	f000 b8da 	b.w	800965c <__malloc_unlock>
 80094a8:	42a3      	cmp	r3, r4
 80094aa:	d908      	bls.n	80094be <_free_r+0x42>
 80094ac:	6820      	ldr	r0, [r4, #0]
 80094ae:	1821      	adds	r1, r4, r0
 80094b0:	428b      	cmp	r3, r1
 80094b2:	bf01      	itttt	eq
 80094b4:	6819      	ldreq	r1, [r3, #0]
 80094b6:	685b      	ldreq	r3, [r3, #4]
 80094b8:	1809      	addeq	r1, r1, r0
 80094ba:	6021      	streq	r1, [r4, #0]
 80094bc:	e7ed      	b.n	800949a <_free_r+0x1e>
 80094be:	461a      	mov	r2, r3
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	b10b      	cbz	r3, 80094c8 <_free_r+0x4c>
 80094c4:	42a3      	cmp	r3, r4
 80094c6:	d9fa      	bls.n	80094be <_free_r+0x42>
 80094c8:	6811      	ldr	r1, [r2, #0]
 80094ca:	1850      	adds	r0, r2, r1
 80094cc:	42a0      	cmp	r0, r4
 80094ce:	d10b      	bne.n	80094e8 <_free_r+0x6c>
 80094d0:	6820      	ldr	r0, [r4, #0]
 80094d2:	4401      	add	r1, r0
 80094d4:	1850      	adds	r0, r2, r1
 80094d6:	4283      	cmp	r3, r0
 80094d8:	6011      	str	r1, [r2, #0]
 80094da:	d1e0      	bne.n	800949e <_free_r+0x22>
 80094dc:	6818      	ldr	r0, [r3, #0]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	4408      	add	r0, r1
 80094e2:	6010      	str	r0, [r2, #0]
 80094e4:	6053      	str	r3, [r2, #4]
 80094e6:	e7da      	b.n	800949e <_free_r+0x22>
 80094e8:	d902      	bls.n	80094f0 <_free_r+0x74>
 80094ea:	230c      	movs	r3, #12
 80094ec:	602b      	str	r3, [r5, #0]
 80094ee:	e7d6      	b.n	800949e <_free_r+0x22>
 80094f0:	6820      	ldr	r0, [r4, #0]
 80094f2:	1821      	adds	r1, r4, r0
 80094f4:	428b      	cmp	r3, r1
 80094f6:	bf01      	itttt	eq
 80094f8:	6819      	ldreq	r1, [r3, #0]
 80094fa:	685b      	ldreq	r3, [r3, #4]
 80094fc:	1809      	addeq	r1, r1, r0
 80094fe:	6021      	streq	r1, [r4, #0]
 8009500:	6063      	str	r3, [r4, #4]
 8009502:	6054      	str	r4, [r2, #4]
 8009504:	e7cb      	b.n	800949e <_free_r+0x22>
 8009506:	bd38      	pop	{r3, r4, r5, pc}
 8009508:	2000424c 	.word	0x2000424c

0800950c <sbrk_aligned>:
 800950c:	b570      	push	{r4, r5, r6, lr}
 800950e:	4e0f      	ldr	r6, [pc, #60]	@ (800954c <sbrk_aligned+0x40>)
 8009510:	460c      	mov	r4, r1
 8009512:	6831      	ldr	r1, [r6, #0]
 8009514:	4605      	mov	r5, r0
 8009516:	b911      	cbnz	r1, 800951e <sbrk_aligned+0x12>
 8009518:	f000 fbaa 	bl	8009c70 <_sbrk_r>
 800951c:	6030      	str	r0, [r6, #0]
 800951e:	4621      	mov	r1, r4
 8009520:	4628      	mov	r0, r5
 8009522:	f000 fba5 	bl	8009c70 <_sbrk_r>
 8009526:	1c43      	adds	r3, r0, #1
 8009528:	d103      	bne.n	8009532 <sbrk_aligned+0x26>
 800952a:	f04f 34ff 	mov.w	r4, #4294967295
 800952e:	4620      	mov	r0, r4
 8009530:	bd70      	pop	{r4, r5, r6, pc}
 8009532:	1cc4      	adds	r4, r0, #3
 8009534:	f024 0403 	bic.w	r4, r4, #3
 8009538:	42a0      	cmp	r0, r4
 800953a:	d0f8      	beq.n	800952e <sbrk_aligned+0x22>
 800953c:	1a21      	subs	r1, r4, r0
 800953e:	4628      	mov	r0, r5
 8009540:	f000 fb96 	bl	8009c70 <_sbrk_r>
 8009544:	3001      	adds	r0, #1
 8009546:	d1f2      	bne.n	800952e <sbrk_aligned+0x22>
 8009548:	e7ef      	b.n	800952a <sbrk_aligned+0x1e>
 800954a:	bf00      	nop
 800954c:	20004248 	.word	0x20004248

08009550 <_malloc_r>:
 8009550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009554:	1ccd      	adds	r5, r1, #3
 8009556:	f025 0503 	bic.w	r5, r5, #3
 800955a:	3508      	adds	r5, #8
 800955c:	2d0c      	cmp	r5, #12
 800955e:	bf38      	it	cc
 8009560:	250c      	movcc	r5, #12
 8009562:	2d00      	cmp	r5, #0
 8009564:	4606      	mov	r6, r0
 8009566:	db01      	blt.n	800956c <_malloc_r+0x1c>
 8009568:	42a9      	cmp	r1, r5
 800956a:	d904      	bls.n	8009576 <_malloc_r+0x26>
 800956c:	230c      	movs	r3, #12
 800956e:	6033      	str	r3, [r6, #0]
 8009570:	2000      	movs	r0, #0
 8009572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800964c <_malloc_r+0xfc>
 800957a:	f000 f869 	bl	8009650 <__malloc_lock>
 800957e:	f8d8 3000 	ldr.w	r3, [r8]
 8009582:	461c      	mov	r4, r3
 8009584:	bb44      	cbnz	r4, 80095d8 <_malloc_r+0x88>
 8009586:	4629      	mov	r1, r5
 8009588:	4630      	mov	r0, r6
 800958a:	f7ff ffbf 	bl	800950c <sbrk_aligned>
 800958e:	1c43      	adds	r3, r0, #1
 8009590:	4604      	mov	r4, r0
 8009592:	d158      	bne.n	8009646 <_malloc_r+0xf6>
 8009594:	f8d8 4000 	ldr.w	r4, [r8]
 8009598:	4627      	mov	r7, r4
 800959a:	2f00      	cmp	r7, #0
 800959c:	d143      	bne.n	8009626 <_malloc_r+0xd6>
 800959e:	2c00      	cmp	r4, #0
 80095a0:	d04b      	beq.n	800963a <_malloc_r+0xea>
 80095a2:	6823      	ldr	r3, [r4, #0]
 80095a4:	4639      	mov	r1, r7
 80095a6:	4630      	mov	r0, r6
 80095a8:	eb04 0903 	add.w	r9, r4, r3
 80095ac:	f000 fb60 	bl	8009c70 <_sbrk_r>
 80095b0:	4581      	cmp	r9, r0
 80095b2:	d142      	bne.n	800963a <_malloc_r+0xea>
 80095b4:	6821      	ldr	r1, [r4, #0]
 80095b6:	4630      	mov	r0, r6
 80095b8:	1a6d      	subs	r5, r5, r1
 80095ba:	4629      	mov	r1, r5
 80095bc:	f7ff ffa6 	bl	800950c <sbrk_aligned>
 80095c0:	3001      	adds	r0, #1
 80095c2:	d03a      	beq.n	800963a <_malloc_r+0xea>
 80095c4:	6823      	ldr	r3, [r4, #0]
 80095c6:	442b      	add	r3, r5
 80095c8:	6023      	str	r3, [r4, #0]
 80095ca:	f8d8 3000 	ldr.w	r3, [r8]
 80095ce:	685a      	ldr	r2, [r3, #4]
 80095d0:	bb62      	cbnz	r2, 800962c <_malloc_r+0xdc>
 80095d2:	f8c8 7000 	str.w	r7, [r8]
 80095d6:	e00f      	b.n	80095f8 <_malloc_r+0xa8>
 80095d8:	6822      	ldr	r2, [r4, #0]
 80095da:	1b52      	subs	r2, r2, r5
 80095dc:	d420      	bmi.n	8009620 <_malloc_r+0xd0>
 80095de:	2a0b      	cmp	r2, #11
 80095e0:	d917      	bls.n	8009612 <_malloc_r+0xc2>
 80095e2:	1961      	adds	r1, r4, r5
 80095e4:	42a3      	cmp	r3, r4
 80095e6:	6025      	str	r5, [r4, #0]
 80095e8:	bf18      	it	ne
 80095ea:	6059      	strne	r1, [r3, #4]
 80095ec:	6863      	ldr	r3, [r4, #4]
 80095ee:	bf08      	it	eq
 80095f0:	f8c8 1000 	streq.w	r1, [r8]
 80095f4:	5162      	str	r2, [r4, r5]
 80095f6:	604b      	str	r3, [r1, #4]
 80095f8:	4630      	mov	r0, r6
 80095fa:	f000 f82f 	bl	800965c <__malloc_unlock>
 80095fe:	f104 000b 	add.w	r0, r4, #11
 8009602:	1d23      	adds	r3, r4, #4
 8009604:	f020 0007 	bic.w	r0, r0, #7
 8009608:	1ac2      	subs	r2, r0, r3
 800960a:	bf1c      	itt	ne
 800960c:	1a1b      	subne	r3, r3, r0
 800960e:	50a3      	strne	r3, [r4, r2]
 8009610:	e7af      	b.n	8009572 <_malloc_r+0x22>
 8009612:	6862      	ldr	r2, [r4, #4]
 8009614:	42a3      	cmp	r3, r4
 8009616:	bf0c      	ite	eq
 8009618:	f8c8 2000 	streq.w	r2, [r8]
 800961c:	605a      	strne	r2, [r3, #4]
 800961e:	e7eb      	b.n	80095f8 <_malloc_r+0xa8>
 8009620:	4623      	mov	r3, r4
 8009622:	6864      	ldr	r4, [r4, #4]
 8009624:	e7ae      	b.n	8009584 <_malloc_r+0x34>
 8009626:	463c      	mov	r4, r7
 8009628:	687f      	ldr	r7, [r7, #4]
 800962a:	e7b6      	b.n	800959a <_malloc_r+0x4a>
 800962c:	461a      	mov	r2, r3
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	42a3      	cmp	r3, r4
 8009632:	d1fb      	bne.n	800962c <_malloc_r+0xdc>
 8009634:	2300      	movs	r3, #0
 8009636:	6053      	str	r3, [r2, #4]
 8009638:	e7de      	b.n	80095f8 <_malloc_r+0xa8>
 800963a:	230c      	movs	r3, #12
 800963c:	4630      	mov	r0, r6
 800963e:	6033      	str	r3, [r6, #0]
 8009640:	f000 f80c 	bl	800965c <__malloc_unlock>
 8009644:	e794      	b.n	8009570 <_malloc_r+0x20>
 8009646:	6005      	str	r5, [r0, #0]
 8009648:	e7d6      	b.n	80095f8 <_malloc_r+0xa8>
 800964a:	bf00      	nop
 800964c:	2000424c 	.word	0x2000424c

08009650 <__malloc_lock>:
 8009650:	4801      	ldr	r0, [pc, #4]	@ (8009658 <__malloc_lock+0x8>)
 8009652:	f7ff bf11 	b.w	8009478 <__retarget_lock_acquire_recursive>
 8009656:	bf00      	nop
 8009658:	20004244 	.word	0x20004244

0800965c <__malloc_unlock>:
 800965c:	4801      	ldr	r0, [pc, #4]	@ (8009664 <__malloc_unlock+0x8>)
 800965e:	f7ff bf0c 	b.w	800947a <__retarget_lock_release_recursive>
 8009662:	bf00      	nop
 8009664:	20004244 	.word	0x20004244

08009668 <__ssputs_r>:
 8009668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800966c:	461f      	mov	r7, r3
 800966e:	688e      	ldr	r6, [r1, #8]
 8009670:	4682      	mov	sl, r0
 8009672:	42be      	cmp	r6, r7
 8009674:	460c      	mov	r4, r1
 8009676:	4690      	mov	r8, r2
 8009678:	680b      	ldr	r3, [r1, #0]
 800967a:	d82d      	bhi.n	80096d8 <__ssputs_r+0x70>
 800967c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009680:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009684:	d026      	beq.n	80096d4 <__ssputs_r+0x6c>
 8009686:	6965      	ldr	r5, [r4, #20]
 8009688:	6909      	ldr	r1, [r1, #16]
 800968a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800968e:	eba3 0901 	sub.w	r9, r3, r1
 8009692:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009696:	1c7b      	adds	r3, r7, #1
 8009698:	444b      	add	r3, r9
 800969a:	106d      	asrs	r5, r5, #1
 800969c:	429d      	cmp	r5, r3
 800969e:	bf38      	it	cc
 80096a0:	461d      	movcc	r5, r3
 80096a2:	0553      	lsls	r3, r2, #21
 80096a4:	d527      	bpl.n	80096f6 <__ssputs_r+0x8e>
 80096a6:	4629      	mov	r1, r5
 80096a8:	f7ff ff52 	bl	8009550 <_malloc_r>
 80096ac:	4606      	mov	r6, r0
 80096ae:	b360      	cbz	r0, 800970a <__ssputs_r+0xa2>
 80096b0:	464a      	mov	r2, r9
 80096b2:	6921      	ldr	r1, [r4, #16]
 80096b4:	f000 fafa 	bl	8009cac <memcpy>
 80096b8:	89a3      	ldrh	r3, [r4, #12]
 80096ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80096be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096c2:	81a3      	strh	r3, [r4, #12]
 80096c4:	6126      	str	r6, [r4, #16]
 80096c6:	444e      	add	r6, r9
 80096c8:	6026      	str	r6, [r4, #0]
 80096ca:	463e      	mov	r6, r7
 80096cc:	6165      	str	r5, [r4, #20]
 80096ce:	eba5 0509 	sub.w	r5, r5, r9
 80096d2:	60a5      	str	r5, [r4, #8]
 80096d4:	42be      	cmp	r6, r7
 80096d6:	d900      	bls.n	80096da <__ssputs_r+0x72>
 80096d8:	463e      	mov	r6, r7
 80096da:	4632      	mov	r2, r6
 80096dc:	4641      	mov	r1, r8
 80096de:	6820      	ldr	r0, [r4, #0]
 80096e0:	f000 faac 	bl	8009c3c <memmove>
 80096e4:	2000      	movs	r0, #0
 80096e6:	68a3      	ldr	r3, [r4, #8]
 80096e8:	1b9b      	subs	r3, r3, r6
 80096ea:	60a3      	str	r3, [r4, #8]
 80096ec:	6823      	ldr	r3, [r4, #0]
 80096ee:	4433      	add	r3, r6
 80096f0:	6023      	str	r3, [r4, #0]
 80096f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096f6:	462a      	mov	r2, r5
 80096f8:	f000 fae6 	bl	8009cc8 <_realloc_r>
 80096fc:	4606      	mov	r6, r0
 80096fe:	2800      	cmp	r0, #0
 8009700:	d1e0      	bne.n	80096c4 <__ssputs_r+0x5c>
 8009702:	4650      	mov	r0, sl
 8009704:	6921      	ldr	r1, [r4, #16]
 8009706:	f7ff feb9 	bl	800947c <_free_r>
 800970a:	230c      	movs	r3, #12
 800970c:	f8ca 3000 	str.w	r3, [sl]
 8009710:	89a3      	ldrh	r3, [r4, #12]
 8009712:	f04f 30ff 	mov.w	r0, #4294967295
 8009716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800971a:	81a3      	strh	r3, [r4, #12]
 800971c:	e7e9      	b.n	80096f2 <__ssputs_r+0x8a>
	...

08009720 <_svfiprintf_r>:
 8009720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009724:	4698      	mov	r8, r3
 8009726:	898b      	ldrh	r3, [r1, #12]
 8009728:	4607      	mov	r7, r0
 800972a:	061b      	lsls	r3, r3, #24
 800972c:	460d      	mov	r5, r1
 800972e:	4614      	mov	r4, r2
 8009730:	b09d      	sub	sp, #116	@ 0x74
 8009732:	d510      	bpl.n	8009756 <_svfiprintf_r+0x36>
 8009734:	690b      	ldr	r3, [r1, #16]
 8009736:	b973      	cbnz	r3, 8009756 <_svfiprintf_r+0x36>
 8009738:	2140      	movs	r1, #64	@ 0x40
 800973a:	f7ff ff09 	bl	8009550 <_malloc_r>
 800973e:	6028      	str	r0, [r5, #0]
 8009740:	6128      	str	r0, [r5, #16]
 8009742:	b930      	cbnz	r0, 8009752 <_svfiprintf_r+0x32>
 8009744:	230c      	movs	r3, #12
 8009746:	603b      	str	r3, [r7, #0]
 8009748:	f04f 30ff 	mov.w	r0, #4294967295
 800974c:	b01d      	add	sp, #116	@ 0x74
 800974e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009752:	2340      	movs	r3, #64	@ 0x40
 8009754:	616b      	str	r3, [r5, #20]
 8009756:	2300      	movs	r3, #0
 8009758:	9309      	str	r3, [sp, #36]	@ 0x24
 800975a:	2320      	movs	r3, #32
 800975c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009760:	2330      	movs	r3, #48	@ 0x30
 8009762:	f04f 0901 	mov.w	r9, #1
 8009766:	f8cd 800c 	str.w	r8, [sp, #12]
 800976a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009904 <_svfiprintf_r+0x1e4>
 800976e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009772:	4623      	mov	r3, r4
 8009774:	469a      	mov	sl, r3
 8009776:	f813 2b01 	ldrb.w	r2, [r3], #1
 800977a:	b10a      	cbz	r2, 8009780 <_svfiprintf_r+0x60>
 800977c:	2a25      	cmp	r2, #37	@ 0x25
 800977e:	d1f9      	bne.n	8009774 <_svfiprintf_r+0x54>
 8009780:	ebba 0b04 	subs.w	fp, sl, r4
 8009784:	d00b      	beq.n	800979e <_svfiprintf_r+0x7e>
 8009786:	465b      	mov	r3, fp
 8009788:	4622      	mov	r2, r4
 800978a:	4629      	mov	r1, r5
 800978c:	4638      	mov	r0, r7
 800978e:	f7ff ff6b 	bl	8009668 <__ssputs_r>
 8009792:	3001      	adds	r0, #1
 8009794:	f000 80a7 	beq.w	80098e6 <_svfiprintf_r+0x1c6>
 8009798:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800979a:	445a      	add	r2, fp
 800979c:	9209      	str	r2, [sp, #36]	@ 0x24
 800979e:	f89a 3000 	ldrb.w	r3, [sl]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f000 809f 	beq.w	80098e6 <_svfiprintf_r+0x1c6>
 80097a8:	2300      	movs	r3, #0
 80097aa:	f04f 32ff 	mov.w	r2, #4294967295
 80097ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097b2:	f10a 0a01 	add.w	sl, sl, #1
 80097b6:	9304      	str	r3, [sp, #16]
 80097b8:	9307      	str	r3, [sp, #28]
 80097ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80097be:	931a      	str	r3, [sp, #104]	@ 0x68
 80097c0:	4654      	mov	r4, sl
 80097c2:	2205      	movs	r2, #5
 80097c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c8:	484e      	ldr	r0, [pc, #312]	@ (8009904 <_svfiprintf_r+0x1e4>)
 80097ca:	f000 fa61 	bl	8009c90 <memchr>
 80097ce:	9a04      	ldr	r2, [sp, #16]
 80097d0:	b9d8      	cbnz	r0, 800980a <_svfiprintf_r+0xea>
 80097d2:	06d0      	lsls	r0, r2, #27
 80097d4:	bf44      	itt	mi
 80097d6:	2320      	movmi	r3, #32
 80097d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097dc:	0711      	lsls	r1, r2, #28
 80097de:	bf44      	itt	mi
 80097e0:	232b      	movmi	r3, #43	@ 0x2b
 80097e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097e6:	f89a 3000 	ldrb.w	r3, [sl]
 80097ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80097ec:	d015      	beq.n	800981a <_svfiprintf_r+0xfa>
 80097ee:	4654      	mov	r4, sl
 80097f0:	2000      	movs	r0, #0
 80097f2:	f04f 0c0a 	mov.w	ip, #10
 80097f6:	9a07      	ldr	r2, [sp, #28]
 80097f8:	4621      	mov	r1, r4
 80097fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097fe:	3b30      	subs	r3, #48	@ 0x30
 8009800:	2b09      	cmp	r3, #9
 8009802:	d94b      	bls.n	800989c <_svfiprintf_r+0x17c>
 8009804:	b1b0      	cbz	r0, 8009834 <_svfiprintf_r+0x114>
 8009806:	9207      	str	r2, [sp, #28]
 8009808:	e014      	b.n	8009834 <_svfiprintf_r+0x114>
 800980a:	eba0 0308 	sub.w	r3, r0, r8
 800980e:	fa09 f303 	lsl.w	r3, r9, r3
 8009812:	4313      	orrs	r3, r2
 8009814:	46a2      	mov	sl, r4
 8009816:	9304      	str	r3, [sp, #16]
 8009818:	e7d2      	b.n	80097c0 <_svfiprintf_r+0xa0>
 800981a:	9b03      	ldr	r3, [sp, #12]
 800981c:	1d19      	adds	r1, r3, #4
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	9103      	str	r1, [sp, #12]
 8009822:	2b00      	cmp	r3, #0
 8009824:	bfbb      	ittet	lt
 8009826:	425b      	neglt	r3, r3
 8009828:	f042 0202 	orrlt.w	r2, r2, #2
 800982c:	9307      	strge	r3, [sp, #28]
 800982e:	9307      	strlt	r3, [sp, #28]
 8009830:	bfb8      	it	lt
 8009832:	9204      	strlt	r2, [sp, #16]
 8009834:	7823      	ldrb	r3, [r4, #0]
 8009836:	2b2e      	cmp	r3, #46	@ 0x2e
 8009838:	d10a      	bne.n	8009850 <_svfiprintf_r+0x130>
 800983a:	7863      	ldrb	r3, [r4, #1]
 800983c:	2b2a      	cmp	r3, #42	@ 0x2a
 800983e:	d132      	bne.n	80098a6 <_svfiprintf_r+0x186>
 8009840:	9b03      	ldr	r3, [sp, #12]
 8009842:	3402      	adds	r4, #2
 8009844:	1d1a      	adds	r2, r3, #4
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	9203      	str	r2, [sp, #12]
 800984a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800984e:	9305      	str	r3, [sp, #20]
 8009850:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009908 <_svfiprintf_r+0x1e8>
 8009854:	2203      	movs	r2, #3
 8009856:	4650      	mov	r0, sl
 8009858:	7821      	ldrb	r1, [r4, #0]
 800985a:	f000 fa19 	bl	8009c90 <memchr>
 800985e:	b138      	cbz	r0, 8009870 <_svfiprintf_r+0x150>
 8009860:	2240      	movs	r2, #64	@ 0x40
 8009862:	9b04      	ldr	r3, [sp, #16]
 8009864:	eba0 000a 	sub.w	r0, r0, sl
 8009868:	4082      	lsls	r2, r0
 800986a:	4313      	orrs	r3, r2
 800986c:	3401      	adds	r4, #1
 800986e:	9304      	str	r3, [sp, #16]
 8009870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009874:	2206      	movs	r2, #6
 8009876:	4825      	ldr	r0, [pc, #148]	@ (800990c <_svfiprintf_r+0x1ec>)
 8009878:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800987c:	f000 fa08 	bl	8009c90 <memchr>
 8009880:	2800      	cmp	r0, #0
 8009882:	d036      	beq.n	80098f2 <_svfiprintf_r+0x1d2>
 8009884:	4b22      	ldr	r3, [pc, #136]	@ (8009910 <_svfiprintf_r+0x1f0>)
 8009886:	bb1b      	cbnz	r3, 80098d0 <_svfiprintf_r+0x1b0>
 8009888:	9b03      	ldr	r3, [sp, #12]
 800988a:	3307      	adds	r3, #7
 800988c:	f023 0307 	bic.w	r3, r3, #7
 8009890:	3308      	adds	r3, #8
 8009892:	9303      	str	r3, [sp, #12]
 8009894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009896:	4433      	add	r3, r6
 8009898:	9309      	str	r3, [sp, #36]	@ 0x24
 800989a:	e76a      	b.n	8009772 <_svfiprintf_r+0x52>
 800989c:	460c      	mov	r4, r1
 800989e:	2001      	movs	r0, #1
 80098a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80098a4:	e7a8      	b.n	80097f8 <_svfiprintf_r+0xd8>
 80098a6:	2300      	movs	r3, #0
 80098a8:	f04f 0c0a 	mov.w	ip, #10
 80098ac:	4619      	mov	r1, r3
 80098ae:	3401      	adds	r4, #1
 80098b0:	9305      	str	r3, [sp, #20]
 80098b2:	4620      	mov	r0, r4
 80098b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098b8:	3a30      	subs	r2, #48	@ 0x30
 80098ba:	2a09      	cmp	r2, #9
 80098bc:	d903      	bls.n	80098c6 <_svfiprintf_r+0x1a6>
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d0c6      	beq.n	8009850 <_svfiprintf_r+0x130>
 80098c2:	9105      	str	r1, [sp, #20]
 80098c4:	e7c4      	b.n	8009850 <_svfiprintf_r+0x130>
 80098c6:	4604      	mov	r4, r0
 80098c8:	2301      	movs	r3, #1
 80098ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80098ce:	e7f0      	b.n	80098b2 <_svfiprintf_r+0x192>
 80098d0:	ab03      	add	r3, sp, #12
 80098d2:	9300      	str	r3, [sp, #0]
 80098d4:	462a      	mov	r2, r5
 80098d6:	4638      	mov	r0, r7
 80098d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009914 <_svfiprintf_r+0x1f4>)
 80098da:	a904      	add	r1, sp, #16
 80098dc:	f3af 8000 	nop.w
 80098e0:	1c42      	adds	r2, r0, #1
 80098e2:	4606      	mov	r6, r0
 80098e4:	d1d6      	bne.n	8009894 <_svfiprintf_r+0x174>
 80098e6:	89ab      	ldrh	r3, [r5, #12]
 80098e8:	065b      	lsls	r3, r3, #25
 80098ea:	f53f af2d 	bmi.w	8009748 <_svfiprintf_r+0x28>
 80098ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098f0:	e72c      	b.n	800974c <_svfiprintf_r+0x2c>
 80098f2:	ab03      	add	r3, sp, #12
 80098f4:	9300      	str	r3, [sp, #0]
 80098f6:	462a      	mov	r2, r5
 80098f8:	4638      	mov	r0, r7
 80098fa:	4b06      	ldr	r3, [pc, #24]	@ (8009914 <_svfiprintf_r+0x1f4>)
 80098fc:	a904      	add	r1, sp, #16
 80098fe:	f000 f87d 	bl	80099fc <_printf_i>
 8009902:	e7ed      	b.n	80098e0 <_svfiprintf_r+0x1c0>
 8009904:	0800b5d2 	.word	0x0800b5d2
 8009908:	0800b5d8 	.word	0x0800b5d8
 800990c:	0800b5dc 	.word	0x0800b5dc
 8009910:	00000000 	.word	0x00000000
 8009914:	08009669 	.word	0x08009669

08009918 <_printf_common>:
 8009918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800991c:	4616      	mov	r6, r2
 800991e:	4698      	mov	r8, r3
 8009920:	688a      	ldr	r2, [r1, #8]
 8009922:	690b      	ldr	r3, [r1, #16]
 8009924:	4607      	mov	r7, r0
 8009926:	4293      	cmp	r3, r2
 8009928:	bfb8      	it	lt
 800992a:	4613      	movlt	r3, r2
 800992c:	6033      	str	r3, [r6, #0]
 800992e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009932:	460c      	mov	r4, r1
 8009934:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009938:	b10a      	cbz	r2, 800993e <_printf_common+0x26>
 800993a:	3301      	adds	r3, #1
 800993c:	6033      	str	r3, [r6, #0]
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	0699      	lsls	r1, r3, #26
 8009942:	bf42      	ittt	mi
 8009944:	6833      	ldrmi	r3, [r6, #0]
 8009946:	3302      	addmi	r3, #2
 8009948:	6033      	strmi	r3, [r6, #0]
 800994a:	6825      	ldr	r5, [r4, #0]
 800994c:	f015 0506 	ands.w	r5, r5, #6
 8009950:	d106      	bne.n	8009960 <_printf_common+0x48>
 8009952:	f104 0a19 	add.w	sl, r4, #25
 8009956:	68e3      	ldr	r3, [r4, #12]
 8009958:	6832      	ldr	r2, [r6, #0]
 800995a:	1a9b      	subs	r3, r3, r2
 800995c:	42ab      	cmp	r3, r5
 800995e:	dc2b      	bgt.n	80099b8 <_printf_common+0xa0>
 8009960:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009964:	6822      	ldr	r2, [r4, #0]
 8009966:	3b00      	subs	r3, #0
 8009968:	bf18      	it	ne
 800996a:	2301      	movne	r3, #1
 800996c:	0692      	lsls	r2, r2, #26
 800996e:	d430      	bmi.n	80099d2 <_printf_common+0xba>
 8009970:	4641      	mov	r1, r8
 8009972:	4638      	mov	r0, r7
 8009974:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009978:	47c8      	blx	r9
 800997a:	3001      	adds	r0, #1
 800997c:	d023      	beq.n	80099c6 <_printf_common+0xae>
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	6922      	ldr	r2, [r4, #16]
 8009982:	f003 0306 	and.w	r3, r3, #6
 8009986:	2b04      	cmp	r3, #4
 8009988:	bf14      	ite	ne
 800998a:	2500      	movne	r5, #0
 800998c:	6833      	ldreq	r3, [r6, #0]
 800998e:	f04f 0600 	mov.w	r6, #0
 8009992:	bf08      	it	eq
 8009994:	68e5      	ldreq	r5, [r4, #12]
 8009996:	f104 041a 	add.w	r4, r4, #26
 800999a:	bf08      	it	eq
 800999c:	1aed      	subeq	r5, r5, r3
 800999e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80099a2:	bf08      	it	eq
 80099a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099a8:	4293      	cmp	r3, r2
 80099aa:	bfc4      	itt	gt
 80099ac:	1a9b      	subgt	r3, r3, r2
 80099ae:	18ed      	addgt	r5, r5, r3
 80099b0:	42b5      	cmp	r5, r6
 80099b2:	d11a      	bne.n	80099ea <_printf_common+0xd2>
 80099b4:	2000      	movs	r0, #0
 80099b6:	e008      	b.n	80099ca <_printf_common+0xb2>
 80099b8:	2301      	movs	r3, #1
 80099ba:	4652      	mov	r2, sl
 80099bc:	4641      	mov	r1, r8
 80099be:	4638      	mov	r0, r7
 80099c0:	47c8      	blx	r9
 80099c2:	3001      	adds	r0, #1
 80099c4:	d103      	bne.n	80099ce <_printf_common+0xb6>
 80099c6:	f04f 30ff 	mov.w	r0, #4294967295
 80099ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ce:	3501      	adds	r5, #1
 80099d0:	e7c1      	b.n	8009956 <_printf_common+0x3e>
 80099d2:	2030      	movs	r0, #48	@ 0x30
 80099d4:	18e1      	adds	r1, r4, r3
 80099d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80099da:	1c5a      	adds	r2, r3, #1
 80099dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80099e0:	4422      	add	r2, r4
 80099e2:	3302      	adds	r3, #2
 80099e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80099e8:	e7c2      	b.n	8009970 <_printf_common+0x58>
 80099ea:	2301      	movs	r3, #1
 80099ec:	4622      	mov	r2, r4
 80099ee:	4641      	mov	r1, r8
 80099f0:	4638      	mov	r0, r7
 80099f2:	47c8      	blx	r9
 80099f4:	3001      	adds	r0, #1
 80099f6:	d0e6      	beq.n	80099c6 <_printf_common+0xae>
 80099f8:	3601      	adds	r6, #1
 80099fa:	e7d9      	b.n	80099b0 <_printf_common+0x98>

080099fc <_printf_i>:
 80099fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a00:	7e0f      	ldrb	r7, [r1, #24]
 8009a02:	4691      	mov	r9, r2
 8009a04:	2f78      	cmp	r7, #120	@ 0x78
 8009a06:	4680      	mov	r8, r0
 8009a08:	460c      	mov	r4, r1
 8009a0a:	469a      	mov	sl, r3
 8009a0c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009a0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009a12:	d807      	bhi.n	8009a24 <_printf_i+0x28>
 8009a14:	2f62      	cmp	r7, #98	@ 0x62
 8009a16:	d80a      	bhi.n	8009a2e <_printf_i+0x32>
 8009a18:	2f00      	cmp	r7, #0
 8009a1a:	f000 80d3 	beq.w	8009bc4 <_printf_i+0x1c8>
 8009a1e:	2f58      	cmp	r7, #88	@ 0x58
 8009a20:	f000 80ba 	beq.w	8009b98 <_printf_i+0x19c>
 8009a24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009a2c:	e03a      	b.n	8009aa4 <_printf_i+0xa8>
 8009a2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009a32:	2b15      	cmp	r3, #21
 8009a34:	d8f6      	bhi.n	8009a24 <_printf_i+0x28>
 8009a36:	a101      	add	r1, pc, #4	@ (adr r1, 8009a3c <_printf_i+0x40>)
 8009a38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a3c:	08009a95 	.word	0x08009a95
 8009a40:	08009aa9 	.word	0x08009aa9
 8009a44:	08009a25 	.word	0x08009a25
 8009a48:	08009a25 	.word	0x08009a25
 8009a4c:	08009a25 	.word	0x08009a25
 8009a50:	08009a25 	.word	0x08009a25
 8009a54:	08009aa9 	.word	0x08009aa9
 8009a58:	08009a25 	.word	0x08009a25
 8009a5c:	08009a25 	.word	0x08009a25
 8009a60:	08009a25 	.word	0x08009a25
 8009a64:	08009a25 	.word	0x08009a25
 8009a68:	08009bab 	.word	0x08009bab
 8009a6c:	08009ad3 	.word	0x08009ad3
 8009a70:	08009b65 	.word	0x08009b65
 8009a74:	08009a25 	.word	0x08009a25
 8009a78:	08009a25 	.word	0x08009a25
 8009a7c:	08009bcd 	.word	0x08009bcd
 8009a80:	08009a25 	.word	0x08009a25
 8009a84:	08009ad3 	.word	0x08009ad3
 8009a88:	08009a25 	.word	0x08009a25
 8009a8c:	08009a25 	.word	0x08009a25
 8009a90:	08009b6d 	.word	0x08009b6d
 8009a94:	6833      	ldr	r3, [r6, #0]
 8009a96:	1d1a      	adds	r2, r3, #4
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	6032      	str	r2, [r6, #0]
 8009a9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009aa0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e09e      	b.n	8009be6 <_printf_i+0x1ea>
 8009aa8:	6833      	ldr	r3, [r6, #0]
 8009aaa:	6820      	ldr	r0, [r4, #0]
 8009aac:	1d19      	adds	r1, r3, #4
 8009aae:	6031      	str	r1, [r6, #0]
 8009ab0:	0606      	lsls	r6, r0, #24
 8009ab2:	d501      	bpl.n	8009ab8 <_printf_i+0xbc>
 8009ab4:	681d      	ldr	r5, [r3, #0]
 8009ab6:	e003      	b.n	8009ac0 <_printf_i+0xc4>
 8009ab8:	0645      	lsls	r5, r0, #25
 8009aba:	d5fb      	bpl.n	8009ab4 <_printf_i+0xb8>
 8009abc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ac0:	2d00      	cmp	r5, #0
 8009ac2:	da03      	bge.n	8009acc <_printf_i+0xd0>
 8009ac4:	232d      	movs	r3, #45	@ 0x2d
 8009ac6:	426d      	negs	r5, r5
 8009ac8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009acc:	230a      	movs	r3, #10
 8009ace:	4859      	ldr	r0, [pc, #356]	@ (8009c34 <_printf_i+0x238>)
 8009ad0:	e011      	b.n	8009af6 <_printf_i+0xfa>
 8009ad2:	6821      	ldr	r1, [r4, #0]
 8009ad4:	6833      	ldr	r3, [r6, #0]
 8009ad6:	0608      	lsls	r0, r1, #24
 8009ad8:	f853 5b04 	ldr.w	r5, [r3], #4
 8009adc:	d402      	bmi.n	8009ae4 <_printf_i+0xe8>
 8009ade:	0649      	lsls	r1, r1, #25
 8009ae0:	bf48      	it	mi
 8009ae2:	b2ad      	uxthmi	r5, r5
 8009ae4:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ae6:	6033      	str	r3, [r6, #0]
 8009ae8:	bf14      	ite	ne
 8009aea:	230a      	movne	r3, #10
 8009aec:	2308      	moveq	r3, #8
 8009aee:	4851      	ldr	r0, [pc, #324]	@ (8009c34 <_printf_i+0x238>)
 8009af0:	2100      	movs	r1, #0
 8009af2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009af6:	6866      	ldr	r6, [r4, #4]
 8009af8:	2e00      	cmp	r6, #0
 8009afa:	bfa8      	it	ge
 8009afc:	6821      	ldrge	r1, [r4, #0]
 8009afe:	60a6      	str	r6, [r4, #8]
 8009b00:	bfa4      	itt	ge
 8009b02:	f021 0104 	bicge.w	r1, r1, #4
 8009b06:	6021      	strge	r1, [r4, #0]
 8009b08:	b90d      	cbnz	r5, 8009b0e <_printf_i+0x112>
 8009b0a:	2e00      	cmp	r6, #0
 8009b0c:	d04b      	beq.n	8009ba6 <_printf_i+0x1aa>
 8009b0e:	4616      	mov	r6, r2
 8009b10:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b14:	fb03 5711 	mls	r7, r3, r1, r5
 8009b18:	5dc7      	ldrb	r7, [r0, r7]
 8009b1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b1e:	462f      	mov	r7, r5
 8009b20:	42bb      	cmp	r3, r7
 8009b22:	460d      	mov	r5, r1
 8009b24:	d9f4      	bls.n	8009b10 <_printf_i+0x114>
 8009b26:	2b08      	cmp	r3, #8
 8009b28:	d10b      	bne.n	8009b42 <_printf_i+0x146>
 8009b2a:	6823      	ldr	r3, [r4, #0]
 8009b2c:	07df      	lsls	r7, r3, #31
 8009b2e:	d508      	bpl.n	8009b42 <_printf_i+0x146>
 8009b30:	6923      	ldr	r3, [r4, #16]
 8009b32:	6861      	ldr	r1, [r4, #4]
 8009b34:	4299      	cmp	r1, r3
 8009b36:	bfde      	ittt	le
 8009b38:	2330      	movle	r3, #48	@ 0x30
 8009b3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b42:	1b92      	subs	r2, r2, r6
 8009b44:	6122      	str	r2, [r4, #16]
 8009b46:	464b      	mov	r3, r9
 8009b48:	4621      	mov	r1, r4
 8009b4a:	4640      	mov	r0, r8
 8009b4c:	f8cd a000 	str.w	sl, [sp]
 8009b50:	aa03      	add	r2, sp, #12
 8009b52:	f7ff fee1 	bl	8009918 <_printf_common>
 8009b56:	3001      	adds	r0, #1
 8009b58:	d14a      	bne.n	8009bf0 <_printf_i+0x1f4>
 8009b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b5e:	b004      	add	sp, #16
 8009b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b64:	6823      	ldr	r3, [r4, #0]
 8009b66:	f043 0320 	orr.w	r3, r3, #32
 8009b6a:	6023      	str	r3, [r4, #0]
 8009b6c:	2778      	movs	r7, #120	@ 0x78
 8009b6e:	4832      	ldr	r0, [pc, #200]	@ (8009c38 <_printf_i+0x23c>)
 8009b70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	6831      	ldr	r1, [r6, #0]
 8009b78:	061f      	lsls	r7, r3, #24
 8009b7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b7e:	d402      	bmi.n	8009b86 <_printf_i+0x18a>
 8009b80:	065f      	lsls	r7, r3, #25
 8009b82:	bf48      	it	mi
 8009b84:	b2ad      	uxthmi	r5, r5
 8009b86:	6031      	str	r1, [r6, #0]
 8009b88:	07d9      	lsls	r1, r3, #31
 8009b8a:	bf44      	itt	mi
 8009b8c:	f043 0320 	orrmi.w	r3, r3, #32
 8009b90:	6023      	strmi	r3, [r4, #0]
 8009b92:	b11d      	cbz	r5, 8009b9c <_printf_i+0x1a0>
 8009b94:	2310      	movs	r3, #16
 8009b96:	e7ab      	b.n	8009af0 <_printf_i+0xf4>
 8009b98:	4826      	ldr	r0, [pc, #152]	@ (8009c34 <_printf_i+0x238>)
 8009b9a:	e7e9      	b.n	8009b70 <_printf_i+0x174>
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	f023 0320 	bic.w	r3, r3, #32
 8009ba2:	6023      	str	r3, [r4, #0]
 8009ba4:	e7f6      	b.n	8009b94 <_printf_i+0x198>
 8009ba6:	4616      	mov	r6, r2
 8009ba8:	e7bd      	b.n	8009b26 <_printf_i+0x12a>
 8009baa:	6833      	ldr	r3, [r6, #0]
 8009bac:	6825      	ldr	r5, [r4, #0]
 8009bae:	1d18      	adds	r0, r3, #4
 8009bb0:	6961      	ldr	r1, [r4, #20]
 8009bb2:	6030      	str	r0, [r6, #0]
 8009bb4:	062e      	lsls	r6, r5, #24
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	d501      	bpl.n	8009bbe <_printf_i+0x1c2>
 8009bba:	6019      	str	r1, [r3, #0]
 8009bbc:	e002      	b.n	8009bc4 <_printf_i+0x1c8>
 8009bbe:	0668      	lsls	r0, r5, #25
 8009bc0:	d5fb      	bpl.n	8009bba <_printf_i+0x1be>
 8009bc2:	8019      	strh	r1, [r3, #0]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	4616      	mov	r6, r2
 8009bc8:	6123      	str	r3, [r4, #16]
 8009bca:	e7bc      	b.n	8009b46 <_printf_i+0x14a>
 8009bcc:	6833      	ldr	r3, [r6, #0]
 8009bce:	2100      	movs	r1, #0
 8009bd0:	1d1a      	adds	r2, r3, #4
 8009bd2:	6032      	str	r2, [r6, #0]
 8009bd4:	681e      	ldr	r6, [r3, #0]
 8009bd6:	6862      	ldr	r2, [r4, #4]
 8009bd8:	4630      	mov	r0, r6
 8009bda:	f000 f859 	bl	8009c90 <memchr>
 8009bde:	b108      	cbz	r0, 8009be4 <_printf_i+0x1e8>
 8009be0:	1b80      	subs	r0, r0, r6
 8009be2:	6060      	str	r0, [r4, #4]
 8009be4:	6863      	ldr	r3, [r4, #4]
 8009be6:	6123      	str	r3, [r4, #16]
 8009be8:	2300      	movs	r3, #0
 8009bea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bee:	e7aa      	b.n	8009b46 <_printf_i+0x14a>
 8009bf0:	4632      	mov	r2, r6
 8009bf2:	4649      	mov	r1, r9
 8009bf4:	4640      	mov	r0, r8
 8009bf6:	6923      	ldr	r3, [r4, #16]
 8009bf8:	47d0      	blx	sl
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	d0ad      	beq.n	8009b5a <_printf_i+0x15e>
 8009bfe:	6823      	ldr	r3, [r4, #0]
 8009c00:	079b      	lsls	r3, r3, #30
 8009c02:	d413      	bmi.n	8009c2c <_printf_i+0x230>
 8009c04:	68e0      	ldr	r0, [r4, #12]
 8009c06:	9b03      	ldr	r3, [sp, #12]
 8009c08:	4298      	cmp	r0, r3
 8009c0a:	bfb8      	it	lt
 8009c0c:	4618      	movlt	r0, r3
 8009c0e:	e7a6      	b.n	8009b5e <_printf_i+0x162>
 8009c10:	2301      	movs	r3, #1
 8009c12:	4632      	mov	r2, r6
 8009c14:	4649      	mov	r1, r9
 8009c16:	4640      	mov	r0, r8
 8009c18:	47d0      	blx	sl
 8009c1a:	3001      	adds	r0, #1
 8009c1c:	d09d      	beq.n	8009b5a <_printf_i+0x15e>
 8009c1e:	3501      	adds	r5, #1
 8009c20:	68e3      	ldr	r3, [r4, #12]
 8009c22:	9903      	ldr	r1, [sp, #12]
 8009c24:	1a5b      	subs	r3, r3, r1
 8009c26:	42ab      	cmp	r3, r5
 8009c28:	dcf2      	bgt.n	8009c10 <_printf_i+0x214>
 8009c2a:	e7eb      	b.n	8009c04 <_printf_i+0x208>
 8009c2c:	2500      	movs	r5, #0
 8009c2e:	f104 0619 	add.w	r6, r4, #25
 8009c32:	e7f5      	b.n	8009c20 <_printf_i+0x224>
 8009c34:	0800b5e3 	.word	0x0800b5e3
 8009c38:	0800b5f4 	.word	0x0800b5f4

08009c3c <memmove>:
 8009c3c:	4288      	cmp	r0, r1
 8009c3e:	b510      	push	{r4, lr}
 8009c40:	eb01 0402 	add.w	r4, r1, r2
 8009c44:	d902      	bls.n	8009c4c <memmove+0x10>
 8009c46:	4284      	cmp	r4, r0
 8009c48:	4623      	mov	r3, r4
 8009c4a:	d807      	bhi.n	8009c5c <memmove+0x20>
 8009c4c:	1e43      	subs	r3, r0, #1
 8009c4e:	42a1      	cmp	r1, r4
 8009c50:	d008      	beq.n	8009c64 <memmove+0x28>
 8009c52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c5a:	e7f8      	b.n	8009c4e <memmove+0x12>
 8009c5c:	4601      	mov	r1, r0
 8009c5e:	4402      	add	r2, r0
 8009c60:	428a      	cmp	r2, r1
 8009c62:	d100      	bne.n	8009c66 <memmove+0x2a>
 8009c64:	bd10      	pop	{r4, pc}
 8009c66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c6e:	e7f7      	b.n	8009c60 <memmove+0x24>

08009c70 <_sbrk_r>:
 8009c70:	b538      	push	{r3, r4, r5, lr}
 8009c72:	2300      	movs	r3, #0
 8009c74:	4d05      	ldr	r5, [pc, #20]	@ (8009c8c <_sbrk_r+0x1c>)
 8009c76:	4604      	mov	r4, r0
 8009c78:	4608      	mov	r0, r1
 8009c7a:	602b      	str	r3, [r5, #0]
 8009c7c:	f7fc ffca 	bl	8006c14 <_sbrk>
 8009c80:	1c43      	adds	r3, r0, #1
 8009c82:	d102      	bne.n	8009c8a <_sbrk_r+0x1a>
 8009c84:	682b      	ldr	r3, [r5, #0]
 8009c86:	b103      	cbz	r3, 8009c8a <_sbrk_r+0x1a>
 8009c88:	6023      	str	r3, [r4, #0]
 8009c8a:	bd38      	pop	{r3, r4, r5, pc}
 8009c8c:	20004240 	.word	0x20004240

08009c90 <memchr>:
 8009c90:	4603      	mov	r3, r0
 8009c92:	b510      	push	{r4, lr}
 8009c94:	b2c9      	uxtb	r1, r1
 8009c96:	4402      	add	r2, r0
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	d101      	bne.n	8009ca2 <memchr+0x12>
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	e003      	b.n	8009caa <memchr+0x1a>
 8009ca2:	7804      	ldrb	r4, [r0, #0]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	428c      	cmp	r4, r1
 8009ca8:	d1f6      	bne.n	8009c98 <memchr+0x8>
 8009caa:	bd10      	pop	{r4, pc}

08009cac <memcpy>:
 8009cac:	440a      	add	r2, r1
 8009cae:	4291      	cmp	r1, r2
 8009cb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cb4:	d100      	bne.n	8009cb8 <memcpy+0xc>
 8009cb6:	4770      	bx	lr
 8009cb8:	b510      	push	{r4, lr}
 8009cba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cbe:	4291      	cmp	r1, r2
 8009cc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cc4:	d1f9      	bne.n	8009cba <memcpy+0xe>
 8009cc6:	bd10      	pop	{r4, pc}

08009cc8 <_realloc_r>:
 8009cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ccc:	4680      	mov	r8, r0
 8009cce:	4615      	mov	r5, r2
 8009cd0:	460c      	mov	r4, r1
 8009cd2:	b921      	cbnz	r1, 8009cde <_realloc_r+0x16>
 8009cd4:	4611      	mov	r1, r2
 8009cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cda:	f7ff bc39 	b.w	8009550 <_malloc_r>
 8009cde:	b92a      	cbnz	r2, 8009cec <_realloc_r+0x24>
 8009ce0:	f7ff fbcc 	bl	800947c <_free_r>
 8009ce4:	2400      	movs	r4, #0
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cec:	f000 f81a 	bl	8009d24 <_malloc_usable_size_r>
 8009cf0:	4285      	cmp	r5, r0
 8009cf2:	4606      	mov	r6, r0
 8009cf4:	d802      	bhi.n	8009cfc <_realloc_r+0x34>
 8009cf6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009cfa:	d8f4      	bhi.n	8009ce6 <_realloc_r+0x1e>
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	4640      	mov	r0, r8
 8009d00:	f7ff fc26 	bl	8009550 <_malloc_r>
 8009d04:	4607      	mov	r7, r0
 8009d06:	2800      	cmp	r0, #0
 8009d08:	d0ec      	beq.n	8009ce4 <_realloc_r+0x1c>
 8009d0a:	42b5      	cmp	r5, r6
 8009d0c:	462a      	mov	r2, r5
 8009d0e:	4621      	mov	r1, r4
 8009d10:	bf28      	it	cs
 8009d12:	4632      	movcs	r2, r6
 8009d14:	f7ff ffca 	bl	8009cac <memcpy>
 8009d18:	4621      	mov	r1, r4
 8009d1a:	4640      	mov	r0, r8
 8009d1c:	f7ff fbae 	bl	800947c <_free_r>
 8009d20:	463c      	mov	r4, r7
 8009d22:	e7e0      	b.n	8009ce6 <_realloc_r+0x1e>

08009d24 <_malloc_usable_size_r>:
 8009d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d28:	1f18      	subs	r0, r3, #4
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	bfbc      	itt	lt
 8009d2e:	580b      	ldrlt	r3, [r1, r0]
 8009d30:	18c0      	addlt	r0, r0, r3
 8009d32:	4770      	bx	lr

08009d34 <_init>:
 8009d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d36:	bf00      	nop
 8009d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d3a:	bc08      	pop	{r3}
 8009d3c:	469e      	mov	lr, r3
 8009d3e:	4770      	bx	lr

08009d40 <_fini>:
 8009d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d42:	bf00      	nop
 8009d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d46:	bc08      	pop	{r3}
 8009d48:	469e      	mov	lr, r3
 8009d4a:	4770      	bx	lr
